<!DOCTYPE html>
<!--[if IE 8]><html class="ie ie8"> <![endif]-->
<!--[if IE 9]><html class="ie ie9"> <![endif]-->
<!--[if gt IE 9]><!-->	<html> <!--<![endif]-->
<head>
<!-- Basic -->
<meta charset="utf-8">
<title>Memcached Quick Guide</title>
<meta name="description" content="Memcached Quick Guide - Learn Memcached memory caching system in simple and easy steps starting from basic to advanced concepts with examples including Overview, Environment, Connection, Set Data, Add Data, Replace Data, Append and Prepend Data, CAS Command, Get Data, Get CAS Data, Delete Key, Delete Data, Increment Decrement Data, Stats and Clear Data, Stats Items, Stats Slabs, Stats Sizes." />
<meta name="keywords" content="Memcached, Tutorial, Beginners, Overview, Environment, Connection, Set Data, Add Data, Replace Data, Append and Prepend Data, CAS Command, Get Data, Get CAS Data, Delete Key, Delete Data, Increment Decrement Data, Stats and Clear Data, Stats Items, Stats Slabs, Stats Sizes." />
<base href="https://www.tutorialspoint.com/" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="website" />
<meta property="fb:app_id" content="471319149685276" />
<meta property="og:site_name" content="www.tutorialspoint.com" />
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="author" content="tutorialspoint.com">
<script type="text/javascript" src="https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2"></script>
<link rel="stylesheet" href="https://www.tutorialspoint.com/theme/css/style-min.css?v=3">
<script>
function openNav() {	
  document.getElementById("mySidenav").style.width = "250px";
  document.getElementById("right_obs").style.display = "block";
}
function closeNav() {
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
function close_obs_sidenav(){
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
</script>
<!-- Head Libs -->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]-->
<style>
select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }
.btnsbmt{ background: #2a8d84 !important;}
ul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}
div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #2a8d84 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #2a8d84 !important;}
.submenu-item{ border-bottom: 2px solid #2a8d84 !important; border-top: 2px solid #2a8d84 !important }
.ace_scroller{overflow: auto!important;}
a.demo{font-family: "Open Sans",Arial,sans-serif; background:#2a8d84; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}
a.demo:hover{opacity:.8}
</style>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
</head>
<body onload="prettyPrint()">
<div class="wrapLoader">
   <div class="imgLoader">
      <img  src="/images/loading-cg.gif" alt="" width="70" height="70" />
   </div>
</div>
<div id="right_obs" class="display-none" onclick="close_obs_sidenav()"></div>
<header>
   <div class="container">			
      <h1 class="logo">
      <a href="index.htm" title="tutorialspoint">
      <img alt="tutorialspoint" src="/memcached/images/logo.png">
      </a>
      </h1>			
      <ul class="tp-inline-block pull-right" id="tp-head-icons">
        <li>
           <div class="tp-second-nav tp-display-none tp-pointer" onclick="openNav()">
              <i class="fa fa-th-large fa-lg"></i>
           </div>
        </li>
     </ul>
     <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull" style="top: 24px!important"> <i class="icon icon-bars"></i> </button>
      <nav>
         <ul class="nav nav-pills nav-top">
            <li><a href="/about/about_careers.htm" style="background: #fffb09; font-weight: bold;"><i class="icon icon-suitcase"></i> Jobs</a></li>
            <li> <a target="_blank" href="/programming_examples/"><i class="fa fa-cubes"></i> &nbsp;Examples</a> </li>
            <li> <a href="https://www.tutorialspoint.com/whiteboard.htm"><img src="theme/css/icons/image-editor.png" alt="Whiteboard" title="Whiteboard"> &nbsp;Whiteboard</a> </li>
            <li> <a href="https://www.tutorialspoint.com/netmeeting.php"><i class="fa-camera"></i> &nbsp;Net Meeting</a> </li>
            <li> <a href="/online_dev_tools.htm"> <i class="dev-tools-menu" style="opacity:.5"></i> Tools </a> </li>
            <li> <a href="/articles/index.php"><i class="icon icon-file-text-o"></i> &nbsp;Articles</a> </li>            
            <li class="top-icons">
              <ul class="social-icons">
              <li class="facebook"><a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook">Facebook</a></li>
              <li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
              <li class="twitter"><a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter">Twitter</a></li>
              <li class="linkedin"><a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin">Linkedin</a></li>
              <li class="youtube"><a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube">YouTube</a></li>
              </ul>
           </li>
         </ul>
      </nav>
    </div>
     <div class="sidenav" id="mySidenav">
     <div class="navbar nav-main">
      <div class="container">
         <nav class="nav-main mega-menu">
            <ul class="nav nav-pills nav-main" id="mainMenu">
               <li class="dropdown no-sub-menu"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li>   
               <li class="dropdown no-sub-menu"><a class="dropdown" href="/questions/index.php"><i class="fa fa-send"></i> Q/A </a> </li>
               <li class="dropdown"><a class="dropdown" href="tutorialslibrary.htm"><span class="tut-lib"> Library </span></a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="videotutorials/index.htm"><i class="fa-toggle-right"></i> Videos </a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="tutor_connect/index.php"><i class="fa-user"> </i> Tutors</a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://store.tutorialspoint.com/"><i class="fa-usd"></i> Store </a> </li>
               <li class="dropdown no-sub-menu">
                  <div class="searchform-popup">
                     <input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
                     <div class="magnifying-glass"><i class="icon-search"></i> Search </div>
                 </div>
               </li>
            </ul>
         </nav>
        </div>
      </div>	
     </div>	
   </div>	
</header>
<div style="clear:both;"></div>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-2">
<aside class="sidebar">
<div class="mini-logo">
<img src="/memcached/images/memcached-mini-logo.jpg" alt="Memcached Tutorial" />
</div>
<ul class="nav nav-list primary left-menu">
<li class="heading">Memcached Basics</li>
<li><a href="/memcached/index.htm">Memcached - Home</a></li>
<li><a href="/memcached/memcached_overview.htm">Memcached - Overview</a></li>
<li><a href="/memcached/memcached_environment.htm">Memcached - Environment</a></li>
<li><a href="/memcached/memcached_connection.htm">Memcached - Connection</a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">Memcached Storage Commands</li>
<li><a href="/memcached/memcached_set_data.htm">Memcached - Set Data</a></li>
<li><a href="/memcached/memcached_add_data.htm">Memcached - Add Data</a></li>
<li><a href="/memcached/memcached_replace_data.htm">Memcached - Replace Data</a></li>
<li><a href="/memcached/memcached_append_data.htm">Memcached - Append Data</a></li>
<li><a href="/memcached/memcached_prepend_data.htm">Memcached - Prepend Data</a></li>
<li><a href="/memcached/memcached_cas.htm">Memcached - CAS</a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">Memcached Retrieval Commands</li>
<li><a href="/memcached/memcached_get_data.htm">Memcached - Get Data</a></li>
<li><a href="/memcached/memcached_get_cas_data.htm">Memcached - Get CAS Data</a></li>
<li><a href="/memcached/memcached_delete_key.htm">Memcached - Delete Key</a></li>
<li><a href="/memcached/memcached_delete_data.htm">Memcached - Delete Data</a></li>
<li><a href="/memcached/memcached_incr_decr.htm">Memcached - Incr/Decr</a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">Memcached Statistics Commands</li>
<li><a href="/memcached/memcached_stats.htm">Memcached - Stats</a></li>
<li><a href="/memcached/memcached_stats_items.htm">Memcached - Stats Items</a></li>
<li><a href="/memcached/memcached_stats_slabs.htm">Memcached - Stats Slabs</a></li>
<li><a href="/memcached/memcached_stats_sizes.htm">Memcached - Stats sizes</a></li>
<li><a href="/memcached/memcached_clear_data.htm">Memcached - Clear Data</a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">Memcached Useful Resources</li>
<li><a href="/memcached/memcached_quick_guide.htm">Memcached - Quick Guide</a></li>
<li><a href="/memcached/memcached_useful_resources.htm">Memcached - Useful Resources</a></li>
<li><a href="/memcached/memcached_discussion.htm">Memcached - Discussion</a></li>
</ul>
<ul class="nav nav-list primary push-bottom left-menu special">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>Memcached - Quick Guide</h1>
<hr />
<div style="padding-bottom:5px;padding-left:10px;text-align: center;">Advertisements</div>
<div style="text-align: center;">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="/memcached/memcached_clear_data.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/memcached/memcached_useful_resources.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr />
<h1>Memcached - Overview</h1>
<p>Memcached is an open source, high-performance, distributed memory caching system intended to speed up dynamic web applications by reducing the database load. It is a key-value dictionary of strings, objects, etc., stored in the memory, resulting from database calls, API calls, or page rendering.</p>
<p>Memcached was developed by Brad Fitzpatrick for LiveJournal in 2003. However, it is now being used by Netlog, Facebook, Flickr, Wikipedia, Twitter, and YouTube among others.</p>
<p>The key features of Memcached are as follows &minus;</p>
<ul class="list">
<li><p>It is open source.</p></li>
<li><p>Memcached server is a big hash table.</p></li>
<li><p>It significantly reduces the database load</p></li>
<li><p>It is perfectly efficient for websites with high database load.</p></li>
<li><p>It is distributed under Berkeley Software Distribution (BSD) license.</p></li>
<li><p>It is a client-server application over TCP or UDP.</p></li>
</ul>
<h3>Memcached is not &minus;</h3>
<ul class="list">
<li><p>a persistent data store</p></li>
<li><p>a database</p></li>
<li><p>application-specific</p></li>
<li><p>a large object cache</p></li>
<li><p>fault-tolerant or highly available</p></li>
</ul>
<h1>Memcached - Environment</h1>
<h2>Installing Memcached on Ubuntu</h2>
<p>To install Memcached on Ubuntu, go to terminal and type the following commands &minus;</p>
<pre class="result notranslate">
$sudo apt-get update
$sudo apt-get install memcached
</pre>
<h3>Confirming Memcached Installation</h3>
<p>To confirm if Memcached is installed or not, you need to run the command given below. This command shows that Memcached is running on the default port <b>11211</b>.</p>
<pre class="result notranslate">
$ps aux | grep memcached
</pre>
<p>To run Memcached server on a different port, execute the command given below. This command starts the server on the TCP port 11111 and listens on the UDP port 11111 as a daemon process.</p>
<pre class="result notranslate">
$memcached -p 11111 -U 11111 -u user -d
</pre>
<p>You can run multiple instances of Memcached server through a single installation.</p>
<h2>Memcached Java Environment Setup</h2>
<p>To use Memcached in your Java program, you need to download <b><a href="https://code.google.com/archive/p/spymemcached/downloads" target="_blank" rel="nofollow">spymemcached-2.10.3.jar</a></b> and setup this jar into the classpath.</p>
<h1>Memcached - Connection</h1>
<p>To connect to a Memcached server, you need to use the telnet command on HOST and PORT names.</p>
<h3>Syntax</h3>
<p>The basic syntax of Memcached telnet command is as shown below &minus;</p>
<pre class="result notranslate">
$telnet HOST PORT
</pre>
<p>Here, <b>HOST</b> and <b>PORT</b> are machine IP and port number respectively, on which the Memcached server is executing.</p>
<h3>Example</h3>
<p>The following example shows how to connect to a Memcached server and execute a simple set and get command. Assume that the Memcached server is running on host 127.0.0.1 and port 11211.</p>
<pre class="result notranslate">
$telnet 127.0.0.1 11211
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is '^]'.
// now store some data and get it from memcached server
set tutorialspoint 0 900 9
memcached
STORED
get tutorialspoint
VALUE tutorialspoint 0 9
memcached
END
</pre>
<h2>Connection from Java Application</h2>
<p>To connect the Memcached server from your java program, you need to add the Memcached jar into your classpath as shown in the previous chapter. Assume that the Memcached server is running on host 127.0.0.1 and port 11211. &minus;</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
      
      // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server sucessfully");
      
      //not set data into memcached server
      System.out.println("set status:"+mcc.set("tutorialspoint", 900, "memcached").done);
      
      //Get value from cache
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successfully
set status:true
Get from Cache:memcached.
</pre>
<p>The terminal may show few informational messages too, those can be ignored.</p>
<h1>Memcached - Set Data</h1>
<p>Memcached <b>set</b> command is used to set a new value to a new or existing key.</p>
<h3>Syntax</h3>
<p>The basic syntax of Memcached <b>set</b> command is as shown below &minus; </p>
<pre class="result notranslate">
set key flags exptime bytes [noreply] 
value 
</pre>
<p>The keywords in the syntax are as described below &minus;</p>
<ul class="list">
<li><p><b>key</b> &minus; It is the name of the key by which data is stored and retrieved from Memcached.</p></li>
<li><p><b>flags</b> &minus; It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>
<li><p><b>exptime</b> &minus; It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as UNIX timestamp for expiration.</p></li>
<li><p><b>bytes</b> &minus; It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>
<li><p><b>noreply (optional)</b> - It is a parameter that informs the server not to send any reply.</p></li>
<li><p><b>value</b> &minus; It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>
</ul>
<h3>Output</h3>
<p>The output of the command is as shown below &minus;</p>
<pre class="result notranslate">
STORED
</pre>
<ul class="list">
<li><p><b>STORED</b> indicates success.</p></li>
<li><p><b>ERROR</b> indicates incorrect syntax or error while saving data.</p></li>
</ul>
<h3>Example</h3>
<p>In the following example, we use tutorialspoint as the key and set value Memcached in it with an expiration time of 900 seconds.</p>
<pre class="result notranslate">
set tutorialspoint 0 900 9
memcached
STORED
get tutorialspoint
VALUE tutorialspoint 0 9
Memcached
END
</pre>
<h2>Set Data Using Java Application</h2>
<p>To set a key in Memcached server, you need to use Memcached <b>set</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
      
      // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server sucessfully");
      System.out.println("set status:"+mcc.set("tutorialspoint", 900, "memcached").done);
      
      // Get value from cache
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successfully
set status:true
Get from Cache:memcached
</pre>
<h1>Memcached - Add Data</h1>
<p>Memcached <b>add</b> command is used to set a value to a new key. If the key already exists, then it gives the output NOT_STORED.</p>
<h3>Syntax</h3>
<p>The basic syntax of Memcached <b>add</b> command is as shown below &minus;</p>
<pre class="result notranslate">
add key flags exptime bytes [noreply]
value
</pre>
<p>The keywords in the syntax are as described below &minus;</p>
<ul class="list">
<li><p><b>key</b> &minus; It is the name of the key by which data is stored and retrieved from Memcached.</p></li>
<li><p><b>flags</b> &minus; It is the 32-bit unsigned integer that the server stores with the data provided
by the user, and returns along with the data when the item is retrieved.</p></li>
<li><p><b>exptime</b> &minus; It is the expiration time in seconds. 0 means no delay. If exptime is more
than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>
<li><p><b>bytes</b> &minus; It is the number of bytes in the data block that needs to be stored. This is the
length of the data that needs to be stored in Memcached.</p></li>
<li><p><b>noreply (optional)</b> &minus; It is a parameter that informs the server not to send any reply.</p></li>
<li><p><b>value</b> &minus; It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>
</ul>
<h3>Output</h3>
<p>The output of the command is as shown below &minus;</p>
<pre class="result notranslate">
STORED
</pre>
<ul class="list">
<li><p><b>STORED</b> indicates success.</p></li>
<li><p><b>NOT_STORED</b> indicates the data is not stored in Memcached.</p></li>
</ul>
<h3>Example</h3>
<p>In the following example, we use ‘key’ as the key and add the value Memcached in it with an expiration time of 900 seconds.</p>
<pre class="result notranslate">
add key 0 900 9
memcached
STORED
get key
VALUE key 0 9
Memcached
END
</pre>
<h3>Failure Output</h3>
<pre class="result notranslate">
add key 0 900 5
redis
NOT_STORED
</pre>
<h2>Add Data Using Java Application</h2>
<p>To add data in a Memcached server, you need to use the Memcached <b>add</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
      
      // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server successful");
      System.out.println("add status:"+mcc.add("tutorialspoint", 900, "redis").done);
      System.out.println("add status:"+mcc.add("tp", 900, "redis").done);
      
      // Get value from cache
      System.out.println("Get from Cache tp:"+mcc.get("tp"));
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successful
add status:false
add status:true
Get from Cache tp:redis
</pre>
<h1>Memcached - Replace Data</h1>
<p>Memcached <b>replace</b> command is used to replace the value of an existing key. If the key
does not exist, then it gives the output NOT_STORED.</p>
<h3>Syntax</h3>
<p>The basic syntax of Memcached <b>replace</b> command is as shown below &minus;</p>
<pre class="result notranslate">
replace key flags exptime bytes [noreply]
value
</pre>
<p>The keywords in the syntax are as described below &minus;</p>
<ul class="list">
<li><p><b>key</b> &minus; It is the name of the key by which data is stored and retrieved from Memcached.</p></li>
<li><p><b>flags</b> &minus; It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>
<li><p><b>exptime</b> &minus; It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>
<li><p><b>bytes</b> &minus; It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in the Memcached.</p></li>
<li><p><b>noreply (optional)</b> &minus; It is a parameter that informs the server not to send any
reply.</p></li>
<li><p><b>value</b> &minus; It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>
</ul>
<h3>Output</h3>
<p>The output of the command is as shown below &minus;</p>
<pre class="result notranslate">
STORED
</pre>
<ul class="list">
<li><p><b>STORED</b> indicates success.</p></li>
<li><p><b>NOT_STORED</b> indicates the data is not stored in Memcached.</p></li>
</ul>
<h3>Example</h3>
<p>In the following example, we use ‘key’ as the key and store memcached in it with an expiration time of 900 seconds. After this, the same key is replaced with the value ‘redis’.</p>
<pre class="result notranslate">
add key 0 900 9
memcached
STORED
get key
VALUE key 0 9
memcached
END
replace key 0 900 5
redis
get key
VALUE key 0 5
redis
END
</pre>
<h2>Replace Data Using Java Application</h2>
<p>To replace data in a Memcached server, you need to use the Memcached <b>replace</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
      
      // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server sucessfully");
      System.out.println("set status:"+mcc.set("tutorialspoint", 900, "memcached").done);
      
      // Get value from cache
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
      
      // now replace the existing data
      System.out.println("Replace cache:"+mcc.replace("tutorialspoint", 900, "redis").done);
      
      // get the updated data
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successfully
set status:true
Get from Cache:memcached
Replace cache:true
Get from Cache:redis
</pre>
<h1>Memcached - Append Data</h1>
<p>Memcached <b>append</b> command is used to add some data in an existing key. The data is stored after the existing data of the key.</p>
<h3>Syntax</h3>
<p>The basic syntax of Memcached <b>append</b> command is as shown below &minus;</p>
<pre class="result notranslate">
append key flags exptime bytes [noreply]
value
</pre>
<p>The keywords in the syntax are as described below&minus;</p>
<ul class="list">
<li><p><b>key</b> &minus; It is the name of the key by which data is stored and retrieved from
Memcached.</p></li>
<li><p><b>flags</b> &minus; It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>
<li><p><b>exptime</b> &minus; It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>
<li><p><b>bytes</b> &minus; It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>
<li><p><b>noreply (optional)</b> &minus; It is a parameter that informs the server not send any reply.</p></li>
<li><p><b>value</b> &minus; It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>
</ul>
<h3>Output</h3>
<p>The output of the command is as shown below &minus;</p>
<pre class="result notranslate">
STORED
</pre>
<ul class="list">
<li><p><b>STORED</b> indicates success.</p></li>
<li><p><b>NOT_STORED</b> indicates the key does not exist in the Memcached server.</p></li>
<li><p><b>CLIENT_ERROR</b> indicates error.</p></li>
</ul>
<h3>Example</h3>
<p>In the following example, we try to add some data in a key that does not exist. Hence, Memcached returns <b>NOT_STORED</b>. After this, we set one key and append data into it.</p>
<pre class="result notranslate">
append tutorials 0 900 5
redis
NOT_STORED
set tutorials 0 900 9
memcached
STORED
get tutorials
VALUE tutorials 0 14
memcached
END
append tutorials 0 900 5
redis
STORED
get tutorials
VALUE tutorials 0 14
memcachedredis
END
</pre>
<h2>Append Data Using Java Application</h2>
<p>To append data in a Memcached server, you need to use the Memcached <b>append</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
      
      // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server successful");
      System.out.println("set status:"+mcc.set("tutorialspoint", 900, "memcached").isDone());
      
      // Get value from cache
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
      
      // now append some data into existing key
      System.out.println("Append to cache:"+mcc.append("tutorialspoint", "redis").isDone());
      
      // get the updated key
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successful
set status:true
Get from Cache:memcached
Append to cache:true
Get from Cache:memcachedredis
</pre>
<h1>Memcached - Prepend Data</h1>
<p>Memcached <b>prepend</b> command is used to add some data in an existing key. The data is stored before the existing data of the key.</p>
<h3>Syntax</h3>
<p>The basic syntax of Memcached <b>prepend</b> command is as shown below &minus;</p>
<pre class="result notranslate">
prepend key flags exptime bytes [noreply]
value
</pre>
<p>The keywords in the syntax are as described below&minus;</p>
<ul class="list">
<li><p><b>key</b> &minus; It is the name of the key by which data is stored and retrieved in
Memcached.</p></li>
<li><p><b>flags</b> &minus; It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>
<li><p><b>exptime</b> &minus; It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>
<li><p><b>bytes</b> &minus; It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>
<li><p><b>noreply (optional)</b> &minus;It is a parameter that informs the server not send any reply.</p></li>
<li><p><b>value</b> &minus; It is the data that needs to be stored. Data needs to be passed on the new line after executing the command with the above options.</p></li>
</ul>
<h3>Output</h3>
<p>The output of the command is as shown below &minus;</p>
<pre class="result notranslate">
STORED
</pre>
<ul class="list">
<li><p><b>STORED</b> indicates success.</p></li>
<li><p><b>NOT_STORED</b> indicates the key does not exist in the Memcached server.</p></li>
<li><p><b>CLIENT_ERROR</b> indicates error.</p></li>
</ul>
<h3>Example</h3>
<p>In the following example, we add some data in a key that does not exist. Hence, Memcached returns <b>NOT_STORED</b>. After this, we set one key and prepend data into it.</p>
<pre class="result notranslate">
prepend tutorials 0 900 5
redis
NOT_STORED
set tutorials 0 900 9
memcached
STORED
get tutorials
VALUE tutorials 0 14
memcached
END
prepend tutorials 0 900 5
redis
STORED
get tutorials
VALUE tutorials 0 14
redismemcached
END
</pre>
<h2>Prepend Data Using Java Application</h2>
<p>To prepend data in a Memcached server, you need to use the Memcached <b>prepend</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
      // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server successful");
      System.out.println("set status:"+mcc.set("tutorialspoint", 900, "memcached").isDone());
      
      // Get value from cache
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
      
      // now append some data into existing key
      System.out.println("Prepend to cache:"+mcc.prepend("tutorialspoint", "redis").isDone());
      
      // get the updated key
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successful
set status:true
Get from Cache:memcached
Prepend to cache:true
Get from Cache:redismemcached
</pre>
<h1>Memcached - CAS Command</h1>
<p>CAS stands for Check-And-Set or Compare-And-Swap. Memcached <b>CAS</b> command is used to set the data if it is not updated since last fetch. If the key does not exist in Memcached, then it returns <b>NOT_FOUND</b>.</p>
<h3>Syntax</h3>
<p>The basic syntax of Memcached <b>CAS</b> command is as shown below &minus;</p>
<pre class="result notranslate">
set key flags exptime bytes unique_cas_key [noreply]
value
</pre>
<p>The keywords in the syntax are as described below&minus;</p>
<ul class="list">
<li><p><b>key</b> &minus; It is the name of the key by which data is stored and retrieved from Memcached.</p></li>
<li><p><b>flags</b> &minus; It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>
<li><p><b>exptime</b> &minus; It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>
<li><p><b>bytes</b> &minus; It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>
<li><p><b>unique_cas_key</b> &minus; It is the unique key get from gets command.</p></li>
<li><p><b>noreply (optional)</b> &minus; It is a parameter that informs the server not to send any
reply.</p></li>
<li><p><b>value</b> &minus; It is the data that needs to be stored. Data needs to be passed on new line after executing the command with the above options.</p></li>
</ul>
<h3>Output</h3>
<p>The output of the command is as shown below &minus;</p>
<pre class="result notranslate">
STORED
</pre>
<ul class="list">
<li><p><b>STORED</b> indicates success.</p></li>
<li><p><b>ERROR</b>  indicates error while saving data or wrong syntax.</p></li>
<li><p><b>EXISTS</b> indicates that someone has modified the CAS data since last fetch.</p></li>
<li><p><b>NOT_FOUND</b> indicates that the key does not exist in the Memcached server.</p></li>
</ul>
<h3>Example</h3>
<p>To execute a CAS command in Memcached, you need to get a CAS token from the Memcached gets command.</p>
<pre class="result notranslate">
cas tp 0 900 9
ERROR
cas tp 0 900 9 2
memcached
set tp 0 900 9
memcached
STORED
gets tp
VALUE tp 0 9 1
memcached
END
cas tp 0 900 5 2
redis
EXISTS
cas tp 0 900 5 1
redis
STORED
get tp
VALUE tp 0 5
redis
END
</pre>
<h2>CAS Using Java Application</h2>
<p>To get CAS data from a Memcached server, you need to use Memcached <b>gets</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
     
     // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server successful");
      System.out.println("set status:"+mcc.set("tutorialspoint", 900, "memcached").isDone());

      // Get cas token from cache
      long castToken = mcc.gets("tutorialspoint").cas;
      System.out.println("Cas token:"+castToken);

      // now set new data in memcached server
      System.out.println("Now set new data:"+mcc.cas("tutorialspoint",
      castToken, 900, "redis"));
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successful
set status:true
Cas token:3
Now set new data:OK
Get from Cache:redis
</pre>
<h1>Memcached - Get Data</h1>
<p>Memcached <b>get</b> command is used to get the value stored at key. If the key does not exist in Memcached, then it returns nothing.</p>
<h3>Syntax</h3>
<p>The basic syntax of Memcached <b>get</b> command is as shown below &minus;</p>
<pre class="result notranslate">
get key
</pre>
<h3>Example</h3>
<p>In the following example, we use tutorialspoint as the key and store memcached in it with an expiration time of 900 seconds.</p>
<pre class="result notranslate">
set tutorialspoint 0 900 9
memcached
STORED
get tutorialspoint
VALUE tutorialspoint 0 9
memcached
END
</pre>
<h2>Get Data Using Java Application</h2>
<p>To get data from a Memcached server, you need to use the Memcached <b>get</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
      // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server sucessfully");
      System.out.println("set status:"+mcc.set("tutorialspoint", 900, "memcached").done);
     
     // Get value from cache
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successfully
set status:true
Get from Cache:memcached
</pre>
<h1>Memcached - Get CAS Data</h1>
<p>Memcached <b>gets</b> command is used to get the value with CAS token. If the key does not exist in Memcached, then it returns nothing.</p>
<h3>Syntax</h3>
<p>The basic syntax of Memcached <b>gets</b> command is as shown below &minus;</p>
<pre class="result notranslate">
get key
</pre>
<h3>Example</h3>
<pre class="result notranslate">
set tutorialspoint 0 900 9
memcached
STORED
gets tutorialspoint
VALUE tutorialspoint 0 9 1
memcached
END
</pre>
<p>In this example, we use tutorialspoint as the key and store memcached in it with an expiration time of 900 seconds.</p>
<h2>Get CAS Data Using Java Application</h2>
<p>To get CAS data from a Memcached server, you need to use the Memcached <b>gets</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
      
      // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server sucessfully");
      System.out.println("set status:"+mcc.set("tutorialspoint", 900, "memcached").done);
      
      // Get value from cache
      System.out.println("Get from Cache:"+mcc.gets("tutorialspoint"));
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successfully
set status:true
Get from Cache:{CasValue 2/memcached}
</pre>
<h1>Memcached - Delete Key</h1>
<p>Memcached <b>delete</b> command is used to delete an existing key from the Memcached server.</p>
<h2>Syntax</h2>
<p>The basic syntax of Memcached <b>delete</b> command is as shown below &minus;</p>
<pre class="result notranslate">
delete key [noreply]
</pre>
<h3>Output</h3>
<p>CAS command may produce one of the following result  &minus;</p>
<ul class="list">
<li><p><b>DELETED</b> indicates successful deletion.</p></li>
<li><p><b>ERROR</b> indicates error while deleting data or wrong syntax.</p></li>
<li><p><b>NOT_FOUND</b> indicates that the key does not exist in the Memcached server.</p></li>
</ul>
<h3>Example</h3>
<p>In this example, we use tutorialspoint as a key and store memcached in it with an expiration time of 900 seconds. After this, it deletes the stored key.</p>
<pre class="result notranslate">
set tutorialspoint 0 900 9
memcached
STORED
get tutorialspoint
VALUE tutorialspoint 0 9
memcached
END
delete tutorialspoint
DELETED
get tutorialspoint
END
delete tutorialspoint
NOT_FOUND
</pre>
<h2>Delete Data Using Java Application</h2>
<p>To delete data from a Memcached server, you need to use the Memcached <b>delete</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import java.net.InetSocketAddress;
import java.util.concurrent.Future;

import net.spy.memcached.MemcachedClient;

public class MemcachedJava {
   public static void main(String[] args) {
   
      try{
   
         // Connecting to Memcached server on localhost
         MemcachedClient mcc = new MemcachedClient(new InetSocketAddress("127.0.0.1", 11211));
         System.out.println("Connection to server sucessful.");

         // add data to memcached server
         Future fo = mcc.set("tutorialspoint", 900, "World's largest online tutorials library");

         // print status of set method
         System.out.println("set status:" + fo.get());

         // retrieve and check the value from cache
         System.out.println("tutorialspoint value in cache - " + mcc.get("tutorialspoint"));

         // try to add data with existing key
         Future fo = mcc.<b>delete</b>("tutorialspoint");

         // print status of delete method
         System.out.println("delete status:" + fo.get());

         // retrieve and check the value from cache
         System.out.println("tutorialspoint value in cache - " + mcc.get("codingground"));

         // Shutdowns the memcached client
         mcc.shutdown();
         
      }catch(Exception ex)
         System.out.println(ex.getMessage());
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successful
set status:true
tutorialspoint value in cache - World's largest online tutorials library
delete status:true
tutorialspoint value in cache - null
</pre>
<h1>Memcached - Delete data</h1>
<p>Memcached <b>delete</b> command is used to delete an existing key from the Memcached server.</p>
<h3>Syntax</h3>
<p>The basic syntax of Memcached <b>delete</b> command is as shown below &minus;</p>
<pre class="result notranslate">
delete key
</pre>
<p>If the key is successfully deleted, then it returns DELETED. If the key is not found, then it returns NOT_FOUND, otherwise it returns ERROR.</p>
<h3>Example</h3>
<p>In this example, we use tutorialspoint as a key and store memcached in it with an expiration time of 900 seconds. After this, it deletes the stored key.</p>
<pre class="result notranslate">
set tutorialspoint 0 900 9
memcached
STORED
get tutorialspoint
VALUE tutorialspoint 0 9
memcached
END
delete tutorialspoint
DELETED
get tutorialspoint
END
delete tutorialspoint
NOT_FOUND
</pre>
<h2>Delete Data Using Java Application</h2>
<p>To delete data from a Memcached server, you need to use the Memcached <b>delete</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
      
      // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server successful");
      System.out.println("set status:"+mcc.set("tutorialspoint", 900, "memcached").done);
      
      // Get value from cache
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
      
      // delete value from cache
      System.out.println("Delete from Cache:"+mcc.delete("tutorialspoint").isDone());
      
      // check whether value exists or not
      System.out.println("Get from Cache:"+mcc.get("tutorialspoint"));
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successful
set status:true
Get from Cache:memcached
Delete from Cache:true
Get from Cache:null
</pre>
<h1>Memcached - Increment Decrement Data</h1>
<p>Memcached <b>incr</b> and <b>decr</b> commands are used to increment or decrement the numeric value of an existing key. If the key is not found, then it returns <b>NOT_FOUND</b>. If the key is not numeric, then it returns <b>CLIENT_ERROR cannot increment or decrement non-numeric value</b>. Otherwise, <b>ERROR</b> is returned.</p>
<h3>Syntax - incr</h3>
<p>The basic syntax of Memcached <b>incr</b> command is as shown below &minus;</p>
<pre class="result notranslate">
incr key increment_value
</pre>
<h3>Example</h3>
<p>In this example, we use visitors as key and set 10 initially into it, thereafter we increment the visitors by 5.</p>
<pre class="result notranslate">
set visitors 0 900 2
10
STORED
get visitors
VALUE visitors 0 2
10
END
incr visitors 5
15
get visitors
VALUE visitors 0 2
15
END
</pre>
<h3>Syntax - decr</h3>
<p>The basic syntax of Memcached <b>decr</b> command is as shown below</p>
<pre class="result notranslate">
decr key decrement_value
</pre>
<h3>Example</h3>
<pre class="result notranslate">
set visitors 0 900 2
10
STORED
get visitors
VALUE visitors 0 2
10
END
decr visitors 5
5
get visitors
VALUE visitors 0 1
5
END
</pre>
<h2>Incr/Decr Using Java Application</h2>
<p>To increment or decrement data in a Memcached server, you need to use Memcached <b>incr or decr</b> methods respectively.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
      
      // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server sucessfully");
      System.out.println("set status:"+mcc.set("count", 900, "5").isDone());
      
      // Get value from cache
      System.out.println("Get from Cache:"+mcc.get("count"));
      
      // now increase the stored value
      System.out.println("Increment value:"+mcc.incr("count", 2));
      
      // now decrease the stored value
      System.out.println("Decrement value:"+mcc.decr("count", 1));
      
      // now get the final stored value
      System.out.println("Get from Cache:"+mcc.get("count"));
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successfully
set status:true
Get from Cache:5
Increment value:7
Decrement value:6
Get from Cache:6
</pre>
<h1>Memcached - Stats</h1>
<p>Memcached <b>stats</b> command is used to return server statistics such as PID, version, connections, etc.</p>
<h2>Syntax</h2>
<p>The basic syntax of Memcached <b>stats</b> command is as shown below &minus;</p>
<pre class="result notranslate">
stats
</pre>
<h3>Example</h3>
<pre class="result notranslate">
stats
STAT pid 1162
STAT uptime 5022
STAT time 1415208270
STAT version 1.4.14
STAT libevent 2.0.19-stable
STAT pointer_size 64
STAT rusage_user 0.096006
STAT rusage_system 0.152009
STAT curr_connections 5
STAT total_connections 6

STAT connection_structures 6
STAT reserved_fds 20
STAT cmd_get 6
STAT cmd_set 4
STAT cmd_flush 0
STAT cmd_touch 0
STAT get_hits 4
STAT get_misses 2
STAT delete_misses 1
STAT delete_hits 1

STAT incr_misses 2
STAT incr_hits 1
STAT decr_misses 0
STAT decr_hits 1
STAT cas_misses 0
STAT cas_hits 0
STAT cas_badval 0
STAT touch_hits 0
STAT touch_misses 0
STAT auth_cmds 0

STAT auth_errors 0
STAT bytes_read 262
STAT bytes_written 313
STAT limit_maxbytes 67108864
STAT accepting_conns 1
STAT listen_disabled_num 0
STAT threads 4
STAT conn_yields 0
STAT hash_power_level 16

STAT hash_bytes 524288
STAT hash_is_expanding 0
STAT expired_unfetched 1
STAT evicted_unfetched 0
STAT bytes 142
STAT curr_items 2
STAT total_items 6
STAT evictions 0
STAT reclaimed 1
END
</pre>
<h2>Stats Using Java Application</h2>
<p>To get stats from a Memcached server, you need to use the Memcached <b>stats</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
      
      // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server successful");
      System.out.println("Stats:"+mcc.stats);
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successful
Stats:[/127.0.0.1:11211:[delete_hits:0, bytes:71, total_items:4,
rusage_system:0.220013, touch_misses:0, cmd_touch:0, listen_disabled_num:0,
auth_errors:0, evictions:0, version:1.4.14, pointer_size:64, time:1417279366,
incr_hits:1, threads:4, expired_unfetched:0, limit_maxbytes:67108864,
hash_is_expanding:0, bytes_read:170, curr_connections:8, get_misses:1,
reclaimed:0, bytes_written:225, hash_power_level:16, connection_structures:9,
cas_hits:0, delete_misses:0, total_connections:11, rusage_user:0.356022,
cmd_flush:0, libevent:2.0.19-stable, uptime:12015, reserved_fds:20,
touch_hits:0, cas_badval:0, pid:1138, get_hits:2, curr_items:1, cas_misses:0,
accepting_conns:1, evicted_unfetched:0, cmd_get:3, cmd_set:2, auth_cmds:0,
incr_misses:1, hash_bytes:524288, decr_misses:1, decr_hits:1, conn_yields:0]]
</pre>
<h1>Memcached - Stats Items</h1>
<p>Memcached <b>stats items</b> command is used to get items statistics such as count, age,
eviction, etc. organized by slabs ID.</p>
<h2>Syntax</h2>
<p>The basic syntax of Memcached <b>stats items</b> command is as shown below &minus;</p>
<pre class="result notranslate">
stats items
</pre>
<h3>Example</h3>
<pre class="result notranslate">
stats items
STAT items:1:number 1
STAT items:1:age 7
STAT items:1:evicted 0
STAT items:1:evicted_nonzero 0
STAT items:1:evicted_time 0
STAT items:1:outofmemory 0
STAT items:1:tailrepairs 0
STAT items:1:reclaimed 0
STAT items:1:expired_unfetched 0
STAT items:1:evicted_unfetched 0
END
</pre>
<h1>Memcached - Stats Slabs</h1>
<p>Memcached <b>stats slabs</b> command displays slabs statistics such as size, memory usage, commands, count etc. organized by slabs ID.</p>
<h2>Syntax</h2>
<p>The basic syntax of Memcached <b>stats slabs</b> command is as shown below &minus;</p>
<pre class="result notranslate">
stats slabs
</pre>
<h3>Example</h3>
<pre class="result notranslate">
stats slabs
STAT 1:chunk_size 96
STAT 1:chunks_per_page 10922
STAT 1:total_pages 1
STAT 1:total_chunks 10922
STAT 1:used_chunks 1
STAT 1:free_chunks 10921
STAT 1:free_chunks_end 0
STAT 1:mem_requested 71
STAT 1:get_hits 0
STAT 1:cmd_set 1
STAT 1:delete_hits 0
STAT 1:incr_hits 0
STAT 1:decr_hits 0
STAT 1:cas_hits 0
STAT 1:cas_badval 0
STAT 1:touch_hits 0
STAT active_slabs 1
STAT total_malloced 1048512
END
</pre>
<h1>Memcached - Stats Sizes</h1>
<p>Memcached <b>stats sizes</b> command provides information about the sizes and number of items of each size within the cache. The information is returned in two columns. The first column is the size of the item (rounded up to the nearest 32 byte boundary), and the second column is the count of the number of items of that size within the cache.</p>
<h2>Syntax</h2>
<p>The basic syntax of Memcached <b>stats sizes</b> command is as shown below &minus;</p>
<pre class="result notranslate">
stats sizes
</pre>
<h3>Example</h3>
<pre class="result notranslate">
stats sizes
STAT 96 1
END
</pre>
<p>The item size statistics are useful only to determine the sizes of the objects you are storing. Since the actual memory allocation is relevant only in terms of the chunk size and page size, the information is only useful during a careful debugging or diagnostic session.</p>
<h1>Memcached - Clear Data</h1>
<p>Memcached <b>flush_all</b> command is used to delete all data (key-value pairs) from the Memcached server. It accepts an optional parameter called <b>time</b> that sets a time after which the Memcached data is to be cleared.</p>
<h2>Syntax</h2>
<p>The basic syntax of Memcached <b>flush_all</b> command is as shown below &minus;</p>
<pre class="result notranslate">
flush_all [time] [noreply]
</pre>
<p>The above command always returns OK.</p>
<h3>Example</h3>
<p>In the following example, we store some data into the Memcached server and then clear all the data.</p>
<pre class="result notranslate">
set tutorialspoint 0 900 9
memcached
STORED
get tutorialspoint
VALUE tutorialspoint 0 9
memcached
END
flush_all
OK
get tutorialspoint
END
</pre>
<h2>Clear Data Using Java Application</h2>
<p>To clear data from a Memcached server, you need to use the Memcached <b>flush</b> method.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
import net.spy.memcached.MemcachedClient;
public class MemcachedJava {
   public static void main(String[] args) {
     
     // Connecting to Memcached server on localhost
      MemcachedClient mcc = new MemcachedClient(new
      InetSocketAddress("127.0.0.1", 11211));
      System.out.println("Connection to server sucessfully");
      System.out.println("set status:"+mcc.set("count", 900, "5").isDone());
      
      // Get value from cache
      System.out.println("Get from Cache:"+mcc.get("count"));
     
      // now increase the stored value
      System.out.println("Increment value:"+mcc.incr("count", 2));
     
      // now decrease the stored value
      System.out.println("Decrement value:"+mcc.decr("count", 1));
      
      // now get the final stored value
      System.out.println("Get from Cache:"+mcc.get("count"));
      
      // now clear all this data
      System.out.println("Clear data:"+mcc.flush().isDone());
   }
}
</pre>
<h3>Output</h3>
<p>On compiling and executing the program, you get to see the following output &minus;</p>
<pre class="result notranslate">
Connection to server successfully
set status:true
Get from Cache:5
Increment value:7
Decrement value:6
Get from Cache:6
Clear data:true
</pre>
<hr/>
<div class="pre-btn">
<a href="/memcached/memcached_clear_data.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="print-btn center">
<a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>
</div>
<div class="nxt-btn">
<a href="/memcached/memcached_useful_resources.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<hr />
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div class="bottomadtag">Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
<div class="row">
<div class="col-md-3" id="rightbar">
<div class="simple-ad">
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/facebookIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/twitterIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/linkedinIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/googlePlusIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/StumbleUponIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;">
<img src="/images/reddit.jpg" alt="img" />
</a>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="footer-copyright">
<div class="container">
<div class="row">
<div class="col-md-1">
<a href="index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="/scripts/img/logo-footer.png"> </a>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <nav id="sub-menu">
      <ul>
         <li><a href="/about/faq.htm">FAQ's</a></li>
         <li><a href="/about/about_privacy.htm#cookies">Cookies Policy</a></li>
         <li><a href="/about/contact_us.htm">Contact</a></li>
      </ul>
   </nav>
</div>
<div class="col-md-3 col-sm-12 col-xs-12">
<p>&copy; Copyright 2018. All Rights Reserved.</p>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <div class="news-group">
      <input type="text" class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}">
      <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span>
      <div id="newsresponse"></div>
   </div>
</div>
</div>
</div>
</div>
</div>
<!-- Libs -->
<script src="/theme/js/custom-min.js?v=7"></script>
<script src="https://www.google-analytics.com/urchin.js">
</script>
<script>
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script>
</div>
</body>
</html>
