<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->
<head>
<meta charset="utf-8">
<title>Perl Interview Questions</title>
<meta name="description" content="Perl Interview Questions - Learning Perl in simple and easy steps - A beginner's tutorial containing complete knowledge of Perl Syntax Syntax, Classes, Variables, Comments, Loops, File, I/O, Functions, Objects, arrays, strings, methods, blocks, Exception, Hashes, Modules, Common Gateway Interface (CGI), Database Interface (DBI) and Object Oriented Perl">
<meta name="Keywords" content="Perl, Programming, Language, Object Oriented Perl, Perl Variables, Scalars, Arrays, Hash, File I/O, Looping, Regular Expressions, Subroutines, Coding Standard, Writing Modules, Process Management, Socket, Examples, References, Special Variables, Syntax Overview, Advanced Perl, Tutorial, Tutorials, Operators, Built-in Functions, Quiz.">
<base href="https://www.tutorialspoint.com/" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="website" />
<meta property="fb:app_id" content="471319149685276" />
<meta property="og:site_name" content="www.tutorialspoint.com" />
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="author" content="tutorialspoint.com">
<script type="text/javascript" src="https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2"></script>
<link rel="stylesheet" href="https://www.tutorialspoint.com/theme/css/style-min.css?v=3">
<script>
function openNav() {	
  document.getElementById("mySidenav").style.width = "250px";
  document.getElementById("right_obs").style.display = "block";
}
function closeNav() {
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
function close_obs_sidenav(){
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
</script>
<!-- Head Libs -->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]-->
<style>
select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }
.btnsbmt{ background: #43C2C8 !important;}
ul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}
div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #43C2C8 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #43C2C8 !important;}
.submenu-item{ border-bottom: 2px solid #43C2C8 !important; border-top: 2px solid #43C2C8 !important }
.ace_scroller{overflow: auto!important;}
a.demo{font-family: "Open Sans",Arial,sans-serif; background:#43C2C8; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}
a.demo:hover{opacity:.8}
</style>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
</head>
<body onload="prettyPrint()">
<div class="wrapLoader">
   <div class="imgLoader">
      <img  src="/images/loading-cg.gif" alt="" width="70" height="70" />
   </div>
</div>
<div id="right_obs" class="display-none" onclick="close_obs_sidenav()"></div>
<header>
   <div class="container">			
      <h1 class="logo">
      <a href="index.htm" title="tutorialspoint">
      <img alt="tutorialspoint" src="/perl/images/logo.png">
      </a>
      </h1>			
      <ul class="tp-inline-block pull-right" id="tp-head-icons">
        <li>
           <div class="tp-second-nav tp-display-none tp-pointer" onclick="openNav()">
              <i class="fa fa-th-large fa-lg"></i>
           </div>
        </li>
     </ul>
     <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull" style="top: 24px!important"> <i class="icon icon-bars"></i> </button>
      <nav>
         <ul class="nav nav-pills nav-top">
            <li><a href="/about/about_careers.htm" style="background: #fffb09; font-weight: bold;"><i class="icon icon-suitcase"></i> Jobs</a></li>
            <li> <a target="_blank" href="/programming_examples/"><i class="fa fa-cubes"></i> &nbsp;Examples</a> </li>
            <li> <a href="https://www.tutorialspoint.com/whiteboard.htm"><img src="theme/css/icons/image-editor.png" alt="Whiteboard" title="Whiteboard"> &nbsp;Whiteboard</a> </li>
            <li> <a href="https://www.tutorialspoint.com/netmeeting.php"><i class="fa-camera"></i> &nbsp;Net Meeting</a> </li>
            <li> <a href="/online_dev_tools.htm"> <i class="dev-tools-menu" style="opacity:.5"></i> Tools </a> </li>
            <li> <a href="/articles/index.php"><i class="icon icon-file-text-o"></i> &nbsp;Articles</a> </li>            
            <li class="top-icons">
              <ul class="social-icons">
              <li class="facebook"><a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook">Facebook</a></li>
              <li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
              <li class="twitter"><a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter">Twitter</a></li>
              <li class="linkedin"><a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin">Linkedin</a></li>
              <li class="youtube"><a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube">YouTube</a></li>
              </ul>
           </li>
         </ul>
      </nav>
    </div>
     <div class="sidenav" id="mySidenav">
     <div class="navbar nav-main">
      <div class="container">
         <nav class="nav-main mega-menu">
            <ul class="nav nav-pills nav-main" id="mainMenu">
               <li class="dropdown no-sub-menu"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li>   
               <li class="dropdown no-sub-menu"><a class="dropdown" href="/questions/index.php"><i class="fa fa-send"></i> Q/A </a> </li>
               <li class="dropdown"><a class="dropdown" href="tutorialslibrary.htm"><span class="tut-lib"> Library </span></a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="videotutorials/index.htm"><i class="fa-toggle-right"></i> Videos </a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="tutor_connect/index.php"><i class="fa-user"> </i> Tutors</a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://store.tutorialspoint.com/"><i class="fa-usd"></i> Store </a> </li>
               <li class="dropdown no-sub-menu">
                  <div class="searchform-popup">
                     <input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
                     <div class="magnifying-glass"><i class="icon-search"></i> Search </div>
                 </div>
               </li>
            </ul>
         </nav>
        </div>
      </div>	
     </div>	
   </div>	
</header>
<div style="clear:both;"></div>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-2">
<aside class="sidebar">
<style>
.ts{
   text-align:center !important;
   vertical-align:middle !important;
}
</style>
<div class="mini-logo">
<img src="/perl/images/perl-mini-logo.jpg" alt="Perl Tutorial" />
</div>
<ul class="nav nav-list primary left-menu">
<li class="heading">Perl Basics</li>
<li><a href="/perl/index.htm">Perl - Home</a></li>
<li><a href="/perl/perl_introduction.htm">Perl - Introduction</a></li>
<li><a href="/perl/perl_environment.htm">Perl - Environment</a></li>
<li><a href="/perl/perl_syntax.htm">Perl - Syntax Overview</a></li>
<li><a href="/perl/perl_data_types.htm">Perl - Data Types</a></li>
<li><a href="/perl/perl_variables.htm">Perl - Variables</a></li>
<li><a href="/perl/perl_scalars.htm">Perl - Scalars</a></li>
<li><a href="/perl/perl_arrays.htm">Perl - Arrays</a></li>
<li><a href="/perl/perl_hashes.htm">Perl - Hashes</a></li>
<li><a href="/perl/perl_conditions.htm">Perl - IF...ELSE</a></li>
<li><a href="/perl/perl_loops.htm">Perl - Loops</a></li>
<li><a href="/perl/perl_operators.htm">Perl - Operators</a></li>
<li><a href="/perl/perl_date_time.htm">Perl - Date &amp; Time</a></li>
<li><a href="/perl/perl_subroutines.htm">Perl - Subroutines</a></li>
<li><a href="/perl/perl_references.htm">Perl - References</a></li>
<li><a href="/perl/perl_formats.htm">Perl - Formats</a></li>
<li><a href="/perl/perl_files.htm">Perl - File I/O</a></li>
<li><a href="/perl/perl_directories.htm">Perl - Directories</a></li>
<li><a href="/perl/perl_error_handling.htm">Perl - Error Handling</a></li>
<li><a href="/perl/perl_special_variables.htm">Perl - Special Variables</a></li>
<li><a href="/perl/perl_coding_standard.htm">Perl - Coding Standard</a></li>
<li><a href="/perl/perl_regular_expressions.htm">Perl - Regular Expressions</a></li>
<li><a href="/perl/perl_sending_email.htm">Perl - Sending Email</a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">Perl Advanced</li>
<li><a href="/perl/perl_socket_programming.htm">Perl - Socket Programming</a></li>
<li><a href="/perl/perl_object_oriented.htm">Perl - Object Oriented</a></li>
<li><a href="/perl/perl_database_access.htm">Perl - Database Access</a></li>
<li><a href="/perl/perl_cgi_programming.htm">Perl - CGI Programming</a></li>
<li><a href="/perl/perl_packages_modules.htm">Perl - Packages &amp; Modules</a></li>
<li><a href="/perl/perl_process_management.htm">Perl - Process Management</a></li>
<li><a href="/perl/perl_embedded_documentation.htm">Perl - Embedded Documentation</a></li>
<li><a href="/perl/perl_function_references.htm">Perl - Functions References</a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">Perl Useful Resources</li>
<li><a href="/perl/perl_questions_answers.htm">Perl - Questions and Answers</a></li>
<li><a href="/perl/perl_quick_guide.htm">Perl - Quick Guide</a></li>
<li><a href="/perl/perl_useful_resources.htm">Perl - Useful Resources</a></li>
<li><a href="/perl/perl_discussion.htm">Perl - Discussion</a></li>
</ul>
<ul class="nav nav-list primary push-bottom left-menu special">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>Perl Interview Questions</h1>
<hr />
<div style="padding-bottom:5px;padding-left:10px;text-align: center;">Advertisements</div>
<div style="text-align: center;">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr>
<div class="pre-btn">
<a href="/perl/perl_questions_answers.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/perl/perl_questions_answers.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr />
<p>Dear readers, these <b>Perl Programming Language Interview Questions</b> have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of <b>Perl Programming Language</b>. As per my experience good interviewers hardly plan to ask any particular question during your interview, normally questions start with some basic concept of the subject and later they continue based on further discussion and what you answer &minus;</p>
<section class="toggle">
<label>What is Perl?</label>
<div class="toggle-content">
<ul class="list">
<li><p>Perl is a stable, cross platform programming language.</p></li>
<li><p>Though Perl is not officially an acronym but few people used it as <b>Practical Extraction and Report Language</b>.</p></li>
<li><p>It is used for mission critical projects in the public and private sectors.</p></li>
<li><p>Perl is an <i>Open Source</i> software, licensed under its <i>Artistic License</i>, or the <i>GNU General Public License (GPL)</i>.</p></li>
<li><p>Perl was created by Larry Wall.</p></li>
<li><p>Perl 1.0 was released to usenet's alt.comp.sources in 1987</p></li>
<li><p>At the time of writing this tutorial, the latest version of perl is 5.16.2</p></li>
<li><p>Perl is listed in the <i>Oxford English Dictionary</i>.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label>What are the features of Perl programming?</label>
<div class="toggle-content">
<ul class="list">
<li><p>Perl takes the best features from other languages, such as C, awk, sed, sh, and BASIC, among others.</p></li>
<li><p>Perls database integration interface DBI supports third-party databases including Oracle, Sybase, Postgres, MySQL and others.</p></li>
<li><p>Perl works with HTML, XML, and other mark-up languages.</p></li>
<li><p>Perl supports Unicode.</p></li>
<li><p>Perl is Y2K compliant.</p></li>
<li><p>Perl supports both procedural and object-oriented programming.</p></li>
<li><p>Perl interfaces with external C/C++ libraries through XS or SWIG.</p></li>
<li><p>Perl is extensible. There are over 20,000 third party modules available from the Comprehensive Perl Archive Network (<a target="_blank" rel="nofollow" href="http://cpan.perl.org">CPAN</a>).</p></li>
<li><p>The Perl interpreter can be embedded into other systems.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label>What are the benefits of Perl programming in using it in web based applications?</label>
<div class="toggle-content">
<ul class="list">
<li><p>Perl used to be the most popular web programming language due to its text manipulation capabilities and rapid development cycle.</p></li>
<li><p>Perl is widely known as " <a target="_blank" href="http://www.google.com/search?q=the%20duct-tape%20of%20the%20Internet">the duct-tape of the Internet</a>".</p></li>
<li><p>Perl can handle encrypted Web data, including e-commerce transactions.</p></li>
<li><p>Perl can be embedded into web servers to speed up processing by as much as 2000%.</p></li>
<li><p>Perl's <a target="_blank" rel="nofollow" href="http://perl.apache.org">mod_perl</a> allows the Apache web server to embed a Perl interpreter.</p></li>
<li><p>Perl's <a target="_blank" rel="nofollow" href="http://dbi.perl.org">DBI</a> package makes web-database integration easy.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label>Is perl a case sensitive language?</label>
<div class="toggle-content">
<p>Yes! Perl is a case sensitive programming language.</p>
</div>
</section>
<section class="toggle">
<label>What is a perl identifier?</label>
<div class="toggle-content">
<p>A Perl identifier is a name used to identify a variable, function, class, module, or other object. A Perl variable name starts with either $, @ or % followed by zero or more letters, underscores, and digits (0 to 9).</p>
</div>
</section>
<section class="toggle">
<label>What are data types that perl supports?</label>
<div class="toggle-content">
<p>Perl has three basic data types &minus; scalars, arrays of scalars, and hashes of scalars, also known as associative arrays.</p>
</div>
</section>
<section class="toggle">
<label>What are scalar data types in perl?</label>
<div class="toggle-content">
<p>Scalars are simple variables. They are preceded by a dollar sign ($). A scalar is either a number, a string, or a reference. A reference is actually an address of a variable, which we will see in the upcoming chapters.</p>
</div>
</section>
<section class="toggle">
<label>What are Arrays in perl?</label>
<div class="toggle-content">
<p>Arrays are ordered lists of scalars that you access with a numeric index which starts with 0. They are preceded by an "at" sign (@).</p>
</div>
</section>
<section class="toggle">
<label>What are Hashes in perl?</label>
<div class="toggle-content">
<p>Hashes are unordered sets of key/value pairs that you access using the keys as subscripts. They are preceded by a percent sign (%).</p>
</div>
</section>
<section class="toggle">
<label>How will you declare a variable in perl?</label>
<div class="toggle-content">
<p>Perl variables do not have to be explicitly declared to reserve memory space. The declaration happens automatically when you assign a value to a variable. The equal sign (=) is used to assign values to variables.</p>
</div>
</section>
<section class="toggle">
<label>What is variable context in perl?</label>
<div class="toggle-content">
<p>Perl treats same variable differently based on Context, i.e. situation where a variable is being used.</p>
</div>
</section>
<section class="toggle">
<label>What is scalar context?</label>
<div class="toggle-content">
<p>Assignment to a scalar variable evaluates the right-hand side in a scalar context.</p>
</div>
</section>
<section class="toggle">
<label>What is a list context?</label>
<div class="toggle-content">
<p>Assignment to an array or a hash evaluates the right-hand side in a list context.</p>
</div>
</section>
<section class="toggle">
<label>What is boolean context?</label>
<div class="toggle-content">
<p>Boolean context is simply any place where an expression is being evaluated to see whether it's true or false.</p>
</div>
</section>
<section class="toggle">
<label>What is void context?</label>
<div class="toggle-content">
<p>This context not only doesn't care what the return value is, it doesn't even want a return value.</p>
</div>
</section>
<section class="toggle">
<label>What is interpolative context?</label>
<div class="toggle-content">
<p>This context only happens inside quotes, or things that work like quotes.</p>
</div>
</section>
<section class="toggle">
<label>What is the difference between single quoted string and double quoted string?</label>
<div class="toggle-content">
<p>Single quoted string prints the perl variable as a string whereas double quoted string evaluates the variable and used to get the variable's value.</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

$var = "This is string scalar!";
$quote = 'I m inside single quote - $var';
$double = "This is inside double quote - $var";

$escape = "This example of escape -\tHello, World!";

print "var = $var\n";
print "quote = $quote\n";
print "double = $double\n";
print "escape = $escape\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
var = This is string scalar!
quote = I m inside single quote - $var
double = This is inside double quote - This is string scalar!
escape = This example of escape - Hello, World!
</pre>
</div>
</section>
<section class="toggle">
<label>What is V-Strings?</label>
<div class="toggle-content">
<p>A literal of the form v1.20.300.4000 is parsed as a string composed of characters with the specified ordinals. This form is known as v-strings.</p>
<p>A v-string provides an alternative and more readable way to construct strings, rather than use the somewhat less readable interpolation form "\x{1}\x{14}\x{12c}\x{fa0}".</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of _FILE_ literal?</label>
<div class="toggle-content">
<p>It is used to get the current file name.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of _LINE_ literal?</label>
<div class="toggle-content">
<p>It is used to get the current line number.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of _PACKAGE_ literal?</label>
<div class="toggle-content">
<p>It is used to get the current package name.</p>
</div>
</section>
<section class="toggle">
<label>How will you access an element of a perl array?</label>
<div class="toggle-content">
<p> To refer to a single element of an array, you will use the dollar sign ($) with the variable name followed by the index of the element in square brackets.</p>
<p>Here is a simple example of using the array variables &minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

@ages = (25, 30, 40);             
@names = ("John Paul", "Lisa", "Kumar");

print "\$ages[0] = $ages[0]\n";
print "\$ages[1] = $ages[1]\n";
print "\$ages[2] = $ages[2]\n";
print "\$names[0] = $names[0]\n";
print "\$names[1] = $names[1]\n";
print "\$names[2] = $names[2]\n";
</pre>
<p>When exected, this will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
$ages[0] = 25
$ages[1] = 30
$ages[2] = 40
$names[0] = John Paul
$names[1] = Lisa
$names[2] = Kumar
</pre>
</div>
</section>
<section class="toggle">
<label>What is range operator?</label>
<div class="toggle-content">
<p>range operator (..) is used to create sequential arrays.</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

@var_10 = (1..10);
@var_20 = (10..20);
@var_abc = (a..z);

print "@var_10\n";   # Prints number from 1 to 10
print "@var_20\n";   # Prints number from 10 to 20
print "@var_abc\n";  # Prints number from a to z
</pre>
<p>Here double dot (..) is called range operator. This will produce the following result &minus; </p>
<pre class="prettyprint notranslate">
1 2 3 4 5 6 7 8 9 10
10 11 12 13 14 15 16 17 18 19 20
a b c d e f g h i j k l m n o p q r s t u v w x y z
</pre>
</div>
</section>
<section class="toggle">
<label>How will you get size of an array?</label>
<div class="toggle-content">
<p>The size of an array can be determined using the scalar context on the array - the returned value will be the number of elements in the array &minus;</p>
<pre class="prettyprint notranslate">
@array = (1,2,3);
print "Size: ",scalar @array,"\n";
</pre>
<p>The value returned will always be the physical size of the array, not the number of valid elements.</p>
</div>
</section>
<section class="toggle">
<label>How will you add an element to an end of an array?</label>
<div class="toggle-content">
<p>push @ARRAY, LIST - Pushes the values of the list onto the end of the array.</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

# create a simple array
@coins = ("Quarter","Dime","Nickel");
print "1. \@coins  = @coins\n";

# add one element at the end of the array
push(@coins, "Penny");
print "2. \@coins  = @coins\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
1. @coins = Quarter Dime Nickel
2. @coins = Quarter Dime Nickel Penny
</pre>
</div>
</section>
<section class="toggle">
<label>How will you add an element to the beginning of an array?</label>
<div class="toggle-content">
<p>unshift @ARRAY, LIST - Prepends list to the front of the array, and returns the number of elements in the new array.</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

# create a simple array
@coins = ("Quarter","Dime","Nickel");
print "1. \@coins  = @coins\n";

# add one element at the beginning of the array
unshift(@coins, "Dollar");
print "2. \@coins  = @coins\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
1. @coins = Quarter Dime Nickel
2. @coins = Dollar Quarter Dime Nickel
</pre>
</div>
</section>
<section class="toggle">
<label>How will you remove an element from end of an array?</label>
<div class="toggle-content">
<p>pop @ARRAY &minus; Pops off and returns the last value of the array.</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

# create a simple array
@coins = ("Quarter","Dime","Nickel");
print "1. \@coins  = @coins\n";

# remove one element from the last of the array.
pop(@coins);
print "2. \@coins  = @coins\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
1. @coins = Quarter Dime Nickel
2. @coins = Quarter Dime
</pre>
</div>
</section>
<section class="toggle">
<label>How will you remove an element from begining of an array?</label>
<div class="toggle-content">
<p>shift @ARRAY &minus; Shifts the first value of the array off and returns it, shortening the array by 1 and moving everything down.</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

# create a simple array
@coins = ("Quarter","Dime","Nickel");
print "1. \@coins  = @coins\n";

# remove one element from the beginning of the array.
shift(@coins);
print "2. \@coins  = @coins\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
1. @coins = Quarter Dime Nickel
2. @coins = Dime Nickel
</pre>
</div>
</section>
<section class="toggle">
<label>How will you get slice from an array?</label>
<div class="toggle-content">
<p>You can also extract a "slice" from an array &minus; that is, you can select more than one item from an array in order to produce another array.</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

@days = qw/Mon Tue Wed Thu Fri Sat Sun/;

@weekdays = @days[3,4,5];

print "@weekdays\n";
</pre>
<p>This will produce the following result -</p>
<pre class="prettyprint notranslate">
Thu Fri Sat
</pre>
</div>
</section>
<section class="toggle">
<label>How will you get replace elements of an array?</label>
<div class="toggle-content">
<p>splice() function will remove the elements of @ARRAY designated by OFFSET and LENGTH, and replaces them with LIST, if specified. Finally, it returns the elements removed from the array. </p>
<pre class="prettyprint notranslate">
splice @ARRAY, OFFSET [ , LENGTH [ , LIST ] ]
</pre>
<p>Following is the example &minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

@nums = (1..20);
print "Before - @nums\n";

splice(@nums, 5, 5, 21..25); 
print "After - @nums\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
Before &minus; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
After &minus; 1 2 3 4 5 21 22 23 24 25 11 12 13 14 15 16 17 18 19 20
</pre>
</div>
</section>
<section class="toggle">
<label>How will you convert a string to an array?</label>
<div class="toggle-content">
<p>split() splits a string into an array of strings, and returns it. If LIMIT is specified, splits into at most that number of fields. If PATTERN is omitted, splits on whitespace. </p>
<pre class="prettyprint notranslate">
split [ PATTERN [ , EXPR [ , LIMIT ] ] ]
</pre>
<p>Following is the example &minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

# define Strings
$var_string = "Rain-Drops-On-Roses-And-Whiskers-On-Kittens";
$var_names = "Larry,David,Roger,Ken,Michael,Tom";

# transform above strings into arrays.
@string = split('-', $var_string);
@names  = split(',', $var_names);

print "$string[3]\n";  # This will print Roses
print "$names[4]\n";   # This will print Michael
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
Roses
Michael
</pre>
</div>
</section>
<section class="toggle">
<label>How will you convert an array to string?</label>
<div class="toggle-content">
<p>join() function joins the separate strings of LIST into a single string with fields separated by the value of EXPR, and returns the string.</p>
<pre class="prettyprint notranslate">
join EXPR, LIST
</pre>
<p>Following is the example &minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

# define Strings
$var_string = "Rain-Drops-On-Roses-And-Whiskers-On-Kittens";
$var_names = "Larry,David,Roger,Ken,Michael,Tom";

# transform above strings into arrays.
@string = split('-', $var_string);
@names  = split(',', $var_names);

$string1 = join( '-', @string );
$string2 = join( ',', @names );

print "$string1\n";
print "$string2\n";
print "$string[3]\n";  # This will print Roses
print "$names[4]\n";   # This will print Michael
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
Rain-Drops-On-Roses-And-Whiskers-On-Kittens
Larry,David,Roger,Ken,Michael,Tom
</pre>
</div>
</section>
<section class="toggle">
<label>How will you sort an array?</label>
<div class="toggle-content">
<p>The sort() function sorts each element of an array according to the ASCII Numeric standards. This function has the following syntax &minus;</p>
<pre class="prettyprint notranslate">
sort [ SUBROUTINE ] LIST
</pre>
<p>This function sorts the LIST and returns the sorted array value. If SUBROUTINE is specified then specified logic inside the SUBTROUTINE is applied while sorting the elements.</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

# define an array
@foods = qw(pizza steak chicken burgers);
print "Before: @foods\n";

# sort this array
@foods = sort(@foods);
print "After: @foods\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
Before: pizza steak chicken burgers
After: burgers chicken pizza steak
</pre>
</div>
</section>
<section class="toggle">
<label>What is the purpose of $[ variable?</label>
<div class="toggle-content">
<p>This special variable is a scalar containing the first index of all arrays. Because Perl arrays have zero-based indexing, $[ will almost always be 0. But if you set $[ to 1 then all your arrays will use on-based indexing. It is recommended not to use any other indexing other than zero. However, let's take one example to show the usage of $[ variable &minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

# define an array
@foods = qw(pizza steak chicken burgers);
print "Foods: @foods\n";

# Let's reset first index of all the arrays.
$[ = 1;

print "Food at \@foods[1]: $foods[1]\n";
print "Food at \@foods[2]: $foods[2]\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
Foods: pizza steak chicken burgers
Food at @foods[1]: pizza
Food at @foods[2]: steak
</pre>
</div>
</section>
<section class="toggle">
<label>How will you merge two arrays?</label>
<div class="toggle-content">
<p>Because an array is just a comma-separated sequence of values, you can combine them together as shown below.</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

@numbers = (1,3,(4,5,6));

print "numbers = @numbers\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
numbers = 1 3 4 5 6
</pre>
</div>
</section>
<section class="toggle">
<label>How will you create Hashes in perl?</label>
<div class="toggle-content">
<p>Hashes are created in one of the two following ways. In the first method, you assign a value to a named key on a one-by-one basis &minus;</p>
<pre class="prettyprint notranslate">
$data{'John Paul'} = 45;
$data{'Lisa'} = 30;
$data{'Kumar'} = 40;
</pre>
<p>In the second case, you use a list, which is converted by taking individual pairs from the list: the first element of the pair is used as the key, and the second, as the value. For example &minus;</p>
<pre class="prettyprint notranslate">
%data = ('John Paul', 45, 'Lisa', 30, 'Kumar', 40);
</pre>
</div>
</section>
<section class="toggle">
<label>How will you get element from Hashes in perl?</label>
<div class="toggle-content">
<p>When accessing individual elements from a hash, you must prefix the variable with a dollar sign ($) and then append the element key within curly brackets after the name of the variable. For example &minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

%data = ('John Paul' =&gt; 45, 'Lisa' =&gt; 30, 'Kumar' =&gt; 40);

print "$data{'John Paul'}\n";
print "$data{'Lisa'}\n";
print "$data{'Kumar'}\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
45
30
40
</pre>
</div>
</section>
<section class="toggle">
<label>How will you get all keys from Hashes in perl?</label>
<div class="toggle-content">
<p>You can get a list of all of the keys from a hash by using keys function, which has the following syntax &minus;</p>
<pre class="prettyprint notranslate">
keys %HASH
</pre>
<p>This function returns an array of all the keys of the named hash. Following is the example &minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl 

%data = ('John Paul' =&gt; 45, 'Lisa' =&gt; 30, 'Kumar' =&gt; 40);

@names = keys %data;

print "$names[0]\n";
print "$names[1]\n";
print "$names[2]\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
Lisa
John Paul
Kumar
</pre>
</div>
</section>
<section class="toggle">
<label>How will you get all values from Hashes in perl?</label>
<div class="toggle-content">
<p>You can get a list of all of the values from a hash by using values function, which has the following syntax &minus;</p>
<pre class="prettyprint notranslate">
values %HASH
</pre>
<p>This function returns an array of all the values of the named hash. Following is the example &minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl 

%data = ('John Paul' =&gt; 45, 'Lisa' =&gt; 30, 'Kumar' =&gt; 40);

@ages = values %data;

print "$ages[0]\n";
print "$ages[1]\n";
print "$ages[2]\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
30
45
40
</pre>
</div>
</section>
<section class="toggle">
<label>How will you check if key exists in a hash or not?</label>
<div class="toggle-content">
<p>Using the exists function, which returns true if the named key exists, irrespective of what its value might be &minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

%data = ('John Paul' => 45, 'Lisa' => 30, 'Kumar' => 40);

if( exists($data{'Lisa'} ) ){
   print "Lisa is $data{'Lisa'} years old\n";
}
else{
   print "I don't know age of Lisa\n";
}
</pre>
<p>Here we have introduced the IF...ELSE statement, which we will study in a separate chapter. For now you just assume that if( condition ) part will be executed only when the given condition is true otherwise else part will be executed. So when we execute the above program, it produces the following result because here the given condition exists($data{'Lisa'} returns true &minus;</p>
<pre class="prettyprint notranslate">
Lisa is 30 years old
</pre>
</div>
</section>
<section class="toggle">
<label>How will you get the size of hash?</label>
<div class="toggle-content">
<p>You can get the size - that is, the number of elements from a hash by using the scalar context on either keys or values. Simply saying first you have to get an array of either the keys or values and then you can get the size of array as follows &minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

%data = ('John Paul' => 45, 'Lisa' => 30, 'Kumar' => 40);

@keys = keys %data;
$size = @keys;
print "1 - Hash size:  is $size\n";

@values = values %data;
$size = @values;
print "2 - Hash size:  is $size\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
1 - Hash size: is 3
2 - Hash size: is 3
</pre>
</div>
</section>
<section class="toggle">
<label>How will you add an element to a hash?</label>
<div class="toggle-content">
<p>Adding a new key/value pair can be done with one line of code using simple assignment operator.</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

%data = ('John Paul' =&gt; 45, 'Lisa' =&gt; 30, 'Kumar' =&gt; 40);
@keys = keys %data;
$size = @keys;
print "1 - Hash size:  is $size\n";

# adding an element to the hash;
$data{'Ali'} = 55;
@keys = keys %data;
$size = @keys;
print "2 - Hash size:  is $size\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
1 - Hash size: is 3
2 - Hash size: is 4
</pre>
</div>
</section>
<section class="toggle">
<label>How will you remove an element from a hash?</label>
<div class="toggle-content">
<p>To remove an element from the hash you need to use delete function as shown below in the example&minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl

%data = ('John Paul' =&gt; 45, 'Lisa' =&gt; 30, 'Kumar' =&gt; 40);
@keys = keys %data;
$size = @keys;
print "1 - Hash size:  is $size\n";

# delete the same element from the hash;
delete $data{'John Paul'};
@keys = keys %data;
$size = @keys;
print "2 - Hash size:  is $size\n";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="prettyprint notranslate">
1 - Hash size: is 3
2 - Hash size: is 2
</pre>
</div>
</section>
<section class="toggle">
<label>What is the purpose of next statement?</label>
<div class="toggle-content">
<p>It causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.
last statement.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of last statement?</label>
<div class="toggle-content">
<p>It terminates the loop statement and transfers execution to the statement immediately following the loop.
continue statement.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of continue statement?</label>
<div class="toggle-content">
<p>A continue BLOCK, it is always executed just before the conditional is about to be evaluated again.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of redo statement?</label>
<div class="toggle-content">
<p>The redo command restarts the loop block without evaluating the conditional again. The continue block, if any, is not executed.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of goto Label statement?</label>
<div class="toggle-content">
<p>The goto LABEL form jumps to the statement labeled with LABEL and resumes execution from there.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of goto Expr statement?</label>
<div class="toggle-content">
<p>The goto EXPR form is just a generalization of goto LABEL. It expects the expression to return a label name and then jumps to that labeled statement.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of goto &amp;NAME statement?</label>
<div class="toggle-content">
<p>It substitutes a call to the named subroutine for the currently running subroutine.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of ** operator?</label>
<div class="toggle-content">
<p>Exponent &minus; Performs exponential (power) calculation on operators. Assume variable $a holds 10 and variable $b holds 20 then $a**$b will give 10 to the power 20.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of &lt;=&gt; operator?</label>
<div class="toggle-content">
<p>It checks if the value of two operands are equal or not, and returns -1, 0, or 1 depending on whether the left argument is numerically less than, equal to, or greater than the right argument. Assume variable $a holds 10 and variable $b holds 20 then ($a &lt;=&gt; $b) returns -1.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of lt operator?</label>
<div class="toggle-content">
<p>It returns true if the left argument is stringwise less than the right argument. Assume variable $a holds "abc" and variable $b holds "xyz" then ($a lt $b) is true.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of gt operator?</label>
<div class="toggle-content">
<p>It returns true if the left argument is stringwise greater than the right argument. Assume variable $a holds "abc" and variable $b holds "xyz" then ($a gt $b) is false.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of le operator?</label>
<div class="toggle-content">
<p>It returns true if the left argument is stringwise less than or equal to the right argument. Assume variable $a holds "abc" and variable $b holds "xyz" then ($a le $b) is true.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of ge operator?</label>
<div class="toggle-content">
<p>It returns true if the left argument is stringwise greater than or equal to the right argument. Assume variable $a holds "abc" and variable $b holds "xyz" then ($a ge $b) is false.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of eq operator?</label>
<div class="toggle-content">
<p>It returns true if the left argument is stringwise equal to the right argument. Assume variable $a holds "abc" and variable $b holds "xyz" then ($a eq $b) is false.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of ne operator?</label>
<div class="toggle-content">
<p>It returns true if the left argument is stringwise not equal to the right argument. Assume variable $a holds "abc" and variable $b holds "xyz" then ($a ne $b) is true.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of cmp operator?</label>
<div class="toggle-content">
<p>It returns -1, 0, or 1 depending on whether the left argument is stringwise less than, equal to, or greater than the right argument. Assume variable $a holds "abc" and variable $b holds "xyz" then ($a cmp $b) is -1.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of **= operator?</label>
<div class="toggle-content">
<p>Exponent AND assignment operator, Performs exponential (power) calculation on operators and assign value to the left operand. $c **= $a is equivalent to $c = $c ** $a</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of q{ } operator?</label>
<div class="toggle-content">
<p>It encloses a string with-in single quotes. q{abcd} gives 'abcd'</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of qq{ } operator?</label>
<div class="toggle-content">
<p>It encloses a string with-in double quotes. qq{abcd} gives "abcd"</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of qx{ } operator?</label>
<div class="toggle-content">
<p>It encloses a string with-in invert quotes. qx{abcd} gives `abcd`</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of . operator?</label>
<div class="toggle-content">
<p>Binary operator dot (.) concatenates two strings. If $a="abc", $b="def" then $a.$b will give "abcdef"</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of x operator?</label>
<div class="toggle-content">
<p>The repetition operator x returns a string consisting of the left operand repeated the number of times specified by the right operand. ('-' x 3) will give ---.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of .. operator?</label>
<div class="toggle-content">
<p>The range operator .. returns a list of values counting (up by ones) from the left value to the right value.	(2..5) will give (2, 3, 4, 5).</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of ++ operator?</label>
<div class="toggle-content">
<p>Auto Increment operator increases integer value by one.	$a++ will give 11.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of &minus;&minus; operator?</label>
<div class="toggle-content">
<p>Auto Decrement operator decreases integer value by one.	$a&minus;&minus; will give 9</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of &minus;&gt; operator?</label>
<div class="toggle-content">
<p>The arrow operator is mostly used in dereferencing a method or variable from an object or a class name. $obj&minus;&gt;$a is an example to access variable $a from object $obj.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of localtime() function?</label>
<div class="toggle-content">
<p>localtime() function, which returns values for the current date and time if given no arguments.</p>
<pre class="prettyprint notranslate">
#!/usr/local/bin/perl
 
@months = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
@days = qw(Sun Mon Tue Wed Thu Fri Sat Sun);

($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
print "$mday $months[$mon] $days[$wday]\n";
</pre>
<p>When the above code is executed, it produces the following result &minus;</p>
<pre class="prettyprint notranslate">
16 Feb Sat
</pre>
</div>
</section>
<section class="toggle">
<label>What is the purpose of gmtime() function?</label>
<div class="toggle-content">
<p> The function gmtime() works just like localtime() function but the returned values are localized for the standard Greenwich time zone. When called in list context, $isdst, the last value returned by gmtime, is always 0 . There is no Daylight Saving Time in GMT.</p>
</div>
</section>
<section class="toggle">
<label>What is the difference between localtime() and gmtime() functions?</label>
<div class="toggle-content">
<p> localtime() will return the current local time on the machine that runs the script and gmtime() will return the universal Greenwich Mean Time, or GMT (or UTC).</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of time() function?</label>
<div class="toggle-content">
<p> You can use the time() function to get epoch time, i.e. the numbers of seconds that have elapsed since a given date, in Unix is January 1, 1970.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of strftime() function?</label>
<div class="toggle-content">
<p> You can use the POSIX function strftime() to format date and time.</p>
</div>
</section>
<section class="toggle">
<label>How will you define a subroutine in perl?</label>
<div class="toggle-content">
<p> The general form of a subroutine definition in Perl programming language is as follows &minus;</p>
<pre class="prettyprint notranslate">
sub subroutine_name{
   body of the subroutine
}
</pre>
</div>
</section>
<section class="toggle">
<label>How will you call a subroutine in perl?</label>
<div class="toggle-content">
<p> The typical way of calling that Perl subroutine is as follows &minus;</p>
<pre class="prettyprint notranslate">
subroutine_name( list of arguments );
</pre>
</div>
</section>
<section class="toggle">
<label>How will you access the parameters passed to a perl subroutine?</label>
<div class="toggle-content">
<p> they can be acessed inside the function using the special array @_. Thus the first argument to the function is in $_[0], the second is in $_[1], and so on.</p>
</div>
</section>
<section class="toggle">
<label>How will you get the count of parameters passed to a perl subroutine?</label>
<div class="toggle-content">
<p> using scalar(@_), we can get the total number of arguments passed.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of my operator?</label>
<div class="toggle-content">
<p> The my operator confines a variable to a particular region of code in which it can be used and accessed. Outside that region, this variable cannot be used or accessed. </p>
</div>
</section>
<section class="toggle">
<label>What is the default scope of perl variables?</label>
<div class="toggle-content">
<p> By default, all variables in Perl are global variables, which means they can be accessed from anywhere in the program.</p>
</div>
</section>
<section class="toggle">
<label>What are lexical variables in perl?</label>
<div class="toggle-content">
<p> Lexical variables are private variables created using my operator.</p>
</div>
</section>
<section class="toggle">
<label>What is purpose of local operator in perl?</label>
<div class="toggle-content">
<p> The local is used when the current value of a variable must be visible to called subroutines. </p>
</div>
</section>
<section class="toggle">
<label>What is dynamic scoping?</label>
<div class="toggle-content">
<p> A local just gives temporary values to global (meaning package) variables. This is known as dynamic scoping.</p>
</div>
</section>
<section class="toggle">
<label>What is lexical scoping?</label>
<div class="toggle-content">
<p> Lexical scoping is done with my operator. A lexical scope is usually a block of code with a set of braces around it, such as those defining the body of the subroutine or those marking the code blocks of if, while, for, foreach, and eval statements. The my operator confines a variable to a particular region of code in which it can be used and accessed. Outside that region, this variable cannot be used or accessed. </p>
</div>
</section>
<section class="toggle">
<label>What are state variables in perl?</label>
<div class="toggle-content">
<p> There are another type of lexical variables, which are similar to private variables but they maintain their state and they do not get reinitialized upon multiple calls of the subroutines. These variables are defined using the state operator and available starting from Perl 5.9.4.</p>
</div>
</section>
<section class="toggle">
<label>What is Subroutine Call Context?</label>
<div class="toggle-content">
<p> The context of a subroutine or statement is defined as the type of return value that is expected. This allows you to use a single function that returns different values based on what the user is expecting to receive. For example, the following localtime() returns a string when it is called in scalar context, but it returns a list when it is called in list context.</p>
<pre class="prettyprint notranslate">
my $datestring = localtime( time );
</pre>
<p>In this example, the value of $timestr is now a string made up of the current date and time, for example, Thu Nov 30 15:21:33 2000. Conversely &minus;</p>
<pre class="prettyprint notranslate">
($sec,$min,$hour,$mday,$mon, $year,$wday,$yday,$isdst) = localtime(time);
</pre>
<p>Now the individual variables contain the corresponding values returned by localtime() subroutine.</p>
</div>
</section>
<section class="toggle">
<label>What is a Perl references?</label>
<div class="toggle-content">
<p> A Perl reference is a scalar data type that holds the location of another value which could be scalar, arrays, or hashes. Because of its scalar nature, a reference can be used anywhere, a scalar can be used.</p>
</div>
</section>
<section class="toggle">
<label>How will you create a reference for a variable?</label>
<div class="toggle-content">
<p> You can create a reference for any variable by prefixing it with a backslash as follows &minus;</p>
<pre class="prettyprint notranslate">
$scalarref = \$foo;
</pre>
</div>
</section>
<section class="toggle">
<label>How will you create a reference for a array?</label>
<div class="toggle-content">
<p> You can create a reference for any array by prefixing it with a backslash as follows &minus;</p>
<pre class="prettyprint notranslate">
$arrayref  = \@ARGV;
</pre>
</div>
</section>
<section class="toggle">
<label>How will you create a reference for a hash?</label>
<div class="toggle-content">
<p> You can create a reference for any hash by prefixing it with a backslash as follows &minus;</p>
<pre class="prettyprint notranslate">
$hashref   = \%ENV;
</pre>
</div>
</section>
<section class="toggle">
<label>How will you create a reference for a subrouting?</label>
<div class="toggle-content">
<p> You can create a reference for any subrouting by prefixing it with a backslash as follows &minus;</p>
<pre class="prettyprint notranslate">
$cref = \&PrintHash;
</pre>
</div>
</section>
<section class="toggle">
<label>What is dereferencing?</label>
<div class="toggle-content">
<p> Dereferencing returns the value from a reference point to the location. </p>
</div>
</section>
<section class="toggle">
<label>How will you dereference a reference?</label>
<div class="toggle-content">
<p> To dereference a reference simply use $, @ or % as prefix of the reference variable depending on whether the reference is pointing to a scalar, array, or hash.</p>
</div>
</section>
<section class="toggle">
<label>What is circular reference?</label>
<div class="toggle-content">
<p> A circular reference occurs when two references contain a reference to each other. You have to be careful while creating references otherwise a circular reference can lead to memory leaks. Following is an example &minus;</p>
<pre class="prettyprint notranslate">
#!/usr/bin/perl
my $foo = 100;
$foo = \$foo;
 
print "Value of foo is : ", $$foo, "\n";
</pre>
<p>When above program is executed, it produces the following result &minus;</p>
<pre class="prettyprint notranslate">
Value of foo is : REF(0x9aae38)
</pre>
</div>
</section>
<section class="toggle">
<label>How will you open a file in read-only mode?</label>
<div class="toggle-content">
<p> Following is the syntax to open file.txt in read-only mode. Here less than &lt; sign indicates that file has to be opend in read-only mode.</p>
<pre class="prettyprint notranslate">
open(DATA, "&lt;file.txt");
</pre>
<p>Here DATA is the file handle which will be used to read the file. </p>
</div>
</section>
<section class="toggle">
<label>How will you open a file in writing mode?</label>
<div class="toggle-content">
<p> Following is the syntax to open file.txt in writing mode. Here less than &gt; sign indicates that file has to be opend in the writing mode.</p>
<pre class="prettyprint notranslate">
open(DATA, "&gt;file.txt") or die "Couldn't open file file.txt, $!";
</pre>
</div>
</section>
<section class="toggle">
<label>How will you open a file in writing mode without truncating it?</label>
<div class="toggle-content">
<p> Following is the syntax to open file.txt in writing mode without truncating it. Here less than +&lt; sign indicates that file has to be opend in the writing mode  without truncating it.</p>
<pre class="prettyprint notranslate">
open(DATA, "+&lt;file.txt") or die "Couldn't open file file.txt, $!";
</pre>
</div>
</section>
<section class="toggle">
<label>What is the purpose of close() function?</label>
<div class="toggle-content">
<p> To close a filehandle, and therefore disassociate the filehandle from the corresponding file, you use the close function. This flushes the filehandle's buffers and closes the system's file descriptor.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of getc() function?</label>
<div class="toggle-content">
<p> The getc function returns a single character from the specified FILEHANDLE, or STDIN if none is specified.</p>
</div>
</section>
<section class="toggle">
<label>What is the purpose of read() function?</label>
<div class="toggle-content">
<p> The read function reads a block of information from the buffered filehandle: This function is used to read binary data from the file.</p>
</div>
</section>
<h2>What is Next ?</h2>
<p>Further you can go through your past assignments you have done with the subject and make sure you are able to speak confidently on them. If you are fresher then interviewer does not expect you will answer very complex questions, rather you have to make your basics concepts very strong.</p>
<p>Second it really doesn't matter much if you could not answer few questions but it matters that whatever you answered, you must have answered with confidence. So just feel confident during your interview. We at tutorialspoint wish you best luck to have a good interviewer and all the very best for your future endeavor. Cheers :-)</p>
<hr />
<div class="pre-btn">
<a href="/perl/perl_questions_answers.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div><div class="print-btn">
<a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>
</div>
<div class="nxt-btn">
<a href="/perl/perl_questions_answers.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<hr />
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div class="bottomadtag">Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
<div class="row">
<div class="col-md-3" id="rightbar">
<div class="simple-ad">
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/perl/perl_interview_questions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/facebookIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/perl/perl_interview_questions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/twitterIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/perl/perl_interview_questions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/linkedinIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/perl/perl_interview_questions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/googlePlusIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/perl/perl_interview_questions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/StumbleUponIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/perl/perl_interview_questions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;">
<img src="/images/reddit.jpg" alt="img" />
</a>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="footer-copyright">
<div class="container">
<div class="row">
<div class="col-md-1">
<a href="index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="/scripts/img/logo-footer.png"> </a>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <nav id="sub-menu">
      <ul>
         <li><a href="/about/faq.htm">FAQ's</a></li>
         <li><a href="/about/about_privacy.htm#cookies">Cookies Policy</a></li>
         <li><a href="/about/contact_us.htm">Contact</a></li>
      </ul>
   </nav>
</div>
<div class="col-md-3 col-sm-12 col-xs-12">
<p>&copy; Copyright 2018. All Rights Reserved.</p>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <div class="news-group">
      <input type="text" class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}">
      <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span>
      <div id="newsresponse"></div>
   </div>
</div>
</div>
</div>
</div>
</div>
<!-- Libs -->
<script src="/theme/js/custom-min.js?v=7"></script>
<script src="https://www.google-analytics.com/urchin.js">
</script>
<script>
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script>
</div>
</body>
</html>
