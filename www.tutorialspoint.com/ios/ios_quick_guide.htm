<!DOCTYPE html>
<!--[if IE 8]><html class="ie ie8"> <![endif]-->
<!--[if IE 9]><html class="ie ie9"> <![endif]-->
<!--[if gt IE 9]><!-->	<html> <!--<![endif]-->
<head>
<!-- Basic -->
<meta charset="utf-8">
<title>iOS Quick Guide</title>
<meta name="Description" content="iOS Quick Guide - Learn iPhone and iPad application development on iOS in simple and easy steps starting from basic to advanced concepts with examples including Getting Started, Environment Setup, Objective-C, First iPhone Application, Actions and Outlets, Delegates, UI Elements, Accelerometer, Universal Applications, Camera Management, Location Handling, SQLite Database, Sending Email, Audio and Video, File Handling, Accessing Maps, In-App Purchase, iAd Integration, GameKit, Storyboards, Auto-Layouts, Twitter and Facebook, Memory Management, Application Debugging." />
<meta name="Keywords" content="iOS, Tutorials, Learning, Getting Started, Environment Setup, Objective-C, First iPhone Application, Actions and Outlets, Delegates, UI Elements, Accelerometer, Universal Applications, Camera Management, Location Handling, SQLite Database, Sending Email, Audio and Video, File Handling, Accessing Maps, In-App Purchase, iAd Integration, GameKit, Storyboards, Auto-Layouts, Twitter and Facebook, Memory Management, Application Debugging." />
<base href="https://www.tutorialspoint.com/" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="website" />
<meta property="fb:app_id" content="471319149685276" />
<meta property="og:site_name" content="www.tutorialspoint.com" />
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="author" content="tutorialspoint.com">
<script type="text/javascript" src="https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2"></script>
<link rel="stylesheet" href="https://www.tutorialspoint.com/theme/css/style-min.css?v=3">
<script>
function openNav() {	
  document.getElementById("mySidenav").style.width = "250px";
  document.getElementById("right_obs").style.display = "block";
}
function closeNav() {
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
function close_obs_sidenav(){
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
</script>
<!-- Head Libs -->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]-->
<style>
select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }
.btnsbmt{ background: #828282 !important;}
ul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}
div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #828282 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #828282 !important;}
.submenu-item{ border-bottom: 2px solid #828282 !important; border-top: 2px solid #828282 !important }
.ace_scroller{overflow: auto!important;}
a.demo{font-family: "Open Sans",Arial,sans-serif; background:#828282; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}
a.demo:hover{opacity:.8}
</style>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
</head>
<body onload="prettyPrint()">
<div class="wrapLoader">
   <div class="imgLoader">
      <img  src="/images/loading-cg.gif" alt="" width="70" height="70" />
   </div>
</div>
<div id="right_obs" class="display-none" onclick="close_obs_sidenav()"></div>
<header>
   <div class="container">			
      <h1 class="logo">
      <a href="index.htm" title="tutorialspoint">
      <img alt="tutorialspoint" src="/ios/images/logo.png">
      </a>
      </h1>			
      <ul class="tp-inline-block pull-right" id="tp-head-icons">
        <li>
           <div class="tp-second-nav tp-display-none tp-pointer" onclick="openNav()">
              <i class="fa fa-th-large fa-lg"></i>
           </div>
        </li>
     </ul>
     <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull" style="top: 24px!important"> <i class="icon icon-bars"></i> </button>
      <nav>
         <ul class="nav nav-pills nav-top">
            <li><a href="/about/about_careers.htm" style="background: #fffb09; font-weight: bold;"><i class="icon icon-suitcase"></i> Jobs</a></li>
            <li> <a target="_blank" href="/programming_examples/"><i class="fa fa-cubes"></i> &nbsp;Examples</a> </li>
            <li> <a href="https://www.tutorialspoint.com/whiteboard.htm"><img src="theme/css/icons/image-editor.png" alt="Whiteboard" title="Whiteboard"> &nbsp;Whiteboard</a> </li>
            <li> <a href="https://www.tutorialspoint.com/netmeeting.php"><i class="fa-camera"></i> &nbsp;Net Meeting</a> </li>
            <li> <a href="/online_dev_tools.htm"> <i class="dev-tools-menu" style="opacity:.5"></i> Tools </a> </li>
            <li> <a href="/articles/index.php"><i class="icon icon-file-text-o"></i> &nbsp;Articles</a> </li>            
            <li class="top-icons">
              <ul class="social-icons">
              <li class="facebook"><a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook">Facebook</a></li>
              <li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
              <li class="twitter"><a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter">Twitter</a></li>
              <li class="linkedin"><a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin">Linkedin</a></li>
              <li class="youtube"><a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube">YouTube</a></li>
              </ul>
           </li>
         </ul>
      </nav>
    </div>
     <div class="sidenav" id="mySidenav">
     <div class="navbar nav-main">
      <div class="container">
         <nav class="nav-main mega-menu">
            <ul class="nav nav-pills nav-main" id="mainMenu">
               <li class="dropdown no-sub-menu"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li>   
               <li class="dropdown no-sub-menu"><a class="dropdown" href="/questions/index.php"><i class="fa fa-send"></i> Q/A </a> </li>
               <li class="dropdown"><a class="dropdown" href="tutorialslibrary.htm"><span class="tut-lib"> Library </span></a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="videotutorials/index.htm"><i class="fa-toggle-right"></i> Videos </a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="tutor_connect/index.php"><i class="fa-user"> </i> Tutors</a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://store.tutorialspoint.com/"><i class="fa-usd"></i> Store </a> </li>
               <li class="dropdown no-sub-menu">
                  <div class="searchform-popup">
                     <input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
                     <div class="magnifying-glass"><i class="icon-search"></i> Search </div>
                 </div>
               </li>
            </ul>
         </nav>
        </div>
      </div>	
     </div>	
   </div>	
</header>
<div style="clear:both;"></div>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-2">
<aside class="sidebar">
<style>
.ts {
  vertical-align:middle !important;
  text-align:center !important;   
}
</style>
<div class="mini-logo">
<img src="/ios/images/ios-mini-logo.jpg" alt="iOS Tutorial" />
</div>
<ul class="nav nav-list primary left-menu">
<li class="heading">iOS Tutorial</li>
<li><a href="/ios/index.htm">iOS - Home</a></li>
<li><a href="/ios/ios_getting_started.htm">iOS - Getting Started</a></li>
<li><a href="/ios/ios_environment_setup.htm">iOS - Environment Setup</a></li>
<li><a href="/ios/ios_objective_c.htm">iOS - Objective-C Basics</a></li>
<li><a href="/ios/ios_first_iphone_application.htm">iOS - First iPhone Application</a></li>
<li><a href="/ios/ios_actions_and_outlets.htm">iOS - Actions and Outlets</a></li>
<li><a href="/ios/ios_delegates.htm">iOS - Delegates</a></li>
<li><a href="/ios/ios_ui_elements.htm">iOS - UI Elements</a></li>
<li><a href="/ios/ios_accelerometer.htm">iOS - Accelerometer</a></li>
<li><a href="/ios/ios_universal_applications.htm">iOS - Universal Applications</a></li>
<li><a href="/ios/ios_camera_management.htm">iOS - Camera Management</a></li>
<li><a href="/ios/ios_location_handling.htm">iOS - Location Handling</a></li>
<li><a href="/ios/ios_sqlite_database.htm">iOS - SQLite Database</a></li>
<li><a href="/ios/ios_sending_email.htm">iOS - Sending Email</a></li>
<li><a href="/ios/ios_audio_video.htm">iOS - Audio &amp; Video</a></li>
<li><a href="/ios/ios_file_handling.htm">iOS - File Handling</a></li>
<li><a href="/ios/ios_accessing_maps.htm">iOS - Accessing Maps</a></li>
<li><a href="/ios/ios_in_app_purchase.htm">iOS - In-App Purchase</a></li>
<li><a href="/ios/ios_iad_integration.htm">iOS - iAd Integration</a></li>
<li><a href="/ios/ios_gamekit.htm">iOS - GameKit</a></li>
<li><a href="/ios/ios_storyboards.htm">iOS - Storyboards</a></li>
<li><a href="/ios/ios_auto_layouts.htm">iOS - Auto Layouts</a></li>
<li><a href="/ios/ios_twitter_facebook.htm">iOS - Twitter &amp; Facebook</a></li>
<li><a href="/ios/ios_memory_management.htm">iOS - Memory Management</a></li>
<li><a href="/ios/ios_application_debugging.htm">iOS - Application Debugging</a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">iOS Useful Resources</li>
<li><a href="/ios/ios_quick_guide.htm">iOS - Quick Guide</a></li>
<li><a href="/ios/ios_useful_resources.htm">iOS - Useful Resources</a></li>
<li><a href="/ios/ios_discussion.htm">iOS - Discussion</a></li>
</ul>
<ul class="nav nav-list primary push-bottom left-menu special">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>iOS - Quick Guide</h1>
<hr />
<div style="padding-bottom:5px;padding-left:10px;text-align: center;">Advertisements</div>
<div style="text-align: center;">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="/ios/ios_application_debugging.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/ios/ios_useful_resources.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr />
<h1>iOS - Getting Started</h1>
<h2>General Overview</h2>
<p>iOS, which was previously called iPhone OS, is a mobile operating system developed by Apple Inc. Its first release was in 2007, which included iPhone and iPod Touch. iPad (1st Generation) was released in April 2010 and iPad Mini was released in November 2012.</p>
<p>The iOS devices get evolved quite frequently and from experience, we find that at least one version of iPhone and iPad is launched every year. Now, we have iphone5 launched which has its predecessors starting from iPhone, iPhone 3gs, iPhone 4, iPhone 4s. Similarly, iPad has evolved from iPad (1<sup>st</sup> Generation) to iPad (4<sup>th</sup> Generation) and an additional iPad Mini version.</p>
<p>The iOS SDK has evolved from 1.0 to 6.0. iOS 6.0, the latest SDK is the only officially supported version in Xcode 4.5 and higher. We have a rich Apple documentation and we can find which methods and libraries can be used based on our deployment target. In the current version of Xcode, we’ll be able to choose between deployment targets of iOS 4.3, 5.0 and 6.0.</p>
<p>The power of iOS can be felt with some of the following features provided as a part of the device.</p>
<ul class="list">
<li>Maps</li>
<li>Siri</li>
<li>Facebook and Twitter</li>
<li>Multi-Touch</li>
<li>Accelerometer</li>
<li>GPS</li>
<li>High end processor</li>
<li>Camera</li>
<li>Safari</li>
<li>Powerful APIs</li>
<li>Game center</li>
<li>In-App Purchase</li>
<li>Reminders</li>
<li>Wide Range of gestures</li>
</ul>
<p>The number of users using iPhone/iPad has increased a great deal. This creates the opportunity for developers to make money by creating applications for iPhone and iPad the Apple's App Store.</p>
<p>For some one new to iOS, Apple has designed an application store where the user can buy apps developed for their iOS devices. A developer can create both free and paid apps to App Store. To develop applications and distribute to the store, the developer will require to register with iOS developer program which costs $99 a year and a Mac with Mountain Lion or higher for its development with latest Xcode.</p>
<h2>Registering as an Apple Developer</h2>
<p>An Apple ID is most necessary if you are having any Apple device and being a developer, you definitely need it. It's free and hence, no issues in having one. The benefits of having an Apple account are as follows &minus;</p>
<ul class="list">
<li><p>Access to development tools.</p></li>
<li><p>Worldwide Developers Conference (WWDC) videos.</p></li>
<li><p>Can join iOS developer program teams when invited.</p></li>	
</ul>
<p>To register an Apple account, follow the steps given below &minus;</p>
<p><b>Step 1</b> &minus; Click the link <a rel="nofollow" href="https://developer.apple.com/programs/register/" target="_blank">https://developer.apple.com/programs/register/</a> and select &quot;Create Apple ID&quot;</p>
<img src="/ios/images/ios_free_reg.jpg" alt="iOS Free Register" />
<p><b>Step 2</b> &minus; Provide the necessary information, which is self explanatory as given in the page.</p>
<p><b>Step 3</b> &minus; Verify your account with your email verification and the account becomes active.</p>
<p><b>Step 4</b> &minus; Now you will be able to download the developer tools like Xcode, which is packaged with iOS simulator and iOS SDK, and other developer resources.</p>
<h2>Apple iOS Developer Program</h2>
<p>The first question that would arise to a new developer is – Why should I register for an iOS developer program? The answer is quite simple; Apple always focuses on providing quality applications to its user. If there was no registration fee, there could be a possibility of junk apps being uploaded that could cause problems for the app review team of Apple.</p>
<p>The benefits of joining the iOS developer program are as follows &minus;</p>
<ul class="list">
<li><p>Run the apps you develop on the real iOS device.</p></li>
<li><p>Distribute the apps to the app store.</p></li>
<li><p>Get access to the developer previews.</p></li>	
</ul>
<p>The steps to join the iOS developer program are as follows &minus;</p>
<p><b>Step 1</b> &minus;  To register, click on the link &minus; <a rel="nofollow" href="https://developer.apple.com/programs/ios/" target="_blank">
(https://developer.apple.com/programs/ios/).</a></p>
<img src="/ios/images/developerprogram_reg.jpg" alt="Developer Program" />
<p><b>Step 2</b> &minus; Click on Enroll Now in the page that is displayed.</p></li>
<p><b>Step 3</b> &minus; You can either sign in to your existing apple account (if you have one) or create a new Apple ID.</p>
<p><b>Step 4</b> &minus; Thereafter, you have to select between Individual and Company accounts. Use company account if there will be more than one developer in your team. In individual account, you can't add members.</p>
<p><b>Step 5</b> &minus; After entering the personal information (for those who newly registers), you can purchase and activate the program by paying with the help of your credit card (only accepted mode of payment).</p>
<p><b>Step 6</b> &minus; Now you will get access to developer resources by selecting the member center option in the page.</p>
<img src="/ios/images/membercenter.jpg" alt="Member Center" />
<p><b>Step 7</b> &minus; Here you will be able to do the following &minus;</p>
<ul class="list">
<li><p>Create provisioning profiles.</p></li>
<li><p>Manage your team and devices.</p></li>
<li><p>Managing application to app store through iTunes Connect.</p></li>
<li><p>Get forum and technical support.</p></li>
</ul>
<h1>iOS - Environment Setup</h1>
<h2>iOS - Xcode Installation</h2>
<p><b>Step 1</b> &minus; Download the latest version of Xcode from <a rel="nofollow" href="https://developer.apple.com/downloads/" target="_blank">https://developer.apple.com/downloads/</a></p>
<img src="/ios/images/xcode_download.jpg" alt="Xcode Download" />
<p><b>Step 2</b> &minus; Double click the Xcode dmg file.</p>
<p><b>Step 3</b> &minus; You will find a device mounted and opened.</p>
<p><b>Step 4</b> &minus; There will be two items in the window that's displayed namely, Xcode application and the Application folder's shortcut.</p>
<p><b>Step 5</b> &minus; Drag the Xcode to application and it will be copied to your applications.</p>
<p><b>Step 6</b> &minus; Now Xcode will be available as a part of other applications from which you can select and run.</p>
<p>You also have another option of downloading Xcode from the Mac App store and then install following the step-by-step procedure given on the screen.</p>
<h2>Interface Builder</h2>
<p>Interface builder is the tool that enables easy creation of UI interface. You have a rich set of UI elements that is developed for use. You just have to drag and drop into your UI view. We'll learn about adding UI elements, creating outlets and actions for the UI elements in the upcoming pages.</p>
<img src="/ios/images/interfacebuilder.jpg" alt="Interface Builder"/>
<p>You have objects library at the right bottom that consists the entire necessary UI element. The user interface is often referred as <b>xibs</b>, which is its file extension. Each of the xibs is linked to a corresponding view controller.</p>
<h2>iOS Simulator</h2>
<p>An iOS simulator actually consists of two types of devices, namely iPhone and iPad with their different versions. iPhone versions include iPhone (normal), iPhone Retina, iPhone 5. iPad has iPad and iPad Retina. A screenshot of an iPhone simulator is displayed below.</p>
<img src="/ios/images/iphonesimulator.jpg" alt="iPhone Simulator" />
<p>You can simulate location in an iOS simulator for playing around with latitude and longitude effects of the app. You can also simulate memory warning and in-call status in the simulator. You can use the simulator for most purposes, however you cannot test device features like accelerometer. So, you might always need an iOS device to test all the scenarios of an application thoroughly.</p>
<h1>iOS - Objective C</h1>
<p>The language used in iOS development is objective C. It is an object-oriented language and hence, it would be easy for those who have some background in object-oriented programming languages.</p>
<h2>Interface and Implementation</h2>
<p>In Objective C, the file where the declaration of class is done is called the <b>interface file</b> and the file where the class is defined is called the <b>implementation file</b>.</p>
<p>A simple interface file <b>MyClass.h</b> would look like the following &minus;</p>
<pre class="prettyprint notranslate">
@interface MyClass:NSObject { 
   // class variable declared here
}

// class properties declared here
// class methods and instance methods declared here
@end
</pre>
<p>The implementation file <b>MyClass.m</b> would be as follows &minus;</p>
<pre class="prettyprint notranslate">
@implementation MyClass
   // class methods defined here
@end
</pre>
<h2>Object Creation</h2>
<p>Object creation is done as follows &minus;</p>
<pre class="result notranslate">
MyClass  *objectName = [[MyClass alloc]init] ;
</pre>
<h2>Methods</h2>
<p>Method is declared in Objective C as follows &minus;</p>
<pre class="result notranslate">
-(returnType)methodName:(typeName) variable1 :(typeName)variable2;
</pre>
<p>An example is shown below.</p>
<pre class="result notranslate">
-(void)calculateAreaForRectangleWithLength:(CGfloat)length 
andBreadth:(CGfloat)breadth;
</pre>
<p>You might be wondering what the <b>andBreadth</b> string is for; actually it’s an optional string, which helps us read and understand the method easily, especially at the time of calling. To call this method in the same class, we use the following statement &minus;</p>
<pre class="result notranslate">
[self calculateAreaForRectangleWithLength:30 andBreadth:20];
</pre>
<p>As said above, the use of andBreadth helps us understand that breadth is 20. Self is used to specify that it's a class method.</p>
<h3>Class Methods</h3>
<p>Class methods can be accessed directly without creating objects for the class. They don't have any variables and objects associated with it. An example is shown below.</p>
<pre class="result notranslate">
+(void)simpleClassMethod;
</pre>
<p>It can be accessed by using the class name (let's assume the class name as MyClass) as follows &minus;</p>
<pre class="result notranslate">
[MyClass simpleClassMethod];
</pre>
<h3>Instance Methods</h3>
<p>Instance methods can be accessed only after creating an object for the class. Memory is allocated to the instance variables. An example instance method is shown below.</p>
<pre class="result notranslate">
-(void)simpleInstanceMethod; 
</pre>
<p>It can be accessed after creating an object for the class as follows &minus;</p>
<pre class="prettyprint notranslate">
MyClass  *objectName = [[MyClass alloc]init] ;
[objectName simpleInstanceMethod];
</pre>
<h2>Important Data Types in Objective C</h2>
<table class="table table-bordered">
<tr>
<th style="width:10%;">Sr.No.</th>
<th style="text-align:center;">Data Type</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>NSString</b></p>
<p>It is used for representing a string.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>CGfloat</b></p>
<p>It is used for representing a floating point value (normal float is also allowed but it's better to use CGfloat).</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>NSInteger</b></p>
<p>It is used for representing integer.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>BOOL</b></p>
<p>It is used for representing Boolean (YES or NO are BOOL types allowed).</p></td>
</tr>
</table>
<h2>Printing Logs</h2>
<p>NSLog - used for printing a statement. It will be printed in the device logs and debug console in release and debug modes respectively. For example,</p>
<pre class="result notranslate">
NSlog(@&quot;&quot;);
</pre>
<h2>Control Structures</h2>
<p>Most of the control structures are same as in C and C++, except for a few additions like for in statement.</p>
<h2>Properties</h2>
<p>For an external class to access the class, variable properties are used. For example,</p>
<pre class="result notranslate">
@property(nonatomic , strong) NSString *myString;
</pre>
<h3>Accessing Properties</h3>
<p>You can use dot operator to access properties. To access the above property, we will do the following.</p>
<pre class="result notranslate">
self.myString = @&quot;Test&quot;;
</pre>
<p>You can also use the set method as follows &minus;</p>
<pre class="result notranslate">
[self setMyString:@&quot;Test&quot;];
</pre>
<h2>Categories</h2>
<p>Categories are used to add methods to the existing classes. By this way, we can add method to classes for which we don't have even implementation files where the actual class is defined. A sample category for our class is as follows &minus;</p>
<pre class="prettyprint notranslate">
@interface MyClass(customAdditions)
- (void)sampleCategoryMethod;
@end

@implementation MyClass(categoryAdditions)

-(void)sampleCategoryMethod {
   NSLog(@&quot;Just a test category&quot;);
}
</pre>
<h2>Arrays</h2>
<p>NSMutableArray and NSArray are the array classes used in objective C. As the name suggests, the former is mutable and the latter is immutable. An example is shown below.</p>
<pre class="prettyprint notranslate">
NSMutableArray *aMutableArray = [[NSMutableArray alloc]init];
[anArray addObject:@&quot;firstobject&quot;];
NSArray *aImmutableArray = [[NSArray alloc]
initWithObjects:@&quot;firstObject&quot;,nil];
</pre>
<h2>Dictionary</h2>
<p>NSMutableDictionary and NSDictionary are the dictionary classes used in objective C. As the name suggests, the former is mutable and the latter is immutable. An example is shown below.</p>
<pre class="prettyprint notranslate">
NSMutableDictionary *aMutableDictionary = [[NSMutableArray alloc]init];
[aMutableDictionary setObject:@&quot;firstobject&quot; forKey:@&quot;aKey&quot;];
NSDictionary*aImmutableDictionary= [[NSDictionary alloc]initWithObjects:[NSArray arrayWithObjects:
@&quot;firstObject&quot;,nil] forKeys:[ NSArray arrayWithObjects:@&quot;aKey&quot;]];
</pre>
<h1>iOS - First iPhone Application</h1>
<h2>Creating the First App</h2>
<p>Now we are going to create a simple single view application (a blank app) that will run on the iOS simulator.</p>
<p>The steps are as follows.</p>
<p><b>Step 1</b> &minus; Open Xcode and select <b>Create a new Xcode project</b>.</p>
<img src="/ios/images/xcodewelcomepage.jpg" alt="Xcode Welcome Page" />
<p><b>Step 2</b> &minus; Select <b>Single View Application</b>.</p>
<img src="/ios/images/createproject.jpg" alt="Create Project" />
<p><b>Step 3</b> &minus; Enter the product name, i.e., the name of the application, organization name, and then the company identifier.</p>
<img src="/ios/images/newprojectcreateoptions.jpg" alt="New Project Create Options" />
<p><b>Step 4</b> &minus; Ensure that <b>Use Automatic Reference Counting</b> is selected in order to automatically release the resources allocated once it goes out of scope. Click Next.</p>
<p><b>Step 5</b> &minus; Select the directory for the project and select create.</p>
<img src="/ios/images/createprojectselectfolder.jpg" alt="Create Project Select Folder" />
<p><b>Step 6</b> &minus; You will see a screen as follows &minus;</p>
<img src="/ios/images/xcodeprojectpage.jpg" alt="Xcode Project Page" />
<p>In the screen above, you will be able to select the supported orientations, build and release settings. There is a field deployment target, the device version from which we want to support, lets select 4.3, which is the minimum deployment target allowed now. For now, these are not required and let's focus on running the application.</p>
<p><b>Step 7</b> &minus; Now, select iPhone simulator in the drop down near Run button and select run.</p>
<img src="/ios/images/runproject.jpg" width="200" height="100" border="0" alt="" />
<p><b>Step 8</b> &minus; That's it; you have successfully run your first application. You will get an output as follows &minus;</p>
<img src="/ios/images/iphonesimulator.jpg" width="200" height="360" border="0" alt="" />
<p>Now let's change the background color, just to have a start with the interface builder. Select ViewController.xib. Select background option in the right side, change the color and run.</p>
<img src="/ios/images/interfacebuilder.jpg" alt="Interface Builder" />
<p>In the above project, by default, the deployment target would have been set to iOS 6.0 and auto-layout will be enabled. To ensure that our application runs on devices that are on iOS 4.3 onwards, we have already modified the deployment target at the start of creation of this application, but we didn't disable auto-layout.</p>
<p>To disable auto-layout, we need to deselect the auto-layout checkbox in the file inspector of each nib, i.e., the xib files. The various sections of Xcode project IDE are given in the following figure (Courtesy: Apple Xcode 4 User documentation).</p>
<img src="/ios/images/xcode4workspace.jpg" alt="Xcode 4 Workspace" />
<p>File inspector is found in the inspector selector bar as shown above and auto layout can be unchecked there. Auto layout can be used when you want to target only iOS 6 devices. Also, you'll be able to use many new features like passbook if you raise the deployment target to iOS 6. For now, let's stick to iOS 4.3 as the deployment target.</p>
<h2>Code of the First iOS Application</h2>
<p>You will find five different files that would have been generated for your application. They are listed as follows &minus;</p>
<ul class="list">
<li>AppDelegate.h</li>
<li>AppDelegate.m</li>
<li>ViewController.h</li>
<li>ViewController.m</li>
<li>ViewController.xib</li>
</ul>
<h2>AppDelegate.h</h2>
<pre class="prettyprint notranslate">
// Header File that provides all UI related items. 
#import &lt;UIKit/UIKit.h&gt; 

// Forward declaration (Used when class will be defined /imported in future)
@class ViewController;  

// Interface for Appdelegate
@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt;

// Property window 
@property (strong, nonatomic) UIWindow *window; 

// Property Viewcontroller

@property (strong, nonatomic) ViewController *viewController;
//this marks end of interface 
@end  
</pre>
<p><b>Important items in code</b> &minus;</p>
<ul class="list">
<li><p>AppDelegate inherits from UIResponder that handles iOS events.</p></li>
<li><p>Implements the delegate methods of UIApplicationDelegate, which provides key application events like finished launching, about to terminate and so on.</p></li>
<li><p>UIWindow object to manage and co-ordinate the various views on the iOS device screen. It's like the base view over which all other views are loaded. Generally there is only one window for an application.</p></li>
<li><p>UIViewController to handle the screen flow.</p></li>
</ul>
<h2>AppDelegate.m</h2>
<pre class="prettyprint notranslate">
// Imports the class Appdelegate's interface
import "AppDelegate.h" 

// Imports the viewcontroller to be loaded
#import "ViewController.h" 

// Class definition starts here
@implementation AppDelegate 


// Method to intimate us that the application launched successfully
- (BOOL)application:(UIApplication *)application 
didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
   self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
   
   // Override point for customization after application launch.
   self.viewController = [[ViewController alloc]
   initWithNibName:@"ViewController" bundle:nil];
   self.window.rootViewController = self.viewController;
   [self.window makeKeyAndVisible];
   return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application {
   /* Use this method to release shared resources, save user data,
   invalidate timers, and store enough application state information
   to restore your application to its current state in case it is 
   terminated later. If your application supports background 
   execution, this method is called instead of
   applicationWillTerminate: when the user quits.*/
}

- (void)applicationWillEnterForeground:(UIApplication *)application {
   /* Called as part of the transition from the background to the 
   inactive state. Here you can undo many of the changes made on 
   entering the background.*/
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
   /* Restart any tasks that were paused (or not yet started) while 
   the application was inactive. If the application was previously in 
   the background, optionally refresh the user interface.*/
}

- (void)applicationWillTerminate:(UIApplication *)application {
   /* Called when the application is about to terminate. Save data if 
   appropriate. See also applicationDidEnterBackground:. */
}

- (void)applicationWillTerminate:(UIApplication *)application {
   /* Called when the application is about to terminate. Save data if appropriate.
   See also applicationDidEnterBackground:. */
}
@end
</pre>
<p><b>Important items in code</b> &minus;</p>
<ul class="list">
<li><p>UIApplication delegates are defined here. All the methods defined above are UI application delegates and contains no user defined methods.</p></li>
<li><p>UIWindow object is allocated to hold the application allocated.</p></li>
<li><p>UIViewController is allocated as the window's initial view controller.</p></li>
<li><p>To make the window visible, makeKeyAndVisible method is called.</p></li>
</ul>
<h2>ViewController.h</h2>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt; 

// Interface for class ViewController
@interface ViewController : UIViewController 

@end
</pre>
<p><b>Important items in code</b> &minus;</p>
<ul class="list">
<li><p>The ViewController class inherits the UIViewController, which provides the fundamental view management model for the iOS applications.</p></li>
</ul>
<h2>ViewController.m</h2>
<pre class="prettyprint notranslate">
#import "ViewController.h"

// Category, an extension of ViewController class
@interface ViewController ()

@end

@implementation ViewController  

- (void)viewDidLoad {
   [super viewDidLoad];
   // Do any additional setup after loading the view, typically from a nib.
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}
@end
</pre>
<p><b>Important items in code</b> &minus;</p>
<ul class="list">
<li><p>Two methods implemented here are defined in the base class UIViewController.</p></li>
<li><p>Do initial setup in viewDidLoad which is called after the view loads.</p></li>
<li><p>didReceiveMemoryWarning method is called in case of memory warning.</p></li>
</ul>
<h1>iOS - Actions and Outlets</h1>
<p>Actions and outlets in iOS are referred to as <b>ibActions</b> and <b>ibOutlets</b> respectively, where <b>ib</b> stands for interface builder. These are related to the UI elements and we will explore them after knowing visually how to implement them.</p>
<h2>Actions and Outlets – Steps Involved</h2>
<p><b>Step 1</b> &minus; Let's use our First iPhone Application.</p>
<p><b>Step 2</b> &minus; Select the ViewController.xib file from the files in the navigator section.</p>
<p><b>Step 3</b> &minus; Now, you can select the UI elements from the library pane in the right hand side of our window, which is shown below.</p>
<img src="/ios/images/objectlibrary.jpg" alt="iOS Tutorial" />
<p><b>Step 4</b> &minus; You can drag and drop the UI elements to our view in our interface builder.</p>
<p><b>Step 5</b> &minus; Let us add a Label and Round Rect Button to our view.</p>
<img src="/ios/images/interfaceaction.jpg" alt="iOS Tutorial" />
<p><b>Step 6</b> &minus; From the Editor Selector button in the workspace toolbar found on the top right corner as shown below.</p>
<img src="/ios/images/standardeditor.jpg" alt="iOS Tutorial" />
<p>Select Assistant editor button.</p>
<img src="/ios/images/assistanteditor.jpg" alt="iOS Tutorial" />
<p><b>Step 7</b> &minus; We will see two windows in our editor area in the center, one is ViewController.xib file and the other is ViewController.h.</p>
<p><b>Step 8</b> &minus; Now, right click on the label and select, hold and drag the new referencing outlet as shown below.</p>
<img src="/ios/images/iboutletdrag.jpg" alt="iOS Tutorial" />
<p><b>Step 9</b> &minus; Drop in the ViewController.h in between the curly braces. In case there are no curly braces in the file, add the ViewController before doing this. You will find a pop-up as shown below.</p>
<img src="/ios/images/iboutletdrop.jpg" alt="iOS Tutorial" />
<p><b>Step 10</b> &minus; Type the label name for the outlet, here we have used the label myTitleLabel. Click connect and the ibOutlet will be complete.</p>
<p><b>Step 11</b> &minus; Similarly, to add an action, right click the Round rect button, select touch up inside and drag it below the curly braces.</p>
<img src="/ios/images/actiondrag.jpg" alt="iOS Tutorial" />
<p><b>Step 12</b> &minus; Drop it and name it setTitleLabel.</p>
<img src="/ios/images/actiondrop.jpg" alt="iOS Tutorial" />
<p><b>Step 13</b> &minus; Select ViewController.m file, you'll find a method as shown below.</p>
<pre class="result notranslate">
-(IBAction) setTitleLabel:(id)sender {
}
</pre>
<p><b>Step 14</b> &minus; Add a statement as shown below inside the above method.</p>
<pre class="result notranslate">
[myTitleLabel setText:@&quot;Hello&quot;];
</pre>
<p><b>Step 15</b> &minus; Let us now run the program by selecting the run button. You will see the following output.</p>
<img src="/ios/images/ibactiontutorial.simulator_start.jpg" alt="iOS Tutorial" /> 
<p><b>Step 16</b> &minus; Now click the button.</p>
<img src="/ios/images/ibactiontutorial.simulator_end.jpg" alt="iOS Tutorial" />
<p><b>Step 17</b> &minus; The label that we created have been changed by the action on the button.</p>
<p><b>Step 18</b> &minus; From the above example, we can conclude that IBOutlet creates a reference to the UIElement (here for the UILabel). Similarly, the IBAction links the UIButton with a method, which is called on the event touch up inside.</p>
<p><b>Step 19</b> &minus; You can play around with actions by selecting different events while creating the action.</p>
<h1>iOS - Delegates</h1>
<h2>Example for Delegate</h2>
<p>Let's assume an object A calls an object B to perform an action. Once the action is complete, object A should know that B has completed the task and take necessary action. This is achieved with the help of delegates.</p>
<p>The key concepts in the above example are &minus;</p>
<ul class="list">
<li><p>A is a delegate object of B.</p></li>
<li><p>B will have a reference of A.</p></li>
<li><p>A will implement the delegate methods of B.</p></li>
<li><p>B will notify A through the delegate methods.</p></li>
</ul>
<h2>Steps in Creating a Delegate</h2>
<p><b>Step 1</b> &minus; First, create a single view application.</p>
<p><b>Step 2</b> &minus; Then select File &rarr; New &rarr; File...</p>
<img src="/ios/images/addnewfile.jpg" alt="iOS Tutorial" />
<p><b>Step 3</b> &minus; Then select Objective C Class and click Next.</p>
<p><b>Step 4</b> &minus; Give a name to the class, say, SampleProtocol with subclass as NSObject as shown below.</p>
<img src="/ios/images/setprotocolname.jpg" alt="iOS Tutorial" />
<p><b>Step 5</b> &minus; Then select create.</p>
<p><b>Step 6</b> &minus; Add a protocol to the SampleProtocol.h file and the updated code is as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;Foundation/Foundation.h&gt;

// Protocol definition starts here 
@protocol SampleProtocolDelegate &lt;NSObject&gt;
@required
- (void) processCompleted;
@end

// Protocol Definition ends here
@interface SampleProtocol : NSObject {
   // Delegate to respond back
   id &lt;SampleProtocolDelegate&gt; _delegate; 
}
@property (nonatomic,strong) id delegate;

-(void)startSampleProcess; // Instance method
@end
</pre>
<p><b>Step 7</b> &minus; Implement the instance method by updating the SampleProtocol.m file as shown below.</p>
<pre class="prettyprint notranslate">
#import "SampleProtocol.h"

@implementation SampleProtocol

-(void)startSampleProcess {
   [NSTimer scheduledTimerWithTimeInterval:3.0 target:self.delegate 
	selector:@selector(processCompleted) userInfo:nil repeats:NO];
}
@end
</pre>
<p><b>Step 8</b> &minus; Add a UILabel in the ViewController.xib by dragging the label from the object library to UIView as shown below.</p>
<img src="/ios/images/delegatelabel.jpg" alt="iOS Tutorial" />
<p><b>Step 9</b> &minus; Create an IBOutlet for the label and name it as myLabel and update the code as follows to adopt SampleProtocolDelegate in ViewController.h.</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;
#import "SampleProtocol.h"

@interface ViewController : UIViewController&lt;SampleProtocolDelegate&gt; {
   IBOutlet UILabel *myLabel;
}
@end
</pre>
<p><b>Step 10</b> Implement the delegate method, create object for SampleProtocol and call the startSampleProcess method. The Updated ViewController.m file is as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()

@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
   SampleProtocol *sampleProtocol = [[SampleProtocol alloc]init];
   sampleProtocol.delegate = self;
   [myLabel setText:@"Processing..."];
   [sampleProtocol startSampleProcess];
   // Do any additional setup after loading the view, typically from a nib.
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

#pragma mark - Sample protocol delegate
-(void)processCompleted {
   [myLabel setText:@"Process Completed"];
}
@end
</pre>
<p><b>Step 11</b> We will see an output as follows. Initially the label displays "processing...", which gets updated once the delegate method is called by the SampleProtocol object.</p>
<img src="/ios/images/delegateresult.jpg" alt="iOS Tutorial" />
<h1>iOS - UI Elements</h1>
<h2>What UI Elements are?</h2>
<p>UI elements are the visual elements that we can see in our applications. Some of these elements respond to user interactions such as buttons, text fields and others are informative such as images, labels.</p>
<h2>How to Add UI Elements?</h2>
<p>We can add UI elements both in code and with the help of interface builder. Depending on the need we can use either one of them.</p>
<h2>Our Focus</h2>
<p>We'll be focussing more on adding UI elements through code in our applications. Using interface builder is simple and straight forward, we just need to drag and drop the UI elements.</p>
<h2>Our Approach</h2>
<p>We will create a simple iOS application and use it for explaining some of the UI elements.</p>
<p><b>Step 1</b> &minus; Create a Viewbased application as we did in our First iOS application.</p>
<p><b>Step 2</b> &minus; We will be only updating the ViewController.h and ViewController.m files.</p>
<p><b>Step 3</b> &minus; Then we add a method to our ViewController.m file specific for creating the UI element.</p>
<p><b>Step 4</b> &minus; We will call this method in our viewDidLoad method.</p>
<p><b>Step 5</b> &minus; The important lines of code have been explained in the code with single line comment above those lines.</p>
<h2>List of UI Elements</h2>
<p>UI specific elements and their related functionalities are explained below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:10%;">Sr.No.</th>
<th style="text-align:center;">UI Specific Elements</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/ios/ios_ui_elements_text_field.htm">Text Fields</a>
<p>It is an UI element that enables the app to get user input.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/ios/ios_ui_elements_input_types_text_field.htm">Input types - TextFields</a>
<p>We can set the type of input that user can give by using the keyboard property of UITextField.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/ios/ios_ui_elements_buttons.htm">Buttons</a>
<p>It is used for handling user actions.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/ios/ios_ui_elements_labels.htm">Label</a>
<p>It is used for displaying static content.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><a href="/ios/ios_ui_elements_toolbar.htm">Toolbar</a>
<p>It is used if we want to manipulate something based on our current view.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><a href="/ios/ios_ui_elements_status_bar.htm">Status Bar</a>
<p>It displays the key information of device.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><a href="/ios/ios_ui_elements_navigation_bar.htm">Navigation Bar</a>
<p>It contains the navigation buttons of a navigation controller, which is a stack of view controllers which can be pushed and popped.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><a href="/ios/ios_ui_elements_tab_bar.htm">Tab bar</a>
<p>It is generally used to switch between various subtasks, views or models within the same view.</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><a href="/ios/ios_ui_elements_imageview.htm">Image View</a>
<p>It is used to display a simple image or sequence of images.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><a href="/ios/ios_ui_elements_scrollview.htm">Scroll View</a>
<p>It is used to display content that is more than the area of screen.</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><a href="/ios/ios_ui_elements_tableview.htm">Table View</a>
<p>It is used for displaying scrollable list of data in multiple rows and sections.</p></td>
</tr>
<tr>
<td class="ts">12</td>
<td><a href="/ios/ios_ui_elements_splitview.htm">Split View</a>
<p>It is used for displaying two panes with master pane controlling the information on detail pane.</p></td>
</tr>
<tr>
<td class="ts">13</td>
<td><a href="/ios/ios_ui_elements_textview.htm">Text View</a>
<p>It is used for diplaying scrollable list of text information that is optionally editable.</p></td>
</tr>
<tr>
<td class="ts">14</td>
<td><a href="/ios/ios_ui_elements_view_transition.htm">View  Transition </a>
<p>It explains the various view transitions between views.</p></td>
</tr>
<tr>
<td class="ts">15</td>
<td><a href="/ios/ios_ui_elements_picker.htm">Pickers</a>
<p>It is used for displaying for selecting a specific data from a list.</p></td>
</tr>
<tr>
<td class="ts">16</td>
<td><a href="/ios/ios_ui_elements_switches.htm">Switches</a>
<p>It is used as disable and enable for actions.</p></td>
</tr>
<tr>
<td class="ts">17</td>
<td><a href="/ios/ios_ui_elements_sliders.htm">Sliders</a>
<p>It is used to allow users to make adjustments to a value or process throughout a range of allowed values.</p></td>
</tr>
<tr>
<td class="ts">18</td>
<td><a href="/ios/ios_ui_elements_alerts.htm">Alerts</a>
<p>It is used to give important information to users.</p></td>
</tr>
<tr>
<td class="ts">19</td>
<td><a href="/ios/ios_ui_elements_icons.htm">Icons</a>
<p>It is an image representation used for an action or depict something related to the application.</p></td>
</tr>
</table>
<h1>iOS - Accelerometer</h1>
<p>Accelerometer is used for detecting the changes in the position of the device in the three directions x, y and z. We can know the current position of the device relative to the ground. For testing this example, you'll need to run it on a <b>device</b> and to doesn't work on simulator.</p>
<h2>Accelerometer – Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a simple <b>View based application</b>.</p>
<p><b>Step 2</b> &minus; Add three labels in <b>ViewController.xib</b> and create ibOutlets naming them as xlabel, ylabel, and zlabel.</p>
<p><b>Step 3</b> &minus; Update ViewController.h as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;

@interface ViewController : UIViewController&lt;UIAccelerometerDelegate&gt; {
   IBOutlet UILabel *xlabel;
   IBOutlet UILabel *ylabel;
   IBOutlet UILabel *zlabel;
}
@end
</pre>
<p><b>Step 4</b> &minus; Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
   [[UIAccelerometer sharedAccelerometer]setDelegate:self];
   //Do any additional setup after loading the view,typically from a nib
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

- (void)accelerometer:(UIAccelerometer *)accelerometer didAccelerate:
   (UIAcceleration *)acceleration {
   [xlabel setText:[NSString stringWithFormat:@"%f",acceleration.x]];
   [ylabel setText:[NSString stringWithFormat:@"%f",acceleration.y]];
   [zlabel setText:[NSString stringWithFormat:@"%f",acceleration.z]];
}
@end
</pre>
<h2>Output</h2>
<p>When we run the application in <b>iPhone</b> device, we'll get the following output &minus;</p>
<img src="/ios/images/accelerometer_output.jpg" alt="iOS Tutorial" />
<h1>iOS - Universal Applications</h1>
<p>A universal application is an application that is designed for both iPhone and iPad in a single binary. A universal application allows code reuse and fast updates.</p>
<h2>Universal Application – Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a simple <b>View based application</b>.</p>
<p><b>Step 2</b> &minus; Change the File name <b>ViewController.xib</b> file to <b>ViewController_iPhone.xib</b> as shown below in the file inspector in the right hand side.</p>
<img src="/ios/images/universalappinterfacerename.jpg" alt="iOS Tutorial" />
<p><b>Step 3</b> &minus; Select File &rarr; New &rarr; File... then select the subsection <b>&quot;User Interface&quot;</b> and select <b>View</b>. Click Next.</p>
<img src="/ios/images/newipadxib.jpg" alt="iOS Tutorial" />
<p><b>Step 4</b> &minus; Select the device family as <b>iPad</b> and click next.</p>
<img src="/ios/images/universalappselectdevicetype.jpg" alt="iOS Tutorial" />
<p><b>Step 5</b> &minus; Save the file as <b>ViewController_iPad.xib</b> and select Create.</p>
<p><b>Step 6</b> &minus; Add a label in the center of the screen in both <b>ViewController_iPhone.xib</b> and <b>ViewController_iPad.xib</b>.</p>
<p><b>Step 7</b> &minus; In <b>ViewController_iPad.xib</b>, select the <b>identity inspector</b> and set the custom class as <b>ViewController</b>.</p>
<img src="/ios/images/universalappsetclass.jpg" alt="iOS Tutorial" />
<p><b>Step 8</b> &minus; Update the application:DidFinishLaunching:withOptions method in AppDelegate.m as follows &minus;</p>
<pre class="prettyprint notranslate">
- (BOOL)application:(UIApplication *)application
   didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
   self.window = [[UIWindow alloc] initWithFrame:[[UIScreen 
   mainScreen] bounds]];
   
   // Override point for customization after application launch.
   if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
      self.viewController = [[ViewController alloc] 
      initWithNibName:@"ViewController_iPhone" bundle:nil];
   } else {
      self.viewController = [[ViewController alloc] initWithNibName:
      @"ViewController_iPad" bundle:nil];
   }
   self.window.rootViewController = self.viewController;
   [self.window makeKeyAndVisible];
   return YES;
}
</pre>
<p><b>Step 9</b> &minus; Update the devices in project summary to <b>Universal</b> as shown below &minus;</p>
<img src="/ios/images/xcodeprojectpage.jpg" alt="iOS Tutorial" />
<h2>Output</h2>
<p>When we run the application, we'll get the following output &minus;</p>
<img src="/ios/images/universalappiphone_output.jpg" alt="iOS Tutorial" />
<p>When we run the application in iPad simulator, we'll get the following output &minus;</p>
<img src="/ios/images/universalappipad_output.jpg" alt="iOS Tutorial" />
<h1>iOS - Camera Management</h1>
<p>Camera is one of the common features in a mobile device. It is possible for us to take pictures with the camera and use it in our application and it is quite simple too.</p>
<h2>Camera Management – Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a simple <b>View based application</b>.</p>
<p><b>Step 2</b> &minus; Add a <b>button</b> in <b>ViewController.xib</b> and create IBAction for the button.</p>
<p><b>Step 3</b> &minus; Add an <b>image view</b> and create IBOutlet naming it as imageView.</p>
<p><b>Step 4</b> &minus; Update <b>ViewController.h</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;

@interface ViewController : UIViewController&lt;UIImagePickerControllerDelegate&gt; {
   UIImagePickerController *imagePicker;
   IBOutlet UIImageView *imageView;
}

- (IBAction)showCamera:(id)sender;
@end
</pre>
<p><b>Step 5</b> &minus;	Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

- (IBAction)showCamera:(id)sender {
   imagePicker.allowsEditing = YES;
   
   if ([UIImagePickerController isSourceTypeAvailable:
   UIImagePickerControllerSourceTypeCamera]) {
      imagePicker.sourceType = UIImagePickerControllerSourceTypeCamera;
   } else {
      imagePicker.sourceType = 
      UIImagePickerControllerSourceTypePhotoLibrary;
   }
   [self presentModalViewController:imagePicker animated:YES];
}

-(void)imagePickerController:(UIImagePickerController *)picker 
   didFinishPickingMediaWithInfo:(NSDictionary *)info {
      UIImage *image = [info objectForKey:UIImagePickerControllerEditedImage];
      
      if (image == nil) {
         image = [info objectForKey:UIImagePickerControllerOriginalImage];
      }
   imageView.image = image;
}

-(void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {
   [self dismissModalViewControllerAnimated:YES];
}
@end
</pre>
<h2>Output</h2>
<p>When we run the application and click show camera button, we'll get the following output &minus;</p>
<img src="/ios/images/camera_output1.jpg" alt="iOS Tutorial" />
<p>Once we take a picture, we can edit the picture, i.e., move and scale as shown below &minus;</p>
<img src="/ios/images/camera_output2.jpg" alt="iOS Tutorial" />
<h1>iOS - Location Handling</h1>
<p>We can easily locate the user's current location in iOS, provided the user allows the application to access the information with the help of the core location framework.</p>
<h2>Location Handling – Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a simple View based application.</p>
<p><b>Step 2</b> &minus; Select your project file, then select targets and then add CoreLocation.framework as shown below &minus;</p>
<img src="/ios/images/corelocation_library_addition.jpg" alt="iOS Tutorial" />
<p><b>Step 3</b> &minus; Add two labels in <b>ViewController.xib</b> and create ibOutlets naming the labels as <b>latitudeLabel</b> and <b>longitudeLabel</b> respectively.</p>
<p><b>Step 4</b> &minus; Create a new file by selecting File &rarr; New &rarr; File... &rarr; select <b>Objective C class</b> and click next.</p>
<p><b>Step 5</b> &minus; Name the class as <b>LocationHandler</b> with <b>&quot;sub class of&quot;</b> as NSObject.</p>
<p><b>Step 6</b> &minus; Select create.</p>
<p><b>Step 7</b> &minus; Update <b>LocationHandler.h</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;Foundation/Foundation.h&gt;
#import &lt;CoreLocation/CoreLocation.h&gt;

@protocol LocationHandlerDelegate &lt;NSObject&gt;

@required
-(void) didUpdateToLocation:(CLLocation*)newLocation 
   fromLocation:(CLLocation*)oldLocation;
@end

@interface LocationHandler : NSObject&lt;CLLocationManagerDelegate&gt; {
   CLLocationManager *locationManager;
}
@property(nonatomic,strong) id&lt;LocationHandlerDelegate&gt; delegate;

+(id)getSharedInstance;
-(void)startUpdating;
-(void) stopUpdating;

@end
</pre>
<p><b>Step 8</b> &minus; Update <b>LocationHandler.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "LocationHandler.h"
static LocationHandler *DefaultManager = nil;

@interface LocationHandler()

-(void)initiate;

@end

@implementation LocationHandler

+(id)getSharedInstance{
   if (!DefaultManager) {
      DefaultManager = [[self allocWithZone:NULL]init];
      [DefaultManager initiate];
   }
   return DefaultManager;
}

-(void)initiate {
   locationManager = [[CLLocationManager alloc]init];
   locationManager.delegate = self;
}

-(void)startUpdating{
   [locationManager startUpdatingLocation];
}

-(void) stopUpdating {
   [locationManager stopUpdatingLocation];
}

-(void)locationManager:(CLLocationManager *)manager didUpdateToLocation:
   (CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation {
   if ([self.delegate respondsToSelector:@selector
   (didUpdateToLocation:fromLocation:)]) {
      [self.delegate didUpdateToLocation:oldLocation 
      fromLocation:newLocation];
   }
}
@end
</pre>
<p><b>Step 9</b> &minus; Update <b>ViewController.h</b> as follows where we have implemented the <b>LocationHandler delegate</b> and create two ibOutlets &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;
#import "LocationHandler.h"

@interface ViewController : UIViewController&lt;LocationHandlerDelegate&gt; {
   IBOutlet UILabel *latitudeLabel;
   IBOutlet UILabel *longitudeLabel;
}
@end
</pre>
<p><b>Step 10</b> &minus; Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
   [[LocationHandler getSharedInstance]setDelegate:self];
   [[LocationHandler getSharedInstance]startUpdating];
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

-(void)didUpdateToLocation:(CLLocation *)newLocation 
 fromLocation:(CLLocation *)oldLocation {
   [latitudeLabel setText:[NSString stringWithFormat:
   @"Latitude: %f",newLocation.coordinate.latitude]];
   [longitudeLabel setText:[NSString stringWithFormat:
   @"Longitude: %f",newLocation.coordinate.longitude]];
}
@end
</pre>
<h2>Output</h2>
<p>When we run the application, we'll get the following output &minus;</p>
<img src="/ios/images/locationoutput.jpg" alt="iOS Tutorial" />
<h1>iOS - SQLite Database</h1>
<p>SQLite can be used in iOS for handling data. It uses sqlite queries, which makes it easier for those who know SQL.</p>
<h2>Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a simple <b>View based application</b>.</p>
<p><b>Step 2</b> &minus; Select your project file, then select targets and then add <b>libsqlite3.dylib</b> library in choose frameworks.</p>
<p><b>Step 3</b> &minus; Create a new file by selecting File&rarr; New &rarr; File...  &rarr; select <b>Objective C class</b> and click next.</p>
<p><b>Step 4</b> &minus; Name the class as <b>DBManager</b> with <b>&quot;sub class of&quot;</b> as NSObject.</p>
<p><b>Step 5</b> &minus; Select create.</p>
<p><b>Step 6</b> &minus; Update <b>DBManager.h</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;Foundation/Foundation.h&gt;
#import &lt;sqlite3.h&gt;

@interface DBManager : NSObject {
   NSString *databasePath;
}

+(DBManager*)getSharedInstance;
-(BOOL)createDB;
-(BOOL) saveData:(NSString*)registerNumber name:(NSString*)name 
   department:(NSString*)department year:(NSString*)year;
-(NSArray*) findByRegisterNumber:(NSString*)registerNumber;

@end
</pre>
<p><b>Step 7</b> &minus; Update <b>DBManager.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "DBManager.h"
static DBManager *sharedInstance = nil;
static sqlite3 *database = nil;
static sqlite3_stmt *statement = nil;

@implementation DBManager

+(DBManager*)getSharedInstance {
   if (!sharedInstance) {
      sharedInstance = [[super allocWithZone:NULL]init];
      [sharedInstance createDB];
   }
   return sharedInstance;
}

-(BOOL)createDB {
   NSString *docsDir;
   NSArray *dirPaths;
   
   // Get the documents directory
   dirPaths = NSSearchPathForDirectoriesInDomains
   (NSDocumentDirectory, NSUserDomainMask, YES);
   docsDir = dirPaths[0];
   
   // Build the path to the database file
   databasePath = [[NSString alloc] initWithString: 
   [docsDir stringByAppendingPathComponent: @"student.db"]];
   BOOL isSuccess = YES;
   NSFileManager *filemgr = [NSFileManager defaultManager];
   
   if ([filemgr fileExistsAtPath: databasePath ] == NO) {
      const char *dbpath = [databasePath UTF8String];
      if (sqlite3_open(dbpath, &amp;database) == SQLITE_OK) {
         char *errMsg;
         const char *sql_stmt =
         "create table if not exists studentsDetail (regno integer 
         primary key, name text, department text, year text)";
         
         if (sqlite3_exec(database, sql_stmt, NULL, NULL, &amp;errMsg) != SQLITE_OK) {
            isSuccess = NO;
            NSLog(@"Failed to create table");
         }
         sqlite3_close(database);
         return  isSuccess;
      } else {
         isSuccess = NO;
         NSLog(@"Failed to open/create database");
      }
   }    
   return isSuccess;
}

- (BOOL) saveData:(NSString*)registerNumber name:(NSString*)name 
   department:(NSString*)department year:(NSString*)year; {
   const char *dbpath = [databasePath UTF8String];
   
   if (sqlite3_open(dbpath, &amp;database) == SQLITE_OK) {
      NSString *insertSQL = [NSString stringWithFormat:@"insert into
      studentsDetail (regno,name, department, year) values
      (\"%d\",\"%@\", \"%@\", \"%@\")",[registerNumber integerValue],
      name, department, year];        
      const char *insert_stmt = [insertSQL UTF8String];
      sqlite3_prepare_v2(database, insert_stmt,-1, &amp;statement, NULL);
      
      if (sqlite3_step(statement) == SQLITE_DONE) {
         return YES;
      } else {
         return NO;
      }
      sqlite3_reset(statement);
   }
   return NO;
}

- (NSArray*) findByRegisterNumber:(NSString*)registerNumber {
   const char *dbpath = [databasePath UTF8String];
   
   if (sqlite3_open(dbpath, &amp;database) == SQLITE_OK) {
      NSString *querySQL = [NSString stringWithFormat:
      @"select name, department, year from studentsDetail where 
      regno=\"%@\"",registerNumber];
      const char *query_stmt = [querySQL UTF8String];
      NSMutableArray *resultArray = [[NSMutableArray alloc]init];
      
      if (sqlite3_prepare_v2(database, query_stmt, -1, &amp;statement, NULL) == SQLITE_OK) {
         if (sqlite3_step(statement) == SQLITE_ROW) {
            NSString *name = [[NSString alloc] initWithUTF8String:
            (const char *) sqlite3_column_text(statement, 0)];
            [resultArray addObject:name];
            
            NSString *department = [[NSString alloc] initWithUTF8String:
            (const char *) sqlite3_column_text(statement, 1)];
            [resultArray addObject:department];
            
            NSString *year = [[NSString alloc]initWithUTF8String:
            (const char *) sqlite3_column_text(statement, 2)];
            [resultArray addObject:year];
            return resultArray;
         } else {
            NSLog(@"Not found");
            return nil;
         }
         sqlite3_reset(statement);
      }
   }
   return nil;
}
</pre>
<p><b>Step 8</b> &minus; Update <b>ViewController.xib</b> file as follows &minus;</p>
<img src="/ios/images/sqlite_interface.jpg" alt="iOS Tutorial" />
<p><b>Step 9</b> &minus; Create IBOutlets for the above text fields.</p>
<p><b>Step 10</b> &minus; Create IBAction for the above buttons.</p>
<p><b>Step 11</b> &minus; Update <b>ViewController.h</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;
#import "DBManager.h"

@interface ViewController : UIViewController&lt;UITextFieldDelegate&gt; {
   IBOutlet UITextField *regNoTextField;
   IBOutlet UITextField *nameTextField;
   IBOutlet UITextField *departmentTextField;
   IBOutlet UITextField *yearTextField;
   IBOutlet UITextField *findByRegisterNumberTextField;
   IBOutlet UIScrollView *myScrollView;
}

-(IBAction)saveData:(id)sender;
-(IBAction)findData:(id)sender;
@end
</pre>
<p><b>Step 12</b> &minus; Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()
@end

@implementation ViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)
   nibBundleOrNil {
   self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
   
   if (self) {
      // Custom initialization
   }
   return self;
}

- (void)viewDidLoad {
   [super viewDidLoad];
   // Do any additional setup after loading the view from its nib.
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

-(IBAction)saveData:(id)sender {
   BOOL success = NO;
   NSString *alertString = @"Data Insertion failed";
   
   if (regNoTextField.text.length&gt;0 &amp;&amp;nameTextField.text.length&gt;0 &amp;&amp;
      departmentTextField.text.length&gt;0 &amp;&amp;yearTextField.text.length&gt;0 ) {
      success = [[DBManager getSharedInstance]saveData:
      regNoTextField.text name:nameTextField.text department:
      departmentTextField.text year:yearTextField.text];
   } else {
      alertString = @"Enter all fields";
   }     
   
   if (success == NO) {
      UIAlertView *alert = [[UIAlertView alloc]initWithTitle:
      alertString message:nil
      delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
      [alert show];
   }
}

-(IBAction)findData:(id)sender {
   NSArray *data = [[DBManager getSharedInstance]findByRegisterNumber:
   findByRegisterNumberTextField.text];
   
   if (data == nil) {
      UIAlertView *alert = [[UIAlertView alloc]initWithTitle:
      @"Data not found" message:nil delegate:nil cancelButtonTitle:
      @"OK" otherButtonTitles:nil];
      [alert show];
      regNoTextField.text = @"";
      nameTextField.text =@"";
      departmentTextField.text = @"";
      yearTextField.text =@"";
   } else {
      regNoTextField.text = findByRegisterNumberTextField.text;
      nameTextField.text =[data objectAtIndex:0];
      departmentTextField.text = [data objectAtIndex:1];
      yearTextField.text =[data objectAtIndex:2];
   }
}

#pragma mark - Text field delegate
-(void)textFieldDidBeginEditing:(UITextField *)textField {
   [myScrollView setFrame:CGRectMake(10, 50, 300, 200)];
   [myScrollView setContentSize:CGSizeMake(300, 350)];
}

-(void)textFieldDidEndEditing:(UITextField *)textField {
   [myScrollView setFrame:CGRectMake(10, 50, 300, 350)];

}

-(BOOL) textFieldShouldReturn:(UITextField *)textField {
   [textField resignFirstResponder];
   return YES;
}
@end
</pre>
<h2>Output</h2>
<p>When we run the application, we'll get the following output where we can add and find the student details &minus;</p>
<img src="/ios/images/sqlite_output.jpg" alt="iOS Tutorial" />
<h1>iOS - Sending Email</h1>
<p>We can send emails using the Email application of iOS device.</p>
<h2>Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a simple <b>View based application</b>.</p>
<p><b>Step 2</b> &minus; Select your project file, then select targets and then add <b>MessageUI.framework</b>.</p>
<p><b>Step 3</b> &minus; Add a button in <b>ViewController.xib</b> and create an action for sending email.</p>
<p><b>Step 4</b> &minus; Update <b>ViewController.h</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;
#import &lt;MessageUI/MessageUI.h&gt;

@interface ViewController : UIViewController&lt;MFMailComposeViewControllerDelegate&gt; {
   MFMailComposeViewController *mailComposer;
}

-(IBAction)sendMail:(id)sender;

@end
</pre>
<p><b>Step 5</b> &minus;  Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

-(void)sendMail:(id)sender {
   mailComposer = [[MFMailComposeViewController alloc]init];
   mailComposer.mailComposeDelegate = self;
   [mailComposer setSubject:@"Test mail"];
   [mailComposer setMessageBody:@"Testing message 
   for the test mail" isHTML:NO];
   [self presentModalViewController:mailComposer animated:YES];
}

#pragma mark - mail compose delegate
-(void)mailComposeController:(MFMailComposeViewController *)controller 
   didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error{
   
   if (result) {
      NSLog(@"Result : %d",result);
   }
   
   if (error) {
      NSLog(@"Error : %@",error);
   }
   
   [self dismissModalViewControllerAnimated:YES];
}
@end
</pre>
<h2>Output</h2>
<p>When we run the application, we'll get the following output &minus;</p>
<img src="/ios/images/sendemailoutput1.jpg" alt="iOS Tutorial" />
<p>On clicking Send Email, we will get the following output &minus;</p>
<img src="/ios/images/sendemailoutput2.jpg" alt="iOS Tutorial" />
<h1>iOS - Audio and Video</h1>
<p>Audio and video is quite common in the latest devices. It is supported in iOS with the help of <b>AVFoundation.framework</b> and <b>MediaPlayer.framework</b> respectively.</p>
<h2>Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a simple <b>View based application</b>.</p>
<p><b>Step 2</b> &minus; Select your project file, select targets, and then we should add <b>AVFoundation.framework</b> and <b>MediaPlayer.framework</b>.</p>
<p><b>Step 3</b> &minus;	Add two buttons in ViewController.xib and create an action for playing audio and video respectively.</p>
<p><b>Step 4</b> &minus;	Update <b>ViewController.h</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;
#import &lt;AVFoundation/AVFoundation.h&gt;
#import &lt;MediaPlayer/MediaPlayer.h&gt;

@interface ViewController : UIViewController {
   AVAudioPlayer *audioPlayer;
   MPMoviePlayerViewController *moviePlayer;
}
-(IBAction)playAudio:(id)sender;
-(IBAction)playVideo:(id)sender;
@end
</pre>
<p><b>Step 5</b> &minus; Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

-(IBAction)playAudio:(id)sender {
   NSString *path = [[NSBundle mainBundle]
   pathForResource:@"audioTest" ofType:@"mp3"];
   audioPlayer = [[AVAudioPlayer alloc]initWithContentsOfURL:
   [NSURL fileURLWithPath:path] error:NULL];
   [audioPlayer play];
}

-(IBAction)playVideo:(id)sender {
   NSString *path = [[NSBundle mainBundle]pathForResource:
   @"videoTest" ofType:@"mov"];
   moviePlayer = [[MPMoviePlayerViewController 
   alloc]initWithContentURL:[NSURL fileURLWithPath:path]];
   [self presentModalViewController:moviePlayer animated:NO];
}
@end
</pre>
<h2>Note</h2>
<p>We need to add audio and video files for ensuring that we get the expected output.</p>
<h2>Output</h2>
<p>When we run the application, we'll get the following output &minus;</p>
<img src="/ios/images/audiovideo_output.jpg" alt="iOS Tutorial" />
<p>When we click on play video, we will get an output as shown below &minus;</p>
<img src="/ios/images/video_output.jpg" alt="iOS Tutorial" />
<p>When we click play audio, you will hear the audio.</p>
<h1>iOS - File Handling</h1>
<p>File handling cannot be explained visually with the application and hence the key methods that are used for handling files are explained below. Note that the application bundle only has read permission and we won’t be able to modify the files. You can anyway modify the documents directory of your application.</p>
<h2>Methods used in File Handling</h2>
<p>The methods used for <b>accessing</b> and <b>manipulating</b> the files are discussed below. Here we have to replace FilePath1, FilePath2 and FilePath strings to our required full file paths to get the desired action.</p>
<h2>Check if a File Exists at a Path</h2>
<pre class="prettyprint notranslate">
NSFileManager *fileManager = [NSFileManager defaultManager];

//Get documents directory
NSArray *directoryPaths = NSSearchPathForDirectoriesInDomains
(NSDocumentDirectory, NSUserDomainMask, YES);
NSString *documentsDirectoryPath = [directoryPaths objectAtIndex:0];

if ([fileManager fileExistsAtPath:@""]==YES) {
   NSLog(@"File exists");
}
</pre>
<h2>Comparing Two File Contents</h2>
<pre class="prettyprint notranslate">
if ([fileManager contentsEqualAtPath:@"FilePath1" andPath:@" FilePath2"]) {
   NSLog(@"Same content");
}
</pre>
<h2>Check if Writable, Readable, and Executable</h2>
<pre class="prettyprint notranslate">
if ([fileManager isWritableFileAtPath:@"FilePath"]) {
   NSLog(@"isWritable");
}

if ([fileManager isReadableFileAtPath:@"FilePath"]) {
   NSLog(@"isReadable");
}

if ( [fileManager isExecutableFileAtPath:@"FilePath"]) {
   NSLog(@"is Executable");
}
</pre>
<h2>Move File</h2>
<pre class="prettyprint notranslate">
if([fileManager moveItemAtPath:@"FilePath1" 
   toPath:@"FilePath2" error:NULL]) {
   NSLog(@"Moved successfully");
}
</pre>
<h2>Copy File</h2>
<pre class="prettyprint notranslate">
if ([fileManager copyItemAtPath:@"FilePath1" 
   toPath:@"FilePath2"  error:NULL]) {
   NSLog(@"Copied successfully");
}
</pre>
<h2>Remove File</h2>
<pre class="prettyprint notranslate">
if ([fileManager removeItemAtPath:@"FilePath" error:NULL]) {
   NSLog(@"Removed successfully");
}
</pre>
<h2>Read File</h2>
<pre class="prettyprint notranslate">
NSData *data = [fileManager contentsAtPath:@"Path"];
</pre>
<h2>Write File</h2>
<pre class="prettyprint notranslate">
[fileManager createFileAtPath:@"" contents:data attributes:nil];
</pre>
<h1>iOS - Accessing Maps</h1>
<p>Maps are always helpful for us to locate places. Maps are integrated in iOS using the MapKit framework.</p>
<h2>Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a simple view-based application.</p>
<p><b>Step 2</b> &minus; Select your project file, then select targets and then add MapKit.framework.</p>
<p><b>Step 3</b> &minus; We should also add Corelocation.framework.</p>
<p><b>Step 4</b> &minus; Add a MapView to ViewController.xib and create an ibOutlet and name it as mapView.</p>
<p><b>Step 5</b> &minus; Create a new file by selecting File &rarr; New &rarr; File... &rarr; select Objective C class and click next.</p>
<p><b>Step 6</b> &minus; Name the class as MapAnnotation with "sub class of" as NSObject.</p>
<p><b>Step 7</b> &minus; Select create.</p>
<p><b>Step 8</b> &minus; Update MapAnnotation.h as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;Foundation/Foundation.h&gt;
#import &lt;MapKit/MapKit.h&gt;

@interface MapAnnotation : NSObject&lt;MKAnnotation&gt;
@property (nonatomic, strong) NSString *title;
@property (nonatomic, readwrite) CLLocationCoordinate2D coordinate;

- (id)initWithTitle:(NSString *)title andCoordinate:
   (CLLocationCoordinate2D)coordinate2d;

@end
</pre>
<p><b>Step 9</b> &minus; Update <b>MapAnnotation.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "MapAnnotation.h"

@implementation MapAnnotation
-(id)initWithTitle:(NSString *)title andCoordinate:
   (CLLocationCoordinate2D)coordinate2d {
  
   self.title = title;
   self.coordinate =coordinate2d;
   return self;
}
@end
</pre>
<p><b>Step 10</b> &minus; Update <b>ViewController.h</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;
#import &lt;MapKit/MapKit.h&gt;
#import &lt;CoreLocation/CoreLocation.h&gt;

@interface ViewController : UIViewController&lt;MKMapViewDelegate&gt; {
   MKMapView *mapView;
}
@end
</pre>
<p><b>Step 11</b> &minus; Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"
#import "MapAnnotation.h"

@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
   mapView = [[MKMapView alloc]initWithFrame:
   CGRectMake(10, 100, 300, 300)];
   mapView.delegate = self;
   mapView.centerCoordinate = CLLocationCoordinate2DMake(37.32, -122.03);
   mapView.mapType = MKMapTypeHybrid;
   CLLocationCoordinate2D location;
   location.latitude = (double) 37.332768;
   location.longitude = (double) -122.030039;
   
   // Add the annotation to our map view
   MapAnnotation *newAnnotation = [[MapAnnotation alloc]
   initWithTitle:@"Apple Head quaters" andCoordinate:location];
   [mapView addAnnotation:newAnnotation];
   CLLocationCoordinate2D location2;
   location2.latitude = (double) 37.35239;
   location2.longitude = (double) -122.025919;
   MapAnnotation *newAnnotation2 = [[MapAnnotation alloc] 
   initWithTitle:@"Test annotation" andCoordinate:location2];
   [mapView addAnnotation:newAnnotation2];
   [self.view addSubview:mapView];
}

// When a map annotation point is added, zoom to it (1500 range)
- (void)mapView:(MKMapView *)mv didAddAnnotationViews:(NSArray *)views {
   MKAnnotationView *annotationView = [views objectAtIndex:0];
   id &lt;MKAnnotation&gt; mp = [annotationView annotation];
   MKCoordinateRegion region = MKCoordinateRegionMakeWithDistance
   ([mp coordinate], 1500, 1500);
   [mv setRegion:region animated:YES];
   [mv selectAnnotation:mp animated:YES];
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}
@end
</pre>
<h2>Output</h2>
<p>When we run the application, we'll get the output as shown below &minus;</p>
<img src="/ios/images/mapoutput1.jpg" alt="iOS Tutorial" />
<p>When we scroll the map up, we will get the output as shown below &minus;</p>
<img src="/ios/images/mapoutput2.jpg" alt="iOS Tutorial" />
<h1>iOS - In-App Purchase</h1>
<p>In-App purchase is used to purchase additional content or upgrade features with respect to an application.</p>
<h2>Steps Involved</h2>
<p><b>Step 1</b> &minus; In iTunes connect, ensure that you have a <b>unique App ID</b> and when we create the application update with the <b>bundle ID</b> and code signing in Xcode with corresponding provisioning profile.</p>
<p><b>Step 2</b> &minus; Create a new application and update application information. You can know more about this in apple's <b>Add new apps</b> documentation.</p>
<p><b>Step 3</b> &minus; Add a new product for in-app purchase in <b>Manage In-App Purchase</b> of your application's page.</p>
<p><b>Step 4</b> &minus; Ensure you setup the bank details for your application. This needs to be setup for <b>In-App purchase</b> to work. Also, create a test user account using <b>Manage Users</b> option in iTunes connect page of your app.</p>
<p><b>Step 5</b> &minus; The next steps are related to handling code and creating UI for our In-App purchase.</p>
<p><b>Step 6</b> &minus; Create a <b>single view application</b> and enter the bundle identifier is the identifier specified in iTunes connect.</p>
<p><b>Step 7</b> &minus; Update the <b>ViewController.xib</b> as shown below &minus;</p>
<img src="/ios/images/inapppurchase_outputinterface.jpg" alt="iOS Tutorial" />
<p><b>Step 8</b> &minus; Create <b>IBOutlets</b> for the three labels and the button naming them as productTitleLabel, productDescriptionLabel, productPriceLabel and purchaseButton respectively.</p>
<p><b>Step 9</b> &minus; Select your project file, then select targets and then add <b>StoreKit.framework</b>.</p>
<p><b>Step 10</b> &minus; Update <b>ViewController.h</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;
#import &lt;StoreKit/StoreKit.h&gt;

@interface ViewController : UIViewController&lt;
SKProductsRequestDelegate,SKPaymentTransactionObserver&gt; {
   SKProductsRequest *productsRequest;
   NSArray *validProducts;
   UIActivityIndicatorView *activityIndicatorView;
   IBOutlet UILabel *productTitleLabel;
   IBOutlet UILabel *productDescriptionLabel;
   IBOutlet UILabel *productPriceLabel;
   IBOutlet UIButton *purchaseButton;
}

- (void)fetchAvailableProducts;
- (BOOL)canMakePurchases;
- (void)purchaseMyProduct:(SKProduct*)product;
- (IBAction)purchase:(id)sender;

@end
</pre>
<p><b>Step 11</b> &minus; Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"
#define kTutorialPointProductID 
@"com.tutorialPoints.testApp.testProduct"

@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
   
   // Adding activity indicator
   activityIndicatorView = [[UIActivityIndicatorView alloc]
   initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
   activityIndicatorView.center = self.view.center;
   [activityIndicatorView hidesWhenStopped];
   [self.view addSubview:activityIndicatorView];
   [activityIndicatorView startAnimating];
   
   //Hide purchase button initially
   purchaseButton.hidden = YES;
   [self fetchAvailableProducts];
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

-(void)fetchAvailableProducts {
   NSSet *productIdentifiers = [NSSet 
   setWithObjects:kTutorialPointProductID,nil];
   productsRequest = [[SKProductsRequest alloc] 
   initWithProductIdentifiers:productIdentifiers];
   productsRequest.delegate = self;
   [productsRequest start];
}

- (BOOL)canMakePurchases {
   return [SKPaymentQueue canMakePayments];
}

- (void)purchaseMyProduct:(SKProduct*)product {
   if ([self canMakePurchases]) {
      SKPayment *payment = [SKPayment paymentWithProduct:product];
      [[SKPaymentQueue defaultQueue] addTransactionObserver:self];
      [[SKPaymentQueue defaultQueue] addPayment:payment];
   } else {
      UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:
      @"Purchases are disabled in your device" message:nil delegate:
      self cancelButtonTitle:@"Ok" otherButtonTitles: nil];
      [alertView show];
   }
}
-(IBAction)purchase:(id)sender {
   [self purchaseMyProduct:[validProducts objectAtIndex:0]];
   purchaseButton.enabled = NO; 
}

#pragma mark StoreKit Delegate

-(void)paymentQueue:(SKPaymentQueue *)queue 
updatedTransactions:(NSArray *)transactions {
   for (SKPaymentTransaction *transaction in transactions) {
      switch (transaction.transactionState) {
         case SKPaymentTransactionStatePurchasing:
            NSLog(@"Purchasing");
         break;
         
         case SKPaymentTransactionStatePurchased:
            if ([transaction.payment.productIdentifier 
            isEqualToString:kTutorialPointProductID]) {
               NSLog(@"Purchased ");
               UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:
               @"Purchase is completed succesfully" message:nil delegate:
               self cancelButtonTitle:@"Ok" otherButtonTitles: nil];
               [alertView show];
            }
            [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
         break;
            
         case SKPaymentTransactionStateRestored:
            NSLog(@"Restored ");
            [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
         break;
            
         case SKPaymentTransactionStateFailed:
            NSLog(@"Purchase failed ");
         break
         default:
         break;
      }
   }
}

-(void)productsRequest:(SKProductsRequest *)request 
didReceiveResponse:(SKProductsResponse *)response {
   SKProduct *validProduct = nil;
   int count = [response.products count];
   
   if (count&gt;0) {
      validProducts = response.products;
      validProduct = [response.products objectAtIndex:0];
      
      if ([validProduct.productIdentifier 
         isEqualToString:kTutorialPointProductID]) {
         [productTitleLabel setText:[NSString stringWithFormat:
            @"Product Title: %@",validProduct.localizedTitle]];
         [productDescriptionLabel setText:[NSString stringWithFormat:
            @"Product Desc: %@",validProduct.localizedDescription]];
         [productPriceLabel setText:[NSString stringWithFormat:
            @"Product Price: %@",validProduct.price]];
      }
   } else {
      UIAlertView *tmp = [[UIAlertView alloc]
         initWithTitle:@"Not Available"
         message:@"No products to purchase"
         delegate:self
         cancelButtonTitle:nil
         otherButtonTitles:@"Ok", nil];
         [tmp show];
   }
   
   [activityIndicatorView stopAnimating];
   purchaseButton.hidden = NO;
}
@end
</pre>
<h2>Note</h2>
<p>You have to update kTutorialPointProductID to the productID you have created for your In-App Purchase. You can add more than one product by updating the productIdentifiers's NSSet in fetchAvailableProducts. Similary, handle the purchase related actions for product IDs you add.</p>
<h2>Output</h2>
<p>When we run the application, we'll get the following output &minus;</p>
<img src="/ios/images/inapppurchase_output1.jpg" alt="iOS Tutorial" />
<p>Ensure you had logged out of your account in the settings screen. On clicking the Initiate Purchase, select Use Existing Apple ID. Enter your valid test account username and password. You will be shown the following alert in a few seconds.</p>
<img src="/ios/images/inapppurchase_output2.jpg" alt="iOS Tutorial" />
<p>Once your product is purchased successfully, you will get the following alert. You can see relevant code for updating the application features where we show this alert.</p>
<img src="/ios/images/inapppurchase_output3.jpg" alt="iOS Tutorial" />
<h1>iOS - iAd Integration</h1>
<p>iAd is used to display ads, served by the apple server. iAd helps us in earning revenue from an iOS application.</p>
<h2>iAd Integration – Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a simple view-based application.</p>
<p><b>Step 2</b> &minus; Select your project file, then select targets and then add iAd.framework in choose frameworks.</p>
<p><b>Step 3</b> &minus; Update ViewController.h as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;
#import &lt;iAd/iAd.h&gt;

@interface ViewController : UIViewController&lt;ADBannerViewDelegate&gt; {
   ADBannerView *bannerView;
}
@end
</pre>
<p><b>Step 4</b> &minus; Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
   bannerView = [[ADBannerView alloc]initWithFrame:
   CGRectMake(0, 0, 320, 50)];
   
   // Optional to set background color to clear color
   [bannerView setBackgroundColor:[UIColor clearColor]];
   [self.view addSubview: bannerView];
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

#pragma mark - AdViewDelegates

-(void)bannerView:(ADBannerView *)banner 
   didFailToReceiveAdWithError:(NSError *)error {
   NSLog(@"Error loading");
}

-(void)bannerViewDidLoadAd:(ADBannerView *)banner {
   NSLog(@"Ad loaded");
}

-(void)bannerViewWillLoadAd:(ADBannerView *)banner {
   NSLog(@"Ad will load");
}

-(void)bannerViewActionDidFinish:(ADBannerView *)banner {
   NSLog(@"Ad did finish");
}
@end
</pre>
<h2>Output</h2>
<p>When we run the application, we'll get the following output &minus;</p>
<img src="/ios/images/iadoutput.jpg" alt="iOS Tutorial" />
<h1>iOS - GameKit</h1>
<p>Gamekit is a framework that provides leader board, achievements, and more features to an iOS application. In this tutorial, we will be explaining the steps involved in adding a leader board and updating the score.</p>
<h2>Steps Involved</h2>
<p><b>Step 1</b> &minus; In iTunes connect, ensure that you have a <b>unique App ID</b> and when we create the application update with the <b>bundle ID</b> and code signing in Xcode with corresponding provisioning profile.</p>
<p><b>Step 2</b> &minus; Create a new application and update application information. You can know more about this in apple-add new apps documentation.</p>
<p><b>Step 3</b> &minus; Setup a leader board in <b>Manage Game Center</b> of your application's page where add a single leaderboard and give <b>leaderboard ID</b> and score Type. Here we give leader board ID as tutorialsPoint.</p>
<p><b>Step 4</b> &minus; The next steps are related to handling code and creating UI for our application.</p>
<p><b>Step 5</b> &minus; Create a <b>single view application</b> and enter the <b>bundle identifier</b> is the identifier specified in <b>iTunes connect</b>.</p>
<p><b>Step 6</b> &minus; Update the ViewController.xib as shown below &minus;</p>
<img src="/ios/images/gamekitinterface.jpg" alt="iOS Tutorial" />
<p><b>Step 7</b> &minus; Select your project file, then select <b>targets</b> and then add <b>GameKit.framework</b>.</p>	
<p><b>Step 8</b> &minus; Create <b>IBActions</b> for the buttons we have added. </p>
<p><b>Step 9</b> &minus; Update the <b>ViewController.h</b> file as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;
#import &lt;GameKit/GameKit.h&gt;

@interface ViewController : UIViewController
&lt;GKLeaderboardViewControllerDelegate&gt;

-(IBAction)updateScore:(id)sender;
-(IBAction)showLeaderBoard:(id)sender;

@end
</pre>
<p><b>Step 10</b> &minus; Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
   if([GKLocalPlayer localPlayer].authenticated == NO) {
      [[GKLocalPlayer localPlayer] 
      authenticateWithCompletionHandler:^(NSError *error) {
         NSLog(@"Error%@",error);
      }];
   }    
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

- (void) updateScore: (int64_t) score 
   forLeaderboardID: (NSString*) category {
   GKScore *scoreObj = [[GKScore alloc]
   initWithCategory:category];
   scoreObj.value = score;
   scoreObj.context = 0;
   
   [scoreObj reportScoreWithCompletionHandler:^(NSError *error) {
      // Completion code can be added here
      UIAlertView *alert = [[UIAlertView alloc]
      initWithTitle:nil message:@"Score Updated Succesfully" 
      delegate:self cancelButtonTitle:@"Ok" otherButtonTitles: nil];
      [alert show];
   }];
}

-(IBAction)updateScore:(id)sender {
   [self updateScore:200 forLeaderboardID:@"tutorialsPoint"];
}

-(IBAction)showLeaderBoard:(id)sender {
   GKLeaderboardViewController *leaderboardViewController =
   [[GKLeaderboardViewController alloc] init];
   leaderboardViewController.leaderboardDelegate = self;
   [self presentModalViewController:
   leaderboardViewController animated:YES];
}

#pragma mark - Gamekit delegates
- (void)leaderboardViewControllerDidFinish:
(GKLeaderboardViewController *)viewController {
   [self dismissModalViewControllerAnimated:YES];
}
@end
</pre>
<h2>Output</h2>
<p>When we run the application, we'll get the following output &minus;</p>
<img src="/ios/images/gamekit_output1.jpg" alt="iOS Tutorial" />
<p>When we click "show leader board", we would get a screen similar to the following &minus;</p>
<img src="/ios/images/gamekit_output2.jpg" alt="iOS Tutorial" />
<p>When we click "update score", the score will be updated to our leader board and we will get an alert as shown below &minus;</p>
<img src="/ios/images/gamekit_output3.jpg" alt="iOS Tutorial" />
<h1>iOS - Storyboards</h1>
<p>Storyboards are introduced in iOS 5. When we use storyboards, our deployment target should be 5.0 or higher. Storyboards help us create all the screens of an application and interconnect the screens under one interface MainStoryboard.storyboard. It also helps in reducing the coding of pushing/presenting view controllers.</p>
<h2>Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a <b>single view application</b> and make sure that you select <b>storyboard</b> checkbox while creating the application.</p>
<p><b>Step 2</b> &minus; Select <b>MainStoryboard.storyboard</b> where you can find single view controller. Add one more view controllers and update the view controllers as shown below.</p>
<img src="/ios/images/storyboardinterface.jpg" alt="iOS Tutorial" />
<p><b>Step 3</b> &minus; Let us now connect both the view controllers. Right-click on the "show modal" button and drag it to the right view controller in the left side view controller as shown below.</p>
<img src="/ios/images/storyboardbuttonaction.jpg" alt="iOS Tutorial" />
<p><b>Step 4</b> &minus; Select modal from the three options displayed as shown below.</p>
<img src="/ios/images/storyboardbuttonactionmodal.jpg" alt="iOS Tutorial" />
<p><b>Step 5</b> &minus; Update <b>ViewController.h</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;UIKit/UIKit.h&gt;

@interface ViewController : UIViewController

-(IBAction)done:(UIStoryboardSegue *)seque;

@end
</pre>
<p><b>Step 6</b> &minus; Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];	
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

-(IBAction)done:(UIStoryboardSegue *)seque {
   [self.navigationController popViewControllerAnimated:YES];
}

@end
</pre>
<p><b>Step 7</b> &minus; Select the MainStoryboard.storyboard and right-click on the Exit button in the right side view controller, select done and connect with the back button as shown below.</p>
<img src="/ios/images/storyboardbuttonexitaction.jpg" alt="iOS Tutorial" />
<h2>Output</h2>
<p>When we run the application in an <b>iPhone</b> device, we'll get the following output &minus;</p>
<img src="/ios/images/storyboardoutput1.jpg" alt="iOS Tutorial" />
<p>When we select "show modal", we will get the following output &minus;</p>
<img src="/ios/images/storyboardoutput2.jpg" alt="iOS Tutorial" />
<h1>iOS - Auto Layouts</h1>
<p>Auto-layouts were introduced in <b>iOS 6.0.</b> When we use auto-layouts, our deployment target should be 6.0 and higher. Auto-layouts help us create interfaces that can be used for multiple orientations and multiple devices.</p>
<h2>Goal of Our Example</h2>
<p>We will add two buttons that will be placed in a certain distance from the center of the screen. We will also try to add a resizable text field that will be placed from a certain distance from above the buttons.</p>
<h2>Our Approach</h2>
<p>We will add a text field and two buttons in the code along with their constraints. The constraints of each UI Elements will be created and added to the super view. We will have to disable auto-resizing for each of the UI elements we add in order to get the desired result.</p>
<h2>Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a simple view-based application.</p>
<p><b>Step 2</b> &minus; We will edit only ViewController.m and it is as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()
@property (nonatomic, strong) UIButton *leftButton;
@property (nonatomic, strong) UIButton *rightButton;
@property (nonatomic, strong) UITextField *textfield;

@end
@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
   UIView *superview = self.view;

   /*1. Create leftButton and add to our view*/
   self.leftButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
   self.leftButton.translatesAutoresizingMaskIntoConstraints = NO;
   [self.leftButton setTitle:@"LeftButton" forState:UIControlStateNormal];
   [self.view addSubview:self.leftButton];

   /* 2. Constraint to position LeftButton's X*/
   NSLayoutConstraint *leftButtonXConstraint = [NSLayoutConstraint 
   constraintWithItem:self.leftButton attribute:NSLayoutAttributeCenterX 
   relatedBy:NSLayoutRelationGreaterThanOrEqual toItem:superview attribute:
   NSLayoutAttributeCenterX multiplier:1.0 constant:-60.0f];

   /* 3. Constraint to position LeftButton's Y*/
   NSLayoutConstraint *leftButtonYConstraint = [NSLayoutConstraint 
   constraintWithItem:self.leftButton attribute:NSLayoutAttributeCenterY 
   relatedBy:NSLayoutRelationEqual toItem:superview attribute:
   NSLayoutAttributeCenterY multiplier:1.0f constant:0.0f];

   /* 4. Add the constraints to button's superview*/
   [superview addConstraints:@[ leftButtonXConstraint,
   leftButtonYConstraint]];

   /*5. Create rightButton and add to our view*/
   self.rightButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
   self.rightButton.translatesAutoresizingMaskIntoConstraints = NO;
   [self.rightButton setTitle:@"RightButton" forState:UIControlStateNormal];
   [self.view addSubview:self.rightButton];

   /*6. Constraint to position RightButton's X*/
   NSLayoutConstraint *rightButtonXConstraint = [NSLayoutConstraint 
   constraintWithItem:self.rightButton attribute:NSLayoutAttributeCenterX 
   relatedBy:NSLayoutRelationGreaterThanOrEqual toItem:superview attribute:
   NSLayoutAttributeCenterX multiplier:1.0 constant:60.0f];

   /*7. Constraint to position RightButton's Y*/
   rightButtonXConstraint.priority = UILayoutPriorityDefaultHigh;
   NSLayoutConstraint *centerYMyConstraint = [NSLayoutConstraint 
   constraintWithItem:self.rightButton attribute:NSLayoutAttributeCenterY 
   relatedBy:NSLayoutRelationGreaterThanOrEqual toItem:superview attribute:
   NSLayoutAttributeCenterY multiplier:1.0f constant:0.0f];
   [superview addConstraints:@[centerYMyConstraint,
   rightButtonXConstraint]];

   //8. Add Text field
   self.textfield = [[UITextField alloc]initWithFrame:
   CGRectMake(0, 100, 100, 30)];
   self.textfield.borderStyle = UITextBorderStyleRoundedRect;
   self.textfield.translatesAutoresizingMaskIntoConstraints = NO;
   [self.view addSubview:self.textfield];

   //9. Text field Constraints
   NSLayoutConstraint *textFieldTopConstraint = [NSLayoutConstraint 
   constraintWithItem:self.textfield attribute:NSLayoutAttributeTop 
   relatedBy:NSLayoutRelationGreaterThanOrEqual toItem:superview 
   attribute:NSLayoutAttributeTop multiplier:1.0 constant:60.0f];
   NSLayoutConstraint *textFieldBottomConstraint = [NSLayoutConstraint 
   constraintWithItem:self.textfield attribute:NSLayoutAttributeTop 
   relatedBy:NSLayoutRelationGreaterThanOrEqual toItem:self.rightButton 
   attribute:NSLayoutAttributeTop multiplier:0.8 constant:-60.0f];
   NSLayoutConstraint *textFieldLeftConstraint = [NSLayoutConstraint 
   constraintWithItem:self.textfield attribute:NSLayoutAttributeLeft 
   relatedBy:NSLayoutRelationEqual toItem:superview attribute:
   NSLayoutAttributeLeft multiplier:1.0 constant:30.0f];
   NSLayoutConstraint *textFieldRightConstraint = [NSLayoutConstraint 
   constraintWithItem:self.textfield attribute:NSLayoutAttributeRight 
   relatedBy:NSLayoutRelationEqual toItem:superview attribute:
   NSLayoutAttributeRight multiplier:1.0 constant:-30.0f];
   [superview addConstraints:@[textFieldBottomConstraint ,
   textFieldLeftConstraint, textFieldRightConstraint, 
   textFieldTopConstraint]];
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}
@end
</pre>
<h2>Points to Note</h2>
<p>In steps marked 1, 5, and 8, we just programmatically added two buttons and a text field respectively.</p>
<p>In the rest of the steps, we created constraints and added those constraints to the respective super views, which are actually self-views. The constraints of one of the left buttons is as shown below &minus;</p>
<pre class="prettyprint notranslate">
NSLayoutConstraint *leftButtonXConstraint = [NSLayoutConstraint 
constraintWithItem:self.leftButton attribute:NSLayoutAttributeCenterX 
relatedBy:NSLayoutRelationGreaterThanOrEqual toItem:superview attribute:
NSLayoutAttributeCenterX multiplier:1.0 constant:-60.0f];
</pre>
<p>We have constraintWithItem and toItem which decide between which UI elements we are creating the constraint. The attribute decides on what basis the two elements are linked together. "relatedBy" decides how much effect the attributes have between the elements. Multiplier is the multiplication factor and  constant will be added to the multipler.</p>
<p>In the above example, the X of leftButton is always greater than or equal to -60 pixels with respect to the center of the super view. Similarly, other constraints are defined.</p>
<h2>Output</h2>
<p>When we run the application, we'll get the following output on the iPhone simulator &minus;</p>
<img src="/ios/images/autolayoutoutputiphoneportrait.jpg" alt="iOS Tutorial" />
<p>When we change the orientation of the simulator to landscape, we will get the following output &minus;</p>
<img src="/ios/images/autolayoutoutputiphonelandscape.jpg" alt="iOS Tutorial" />
<p>When we run the same application on iPhone 5 simulator, we will get the following output &minus;</p>
<img src="/ios/images/autolayoutoutputiphone5portrait.jpg" alt="iOS Tutorial" />
<p>When we change the orientation of the simulator to landscape, we will get the following output &minus;</p>
<img src="/ios/images/autolayoutoutputiphone5landscape.jpg" alt="iOS Tutorial" />
<h1>iOS - Twitter and Facebook</h1>
<p>Twitter has been integrated in <b>iOS 5.0</b> and Facebook has been integrated in <b>iOS 6.0</b>. Our tutorial focuses on using the classes provided by Apple and the deployment targets for Twitter and Facebook are iOS 5.0 and iOS 6.0 respectively.</p>
<h2>Steps Involved</h2>
<p><b>Step 1</b> &minus; Create a simple view-based application.</p>
<p><b>Step 2</b> &minus; Select your project file, then select <b>targets</b> and then add <b>Social.framewor</b>k and <b>Accounts.framework</b> in <b>choose frameworks</b>.</p>
<p><b>Step 3</b> &minus; Add two buttons named facebookPost and twitterPost and create ibActions for them.</p>
<p><b>Step 4</b> &minus; Update <b>ViewController.h</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import &lt;Social/Social.h&gt;
#import &lt;Accounts/Accounts.h&gt;
#import &lt;UIKit/UIKit.h&gt;

@interface ViewController : UIViewController

-(IBAction)twitterPost:(id)sender;
-(IBAction)facebookPost:(id)sender;

@end
</pre>
<p><b>Step 5</b> &minus; Update <b>ViewController.m</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
#import "ViewController.h"

@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
   [super viewDidLoad];
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
   // Dispose of any resources that can be recreated.
}

-(IBAction)facebookPost:(id)sender {
   SLComposeViewController *controller = [SLComposeViewController 
   composeViewControllerForServiceType:SLServiceTypeFacebook];
   SLComposeViewControllerCompletionHandler myBlock = 
      ^(SLComposeViewControllerResult result){
      
      if (result == SLComposeViewControllerResultCancelled) {
         NSLog(@"Cancelled");
      } else {
         NSLog(@"Done");
      }
      [controller dismissViewControllerAnimated:YES completion:nil];
   };
   controller.completionHandler = myBlock;

   //Adding the Text to the facebook post value from iOS
   [controller setInitialText:@"My test post"];

   //Adding the URL to the facebook post value from iOS
   [controller addURL:[NSURL URLWithString:@"http://www.test.com"]];

   //Adding the Text to the facebook post value from iOS
   [self presentViewController:controller animated:YES completion:nil];
}

-(IBAction)twitterPost:(id)sender {
   SLComposeViewController *tweetSheet = [SLComposeViewController 
   composeViewControllerForServiceType:SLServiceTypeTwitter];
   [tweetSheet setInitialText:@"My test tweet"];
   [self presentModalViewController:tweetSheet animated:YES];
}
@end
</pre>
<h2>Output</h2>
<p>When we run the application and click facebookPost, we will get the following output &minus;</p>
<img src="/ios/images/fbtwit_output1.jpg" alt="iOS Tutorial" />
<p>When we click twitterPost, we will get the following output &minus;</p>
<img src="/ios/images/fbtwit_output2.jpg" alt="iOS Tutorial" />
<h1>iOS - Memory Management</h1>
<p>Memory management in iOS was initially non-ARC (Automatic Reference Counting), where we have to retain and release the objects. Now, it supports ARC and we don't have to retain and release the objects. Xcode takes care of the job automatically in compile time.</p>
<h2>Memory Management Issues</h2>
<p>As per Apple documentation, the two major issues in memory management are &minus;</p>
<ul class="list">
<li><p>Freeing or overwriting data that is still in use. It causes memory corruption and typically results in your application crashing, or worse, corrupted user data.</p></li>
<li><p>Not freeing data that is no longer in use causes memory leaks. When allocated memory is not freed even though it is never going to be used again, it is known as memory leak. Leaks cause your application to use ever-increasing amounts of memory, which in turn may result in poor system performance or (in iOS) your application being terminated.</p></li>
</ul>
<h2>Memory Management Rules</h2>
<ul class="list">
<li><p>We own the objects we create, and we have to subsequently release them when they are no longer needed.</p></li>
<li><p>Use Retain to gain ownership of an object that you did not create. You have to release these objects too when they are not needed.</p></li>
<li><p>Don't release the objects that you don't own.</p></li>
</ul>
<h2>Handling Memory in ARC</h2>
<p>You don't need to use release and retain in ARC. So, all the view controller's objects will be released when the view controller is removed. Similarly, any object’s sub-objects will be released when they are released. Note that if other classes have a strong reference to an object of a class, then the whole class won't be released. So, it is recommended to use weak properties for delegates.</p>
<h2>Memory Management Tools</h2>
<p>We can analyze the usage of memory with the help of Xcode tool instruments. It includes tools such as Activity Monitor, Allocations, Leaks, Zombies, and so on.</p>
<h2>Steps for Analyzing Memory Allocations</h2>
<p><b>Step 1</b> &minus; Open an existing application.</p>
<p><b>Step 2</b> &minus; Select Product and then Profile as shown below.</p>
<img src="/ios/images/mm_profile.jpg" alt="iOS Tutorial" />
<p><b>Step 3</b> &minus; Select Allocations in the next screen shown below and select Profile.</p>
<img src="/ios/images/mm_profileselect.jpg" alt="iOS Tutorial" />
<p><b>Step 4</b> &minus; We will see the allocation of memory for different objects as shown below.</p>
<p><b>Step 5</b> &minus; You can switch between view controllers and check whether the memory is released properly.</p>
<img src="/ios/images/mm_instruments_allocations.jpg" alt="iOS Tutorial" />
<p><b>Step 6</b> &minus; Similarly, instead of Allocations, we can use Activity Monitor to see the overall memory allocated for the application.</p>
<img src="/ios/images/mm_instruments_activitymonitor.jpg" alt="iOS Tutorial" />
<p><b>Step 7</b> &minus; These tools help us access our memory consumption and locate the places where possible leaks have occurred.</p>
<h1>iOS - Application Debugging</h1>
<p>We may commit mistakes while developing an application, which can lead to different kinds of errors. In order to fix these errors or bugs, we need to debug the application.</p>
<h2>Selecting a Debugger</h2>
<p>Xcode has two debuggers namely, GDB and LLDB debuggers. GDB is selected by default. LLDB is a debugger that is a part of the LLVM open-source compiler project. You can change the debugger by "edit active schemes" option.</p>
<h2>How to Find Coding Errors?</h2>
<p>To locate coding-related errors, you need to build your application which will compile the code. In case the code contains errors, the compiler will display all the messages, errors, and warnings with their possible reasons.</p>
<p>You can click Product and then Analyze to locate possible issues in an application.</p>
<h2>Set Breakpoints</h2>
<p>Breakpoints help us to know the different states of our application objects, which help us identifying many flaws including logical issues. We just need to click over the line number to create a breakpoint. To remove a breakpoint, simply click and drag it out. The following screenshot shows how to set a breakpoint &minus;</p>
<img src="/ios/images/debug_breakpoint.jpg" alt="iOS Tutorial" />
<p>When we run the application and select the playVideo button, the application will pause at the line number where we had set the breakpoint. It allows us the time to analyze the state of the application. When the breakpoint is triggered, we will get an output as shown below.</p>
<img src="/ios/images/debug_breakpointstop.jpg" alt="iOS Tutorial" />
<p>You can easily identify which thread has triggered the breakpoint. In the bottom, you can see objects like self, sender and so on, which hold the values of the corresponding objects and we can expand some of these objects, and see what is the state of each of these objects.</p>
<p>To continue the application we will select the continue button (left most button), in the debug area shown below. The other options include step in, step out and step over.</p>
<img src="/ios/images/breakpointbar.jpg" alt="iOS Tutorial" />
<h2>Exception Breakpoint</h2>
<p>We also have exception breakpoints that trigger an application to stop at the location where the exception occurs. We can insert exception breakpoints by selecting the + button after selecting the debug navigator. You will get the following window.</p>
<img src="/ios/images/debug_exceptionbreakpoint.jpg" alt="iOS Tutorial" />
<p>Then we need to select Add Exception Breakpoint, which will display the following window.</p>
<img src="/ios/images/debug_exceptionbreakpointall.jpg" alt="iOS Tutorial" />
<p>You can collect more information on debugging and other Xcode features from <a rel="nofollow" href="https://developer.apple.com/xcode/" target="_blank" title="Xcode 4 user guide">Xcode 4 user guide</a>.</p>
<hr />
<div class="pre-btn">
<a href="/ios/ios_application_debugging.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="print-btn center">
<a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>
</div>
<div class="nxt-btn">
<a href="/ios/ios_useful_resources.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<hr />
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div class="bottomadtag">Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
<div class="row">
<div class="col-md-3" id="rightbar">
<div class="simple-ad">
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/ios/ios_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/facebookIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/ios/ios_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/twitterIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/ios/ios_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/linkedinIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/ios/ios_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/googlePlusIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/ios/ios_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/StumbleUponIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/ios/ios_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;">
<img src="/images/reddit.jpg" alt="img" />
</a>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="footer-copyright">
<div class="container">
<div class="row">
<div class="col-md-1">
<a href="index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="/scripts/img/logo-footer.png"> </a>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <nav id="sub-menu">
      <ul>
         <li><a href="/about/faq.htm">FAQ's</a></li>
         <li><a href="/about/about_privacy.htm#cookies">Cookies Policy</a></li>
         <li><a href="/about/contact_us.htm">Contact</a></li>
      </ul>
   </nav>
</div>
<div class="col-md-3 col-sm-12 col-xs-12">
<p>&copy; Copyright 2018. All Rights Reserved.</p>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <div class="news-group">
      <input type="text" class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}">
      <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span>
      <div id="newsresponse"></div>
   </div>
</div>
</div>
</div>
</div>
</div>
<!-- Libs -->
<script src="/theme/js/custom-min.js?v=7"></script>
<script src="https://www.google-analytics.com/urchin.js">
</script>
<script>
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script>
</div>
</body>
</html>
