<!DOCTYPE html>
<!--[if IE 8]><html class="ie ie8"> <![endif]-->
<!--[if IE 9]><html class="ie ie9"> <![endif]-->
<!--[if gt IE 9]><!-->	<html> <!--<![endif]-->
<head>
<!-- Basic -->
<meta charset="utf-8">
<title>Hibernate Quick Guide</title>
<meta name = "description" content="Hibernate Quick Guide - Learn Hibernate in simple and easy steps starting from basic to advanced concepts with examples including Overview, Architecture, Environment Setup, Configuration, Sessions, Object Relational Mapping (ORM), Annotations, Query Language, Criteria Queries, Native SQL, Caching, Batch Processing, Interceptors, Persistent Classes, Persistent Objects, Collections, Associations and Components, Hibernate Tools." />
<meta name = "keywords" content="Hibernate, Tutorial, Overview, Architecture, Environment Setup, Configuration, Sessions, Object Relational Mapping (ORM), Annotations, Query Language, Criteria Queries, Native SQL, Caching, Batch Processing, Interceptors, Persistent Classes, Persistent Objects, Collections, Associations and Components, Hibernate Tools." />
<base href="https://www.tutorialspoint.com/" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="website" />
<meta property="fb:app_id" content="471319149685276" />
<meta property="og:site_name" content="www.tutorialspoint.com" />
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="author" content="tutorialspoint.com">
<script type="text/javascript" src="https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2"></script>
<link rel="stylesheet" href="https://www.tutorialspoint.com/theme/css/style-min.css?v=3">
<script>
function openNav() {	
  document.getElementById("mySidenav").style.width = "250px";
  document.getElementById("right_obs").style.display = "block";
}
function closeNav() {
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
function close_obs_sidenav(){
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
</script>
<!-- Head Libs -->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]-->
<style>
select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }
.btnsbmt{ background: #bcae78 !important;}
ul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}
div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #bcae78 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #bcae78 !important;}
.submenu-item{ border-bottom: 2px solid #bcae78 !important; border-top: 2px solid #bcae78 !important }
.ace_scroller{overflow: auto!important;}
a.demo{font-family: "Open Sans",Arial,sans-serif; background:#bcae78; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}
a.demo:hover{opacity:.8}
</style>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
</head>
<body onload="prettyPrint()">
<div class="wrapLoader">
   <div class="imgLoader">
      <img  src="/images/loading-cg.gif" alt="" width="70" height="70" />
   </div>
</div>
<div id="right_obs" class="display-none" onclick="close_obs_sidenav()"></div>
<header>
   <div class="container">			
      <h1 class="logo">
      <a href="index.htm" title="tutorialspoint">
      <img alt="tutorialspoint" src="/hibernate/images/logo.png">
      </a>
      </h1>			
      <ul class="tp-inline-block pull-right" id="tp-head-icons">
        <li>
           <div class="tp-second-nav tp-display-none tp-pointer" onclick="openNav()">
              <i class="fa fa-th-large fa-lg"></i>
           </div>
        </li>
     </ul>
     <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull" style="top: 24px!important"> <i class="icon icon-bars"></i> </button>
      <nav>
         <ul class="nav nav-pills nav-top">
            <li><a href="/about/about_careers.htm" style="background: #fffb09; font-weight: bold;"><i class="icon icon-suitcase"></i> Jobs</a></li>
            <li> <a target="_blank" href="/programming_examples/"><i class="fa fa-cubes"></i> &nbsp;Examples</a> </li>
            <li> <a href="https://www.tutorialspoint.com/whiteboard.htm"><img src="theme/css/icons/image-editor.png" alt="Whiteboard" title="Whiteboard"> &nbsp;Whiteboard</a> </li>
            <li> <a href="https://www.tutorialspoint.com/netmeeting.php"><i class="fa-camera"></i> &nbsp;Net Meeting</a> </li>
            <li> <a href="/online_dev_tools.htm"> <i class="dev-tools-menu" style="opacity:.5"></i> Tools </a> </li>
            <li> <a href="/articles/index.php"><i class="icon icon-file-text-o"></i> &nbsp;Articles</a> </li>            
            <li class="top-icons">
              <ul class="social-icons">
              <li class="facebook"><a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook">Facebook</a></li>
              <li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
              <li class="twitter"><a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter">Twitter</a></li>
              <li class="linkedin"><a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin">Linkedin</a></li>
              <li class="youtube"><a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube">YouTube</a></li>
              </ul>
           </li>
         </ul>
      </nav>
    </div>
     <div class="sidenav" id="mySidenav">
     <div class="navbar nav-main">
      <div class="container">
         <nav class="nav-main mega-menu">
            <ul class="nav nav-pills nav-main" id="mainMenu">
               <li class="dropdown no-sub-menu"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li>   
               <li class="dropdown no-sub-menu"><a class="dropdown" href="/questions/index.php"><i class="fa fa-send"></i> Q/A </a> </li>
               <li class="dropdown"><a class="dropdown" href="tutorialslibrary.htm"><span class="tut-lib"> Library </span></a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="videotutorials/index.htm"><i class="fa-toggle-right"></i> Videos </a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="tutor_connect/index.php"><i class="fa-user"> </i> Tutors</a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://store.tutorialspoint.com/"><i class="fa-usd"></i> Store </a> </li>
               <li class="dropdown no-sub-menu">
                  <div class="searchform-popup">
                     <input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
                     <div class="magnifying-glass"><i class="icon-search"></i> Search </div>
                 </div>
               </li>
            </ul>
         </nav>
        </div>
      </div>	
     </div>	
   </div>	
</header>
<div style="clear:both;"></div>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-2">
<aside class="sidebar">
<style>
.ts{
  vertical-align:middle !important;
  text-align:center !important;   
}
</style>
<div class="mini-logo">
<img src="/hibernate/images/hibernate-mini-logo.jpg" alt="Hibernate Tutorial" />
</div>
<ul class="nav nav-list primary left-menu" >
<li class="heading">Hibernate Tutorial</li>
<li><a href="/hibernate/index.htm">Hibernate - Home</a></li>
<li><a href="/hibernate/orm_overview.htm">ORM - Overview</a></li>
<li><a href="/hibernate/hibernate_overview.htm">Hibernate - Overview</a></li>
<li><a href="/hibernate/hibernate_architecture.htm">Hibernate - Architecture</a></li>
<li><a href="/hibernate/hibernate_environment.htm">Hibernate - Environment</a></li>
<li><a href="/hibernate/hibernate_configuration.htm">Hibernate - Configuration</a></li>
<li><a href="/hibernate/hibernate_sessions.htm">Hibernate - Sessions</a></li>
<li><a href="/hibernate/hibernate_persistent_classes.htm">Hibernate - Persistent Class</a></li>
<li><a href="/hibernate/hibernate_mapping_files.htm">Hibernate - Mapping Files</a></li>
<li><a href="/hibernate/hibernate_mapping_types.htm">Hibernate - Mapping Types</a></li>
<li><a href="/hibernate/hibernate_examples.htm">Hibernate - Examples</a></li>
<li><a href="/hibernate/hibernate_or_mappings.htm">Hibernate - O/R Mappings</a></li>
<li><a href="/hibernate/hibernate_annotations.htm">Hibernate - Annotations</a></li>
<li><a href="/hibernate/hibernate_query_language.htm">Hibernate - Query Language</a></li>
<li><a href="/hibernate/hibernate_criteria_queries.htm">Hibernate - Criteria Queries</a></li>
<li><a href="/hibernate/hibernate_native_sql.htm">Hibernate - Native SQL</a></li>
<li><a href="/hibernate/hibernate_caching.htm">Hibernate - Caching</a></li>
<li><a href="/hibernate/hibernate_batch_processing.htm">Hibernate - Batch Processing</a></li>
<li><a href="/hibernate/hibernate_interceptors.htm">Hibernate - Interceptors</a></li>
</ul>
<ul class="nav nav-list primary left-menu" >
<li class="heading">Hibernate Useful Resources</li>
<li><a href="/hibernate/hibernate_questions_answers.htm">Hibernate - Questions and Answers</a></li>
<li><a href="/hibernate/hibernate_quick_guide.htm">Hibernate - Quick Guide</a></li>
<li><a href="/hibernate/hibernate_useful_resources.htm">Hibernate - Useful Resources</a></li>
<li><a href="/hibernate/hibernate_discussion.htm">Hibernate - Discussion</a></li>
</ul>
<ul class="nav nav-list primary push-bottom left-menu special">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
 </aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>Hibernate - Quick Guide</h1>
<hr />
<div style="padding-bottom:5px;padding-left:10px;text-align: center;">Advertisements</div>
<div style="text-align: center;">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="/hibernate/hibernate_questions_answers.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/hibernate/hibernate_useful_resources.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr />
<h1>Hibernate - ORM Overview</h1>
<h2>What is JDBC?</h2>
<p>JDBC stands for <b>Java Database Connectivity</b>. It provides a set of Java API for accessing the relational databases from Java program. These Java APIs enables Java programs to execute SQL statements and interact with any SQL compliant database.</p>
<p>JDBC provides a flexible architecture to write a database independent application that can run on different platforms and interact with different DBMS without any modification.</p>
<h2>Pros and Cons of JDBC</h2>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="text-align:center;">Pros of JDBC</th>
<th style="width:53%;text-align:center;">Cons of JDBC</th>
</tr>
<tr>
<td>
<p>Clean and simple SQL processing</p>
<p>Good performance with large data</p>
<p>Very good for small applications</p>
<p>Simple syntax so easy to learn</p>
</td>
<td>
<p>Complex if it is used in large projects</p>
<p>Large programming overhead</p>
<p>No encapsulation</p>
<p>Hard to implement MVC concept</p>
<p>Query is DBMS specific</p>
</td>
</tr>
</table>
<h2>Why Object Relational Mapping (ORM)?</h2>
<p>When we work with an object-oriented system, there is a mismatch between the object model and the relational database. RDBMSs represent data in a tabular format whereas object-oriented languages, such as Java or C# represent it as an interconnected graph of objects.</p>
<p>Consider the following Java Class with proper constructors and associated public function &minus;</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String first_name; 
   private String last_name;   
   private int salary;  

   public Employee() {}
   public Employee(String fname, String lname, int salary) {
      this.first_name = fname;
      this.last_name = lname;
      this.salary = salary;
   }
   
   public int getId() {
      return id;
   }
   
   public String getFirstName() {
      return first_name;
   }
   
   public String getLastName() {
      return last_name;
   }
   
   public int getSalary() {
      return salary;
   }
}
</pre>
<p>Consider the above objects are to be stored and retrieved into the following RDBMS table &minus;</p>
<pre class="prettyprint notranslate">
create table EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>First problem, what if we need to modify the design of our database after having developed a few pages or our application? Second, loading and storing objects in a relational database exposes us to the following five mismatch problems &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Mismatch &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Granularity</b></p>
<p>Sometimes you will have an object model, which has more classes than the number of corresponding tables in the database.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Inheritance</b></p>
<p>RDBMSs do not define anything similar to Inheritance, which is a natural paradigm in object-oriented programming languages.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Identity</b></p>
<p>An RDBMS defines exactly one notion of 'sameness': the primary key. Java, however, defines both object identity (a==b) and object equality (a.equals(b)).</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Associations</b></p>
<p>Object-oriented languages represent associations using object references whereas an RDBMS represents an association as a foreign key column.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Navigation</b></p>
<p>The ways you access objects in Java and in RDBMS are fundamentally different.</p>
</td>
</tr>
</table>
<p>The <b>O</b>bject-<b>R</b>elational <b>M</b>apping (ORM) is the solution to handle all the above impedance mismatches.</p>
<h2>What is ORM?</h2>
<p>ORM stands for <b>O</b>bject-<b>R</b>elational <b>M</b>apping (ORM) is a programming technique for converting data between relational databases and object oriented programming languages such as Java, C#, etc.</p>
<p>An ORM system has the following advantages over plain JDBC &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Advantages</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Let’s business code access objects rather than DB tables.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Hides details of SQL queries from OO logic.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Based on JDBC 'under the hood.'</td>
</tr>
<tr>
<td class="ts">4</td>
<td>No need to deal with the database implementation.</td>
</tr>
<tr>
<td class="ts">5</td>
<td>Entities based on business concepts rather than database structure.</td>
</tr>
<tr>
<td class="ts">6</td>
<td>Transaction management and automatic key generation.</td>
</tr>
<tr>
<td class="ts">7</td>
<td>Fast development of application.</td>
</tr>
</table>
<p>An ORM solution consists of the following four entities &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Solutions</th>
</tr>
<tr>
<td class="ts">1</td>
<td>An API to perform basic CRUD operations on objects of persistent classes.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>A language or API to specify queries that refer to classes and properties of classes.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>A configurable facility for specifying mapping metadata.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>A technique to interact with transactional objects to perform dirty checking, lazy association fetching, and other optimization functions.</td>
</tr>
</table>
<h2>Java ORM Frameworks</h2>
<p>There are several persistent frameworks and ORM options in Java. A persistent framework is an ORM service that stores and retrieves objects into a relational database.</p>
<ul class="list">
<li>Enterprise JavaBeans Entity Beans</li>
<li>Java Data Objects</li>
<li>Castor</li>
<li>TopLink</li>
<li>Spring DAO</li>
<li>Hibernate</li>
<li>And many more</li>
</ul>
<h1>Hibernate - Overview</h1>
<p>Hibernate is an <b>O</b>bject-<b>R</b>elational <b>M</b>apping (ORM) solution for JAVA. It is an open source persistent framework created by Gavin King in 2001. It is a powerful, high performance Object-Relational Persistence and Query service for any Java Application.</p>
<p>Hibernate maps Java classes to database tables and from Java data types to SQL data types and relieves the developer from 95% of common data persistence related programming tasks.</p>
<p>Hibernate sits between traditional Java objects and database server to handle all the works in persisting those objects based on the appropriate O/R mechanisms and patterns.</p>
<img src="/hibernate/images/hibernate_position.jpg" alt="Hibernate Position" />
<h2>Hibernate Advantages</h2>
<ul class="list">
<li><p>Hibernate takes care of mapping Java classes to database tables using XML files and without writing any line of code.</p></li>
<li><p>Provides simple APIs for storing and retrieving Java objects directly to and from the database.</p></li>
<li><p>If there is change in the database or in any table, then you need to change the XML file properties only.</p></li>
<li><p>Abstracts away the unfamiliar SQL types and provides a way to work around familiar Java Objects.</p></li>
<li><p>Hibernate does not require an application server to operate.</p></li>
<li><p>Manipulates Complex associations of objects of your database.</p></li>
<li><p>Minimizes database access with smart fetching strategies.</p></li>
<li><p>Provides simple querying of data.</p></li>
</ul>
<h2>Supported Databases</h2>
<p>Hibernate supports almost all the major RDBMS. Following is a list of few of the database engines supported by Hibernate &minus;</p>
<ul class="list">
<li>HSQL Database Engine</li>
<li>DB2/NT</li>
<li>MySQL</li>
<li>PostgreSQL</li>
<li>FrontBase</li>
<li>Oracle</li>
<li>Microsoft SQL Server Database</li>
<li>Sybase SQL Server</li>
<li>Informix Dynamic Server</li>
</ul>
<h2>Supported Technologies</h2>
<p>Hibernate supports a variety of other technologies, including &minus;</p>
<ul class="list">
<li>XDoclet Spring</li>
<li>J2EE</li>
<li>Eclipse plug-ins</li>
<li>Maven</li>
</ul>
<h1>Hibernate - Architecture</h1>
<p>Hibernate has a layered architecture which helps the user to operate without having to know the underlying APIs. Hibernate makes use of the database and configuration data to provide persistence services (and persistent objects) to the application.</p>
<p>Following is a very high level view of the Hibernate Application Architecture.</p>
<img src="/hibernate/images/hibernate_high_level.jpg" alt="Hibernate High Level View" />
<p>Following is a detailed view of the Hibernate Application Architecture with its important core classes.</p>
<img src="/hibernate/images/hibernate_architecture.jpg" alt="Hibernate Architecture" />
<p>Hibernate uses various existing Java APIs, like JDBC, Java Transaction API(JTA), and Java Naming and Directory Interface (JNDI). JDBC provides a rudimentary level of abstraction of functionality common to relational databases, allowing almost any database with a JDBC driver to be supported by Hibernate. JNDI and JTA allow Hibernate to be integrated with J2EE application servers.</p>
<p>Following section gives brief description of each of the class objects involved in Hibernate Application Architecture.</p>
<h2>Configuration Object</h2>
<p>The Configuration object is the first Hibernate object you create in any Hibernate application. It is usually created only once during application initialization. It represents a configuration or properties file required by the Hibernate.</p>
<p>The Configuration object provides two keys components &minus;</p>
<ul class="list">
<li><p><b>Database Connection</b> &minus; This is handled through one or more configuration files supported by Hibernate. These files are <b>hibernate.properties</b> and <b>hibernate.cfg.xml</b>.</p></li>
<li><p><b>Class Mapping Setup</b> &minus; This component creates the connection between the Java classes and database tables.</p></li>
</ul>
<h2>SessionFactory Object</h2>
<p>Configuration object is used to create a SessionFactory object which in turn configures Hibernate for the application using the supplied configuration file and allows for a Session object to be instantiated. The SessionFactory is a thread safe object and used by all the threads of an application.</p>
<p>The SessionFactory is a heavyweight object; it is usually created during application start up and kept for later use. You would need one SessionFactory object per database using a separate configuration file. So, if you are using multiple databases, then you would have to create multiple SessionFactory objects.</p>
<h2>Session Object</h2>
<p>A Session is used to get a physical connection with a database. The Session object is lightweight and designed to be instantiated each time an interaction is needed with the database. Persistent objects are saved and retrieved through a Session object.</p>
<p>The session objects should not be kept open for a long time because they are not usually thread safe and they should be created and destroyed them as needed.</p>
<h2>Transaction Object</h2>
<p>A Transaction represents a unit of work with the database and most of the RDBMS supports transaction functionality. Transactions in Hibernate are handled by an underlying transaction manager and transaction (from JDBC or JTA).</p>
<p>This is an optional object and Hibernate applications may choose not to use this interface, instead managing transactions in their own application code.</p>
<h2>Query  Object</h2>
<p>Query objects use SQL or Hibernate Query Language (HQL) string to retrieve data from the database and create objects. A Query instance is used to bind query parameters, limit the number of results returned by the query, and finally to execute the query.</p>
<h2>Criteria  Object</h2>
<p>Criteria objects are used to create and execute object oriented criteria queries to retrieve objects.</p>
<h1>Hibernate - Environment</h1>
<p>This chapter explains how to install Hibernate and other associated packages to prepare an environment for the Hibernate applications. We will work with MySQL database to experiment with Hibernate examples, so make sure you already have a setup for MySQL database. For more detail on MySQL, you can check our <a target="_blank" href="/mysql/index.htm">MySQL Tutorial</a>.</p>
<h2>Downloading Hibernate</h2>
<p>It is assumed that you already have the latest version of Java installed on your system. Following are the simple steps to download and install Hibernate on your system &minus;</p>
<ul class="list">
<li><p>Make a choice whether you want to install Hibernate on Windows, or Unix and then proceed to the next step to download .zip file for windows and .tz file for Unix.</p></li>
<li><p>Download the latest version of Hibernate from <a target="_blank" rel="nofollow" href="http://www.hibernate.org/downloads">http://www.hibernate.org/downloads</a>.</p></li>
<li><p>At the time of writing this tutorial, I downloaded <b>hibernate-distribution3.6.4.Final</b> and when you unzip the downloaded file, it will give you directory structure as shown in the following image</p></li>
</ul>
<img src="/hibernate/images/hibernate_directories.jpg" alt="Hibernate Directories" />
<h2>Installing Hibernate</h2>
<p>Once you downloaded and unzipped the latest version of the Hibernate Installation file, you need to perform following two simple steps. Make sure you are setting your CLASSPATH variable properly otherwise you will face problem while compiling your application.</p>
<ul class="list">
<li><p>Now, copy all the library files from <b>/lib</b> into your CLASSPATH, and change your classpath variable to include all the JARs &minus;</p></li>
<li><p>Finally, copy <b>hibernate3.jar</b> file into your CLASSPATH. This file lies in the root directory of the installation and is the primary JAR that Hibernate needs to do its work.</p></li>
</ul>
<h2>Hibernate Prerequisites</h2>
<p>Following is the list of the packages/libraries required by Hibernate and you should install them before starting with Hibernate. To install these packages, you will have to copy library files from <b>/lib</b> into your CLASSPATH, and change your CLASSPATH variable accordingly.</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Packages/Libraries</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>dom4j</b></p>
<p>XML parsing <a target="_blank" rel="nofollow" href="http://www.dom4j.org/">www.dom4j.org/</a></p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Xalan</b></p>
<p>XSLT Processor <a target="_blank" rel="nofollow" href="https://xml.apache.org/xalan-j/">https://xml.apache.org/xalan-j/</a></p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Xerces</b></p>
<p>The Xerces Java Parser <a target="_blank" rel="nofollow" href="https://xml.apache.org/xerces-j/">https://xml.apache.org/xerces-j/</a></p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>cglib</b></p>
<p>Appropriate changes to Java classes at runtime <a target="_blank" rel="nofollow" href="http://cglib.sourceforge.net/">http://cglib.sourceforge.net/</a></p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>log4j</b></p>
<p>Logging Faremwork <a target="_blank" rel="nofollow" href="https://logging.apache.org/log4j">https://logging.apache.org/log4j</a></p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>Commons</b></p>
<p>Logging, Email etc. <a target="_blank" rel="nofollow" href="https://jakarta.apache.org/commons">https://jakarta.apache.org/commons</a></p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>SLF4J</b></p>
<p>Logging Facade for Java <a target="_blank" rel="nofollow" href="https://www.slf4j.org/download.html">https://www.slf4j.org</a></p>
</td>
</tr>
</table>
<h1>Hibernate - Configuration</h1>
<p>Hibernate requires to know in advance — where to find the mapping information that defines how your Java classes relate to the database tables. Hibernate also requires a set of configuration settings related to database and other related parameters. All such information is usually supplied as a standard Java properties file called <b>hibernate.properties</b>, or as an XML file named <b>hibernate.cfg.xml</b>.</p>
<p>I will consider XML formatted file <b>hibernate.cfg.xml</b> to specify required Hibernate properties in my examples. Most of the properties take their default values and it is not required to specify them in the property file unless it is really required. This file is kept in the root directory of your application's classpath.</p>
<h2>Hibernate Properties</h2>
<p>Following is the list of important properties, you will be required to configure for a databases in a standalone situation &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Properties &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>hibernate.dialect</b></p>
<p>This property makes Hibernate generate the appropriate SQL for the chosen database.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>hibernate.connection.driver_class</b></p>
<p>The JDBC driver class.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>hibernate.connection.url</b></p> 
<p>The JDBC URL to the database instance.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>hibernate.connection.username</b></p> 
<p>The database username.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>hibernate.connection.password</b></p>
<p>The database password.</p>
</td>
 </tr>
<tr>
<td class="ts">6</td>
<td><p><b>hibernate.connection.pool_size</b></p> 
<p>Limits the number of connections waiting in the Hibernate database connection pool.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>hibernate.connection.autocommit</b></p> 
<p>Allows autocommit mode to be used for the JDBC connection.</p>
</td>
</tr>
</table>
<p>If you are using a database along with an application server and JNDI, then you would have to configure the following properties &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Properties &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>hibernate.connection.datasource</b></p> 
<p>The JNDI name defined in the application server context, which you are using for the application.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>hibernate.jndi.class</b></p> 
<p>The InitialContext class for JNDI.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>hibernate.jndi.&lt;JNDIpropertyname&gt;</b></p> 
<p>Passes any JNDI property you like to the JNDI <i>InitialContext</i>.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>hibernate.jndi.url</b></p> 
<p>Provides the URL for JNDI.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>hibernate.connection.username</b></p> 
<p>The database username.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>hibernate.connection.password</b></p> 
<p>The database password.</p>
</td>
</tr>
</table>
<h2>Hibernate with MySQL Database</h2>
<p>MySQL is one of the most popular open-source database systems available today. Let us create <b>hibernate.cfg.xml</b> configuration file and place it in the root of your application's classpath. You will have to make sure that you have <b>testdb</b> database available in your MySQL database and you have a user <b>test</b> available to access the database.</p>
<p>The XML configuration file must conform to the Hibernate 3 Configuration DTD, which is available at <a href="http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd" target="_blank" rel="nofollow">http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd</a>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;!DOCTYPE hibernate-configuration SYSTEM 
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;
&lt;hibernate-configuration&gt;
   &lt;session-factory&gt;
   
      &lt;property name = "hibernate.dialect"&gt;
         org.hibernate.dialect.MySQLDialect
      &lt;/property&gt;
      
      &lt;property name = "hibernate.connection.driver_class"&gt;
         com.mysql.jdbc.Driver
      &lt;/property&gt;
      
      &lt;!-- Assume test is the database name --&gt;
      
      &lt;property name = "hibernate.connection.url"&gt;
         jdbc:mysql://localhost/test
      &lt;/property&gt;
      
      &lt;property name = "hibernate.connection.username"&gt;
         root
      &lt;/property&gt;
      
      &lt;property name = "hibernate.connection.password"&gt;
         root123
      &lt;/property&gt;
      
      &lt;!-- List of XML mapping files --&gt;
      &lt;mapping resource = "Employee.hbm.xml"/&gt;
      
   &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;
</pre>
<p>The above configuration file includes <b>&lt;mapping&gt;</b> tags, which are related to hibernatemapping file and we will see in next chapter what exactly a hibernate mapping file is and how and why do we use it?</p>
<p>Following is the list of various important databases dialect property type &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Database &amp; Dialect Property</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>DB2</b></p>
<p>org.hibernate.dialect.DB2Dialect</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>HSQLDB</b></p>
<p>org.hibernate.dialect.HSQLDialect</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>HypersonicSQL</b></p>
<p>org.hibernate.dialect.HSQLDialect</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Informix</b></p>
<p>org.hibernate.dialect.InformixDialect</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Ingres</b></p>
<p>org.hibernate.dialect.IngresDialect</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Interbase</b></p>
<p>org.hibernate.dialect.InterbaseDialect</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Microsoft SQL Server 2000</b></p>
<p>org.hibernate.dialect.SQLServerDialect</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Microsoft SQL Server 2005</b></p>
<p>org.hibernate.dialect.SQLServer2005Dialect</p>
</td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<p><b>Microsoft SQL Server 2008</b></p>
<p>org.hibernate.dialect.SQLServer2008Dialect</p>
</td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<p><b>MySQL</b></p>
<p>org.hibernate.dialect.MySQLDialect</p>
</td>
</tr>
<tr>
<td class="ts">11</td>
<td>
<p><b>Oracle (any version)</b></p>
<p>org.hibernate.dialect.OracleDialect</p>
</td>
</tr>
<tr>
<td class="ts">12</td>
<td>
<p><b>Oracle 11g</b></p>
<p>org.hibernate.dialect.Oracle10gDialect</p>
</td>
</tr>
<tr>
<td class="ts">13</td>
<td>
<p><b>Oracle 10g</b></p>
<p>org.hibernate.dialect.Oracle10gDialect</p>
</td>
</tr>
<tr>
<td class="ts">14</td>
<td>
<p><b>Oracle 9i</b></p>
<p>org.hibernate.dialect.Oracle9iDialect</p>
</td>
</tr>
<tr>
<td class="ts">15</td>
<td>
<p><b>PostgreSQL</b></p>
<p>org.hibernate.dialect.PostgreSQLDialect</p>
</td>
</tr>
<tr>
<td class="ts">16</td>
<td>
<p><b>Progress</b></p>
<p>org.hibernate.dialect.ProgressDialect</p>
</td>
</tr>
<tr>
<td class="ts">17</td>
<td>
<p><b>SAP DB</b></p>
<p>org.hibernate.dialect.SAPDBDialect</p>
</td>
</tr>
<tr>
<td class="ts">18</td>
<td>
<p><b>Sybase</b></p>
<p>org.hibernate.dialect.SybaseDialect</p>
</td>
</tr>
<tr>
<td class="ts">19</td>
<td>
<p><b>Sybase Anywhere</b></p>
<p>org.hibernate.dialect.SybaseAnywhereDialect</p>
</td>
</tr>
</table>
<h1>Hibernate - Sessions</h1>
<p>A Session is used to get a physical connection with a database. The Session object is lightweight and designed to be instantiated each time an interaction is needed with the database. Persistent objects are saved and retrieved through a Session object.</p>
<p>The session objects should not be kept open for a long time because they are not usually thread safe and they should be created and destroyed them as needed. The main function of the Session is to offer, create, read, and delete operations for instances of mapped entity classes.</p>
<p>Instances may exist in one of the following three states at a given point in time &minus;</p>
<ul class="list">
<li><p><b>transient</b> &minus; A new instance of a persistent class, which is not associated with a Session and has no representation in the database and no identifier value is considered transient by Hibernate.</p></li>
<li><p><b>persistent</b> &minus; You can make a transient instance persistent by associating it with a Session. A persistent instance has a representation in the database, an identifier value and is associated with a Session.</p></li>
<li><p><b>detached</b> &minus; Once we close the Hibernate Session, the persistent instance will become a detached instance.</p></li>
</ul>
<p>A Session instance is serializable if its persistent classes are serializable. A typical transaction should use the following idiom &minus;</p>
<pre class="prettyprint notranslate">
Session session = factory.openSession();
Transaction tx = null;

try {
   tx = session.beginTransaction();
   // do some work
   ...
   tx.commit();
}

catch (Exception e) {
   if (tx!=null) tx.rollback();
   e.printStackTrace(); 
} finally {
   session.close();
}
</pre>
<p>If the Session throws an exception, the transaction must be rolled back and the session must be discarded.</p>
<h2>Session Interface Methods</h2>
<p>There are number of methods provided by the <b>Session</b> interface, but I'm going to list down a few important methods only, which we will use in this tutorial. You can check Hibernate documentation for a complete list of methods associated with <b>Session</b> and <b>SessionFactory</b>.</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Session Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Transaction beginTransaction()</b></p>
<p>Begin a unit of work and return the associated Transaction object.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>void cancelQuery()</b></p>
<p>Cancel the execution of the current query.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>void clear()</b></p>
<p>Completely clear the session.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Connection close()</b></p>
<p>End the session by releasing the JDBC connection and cleaning up.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Criteria createCriteria(Class persistentClass)</b></p>
<p>Create a new Criteria instance, for the given entity class, or a superclass of an entity class.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Criteria createCriteria(String entityName)</b></p>
<p>Create a new Criteria instance, for the given entity name.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Serializable getIdentifier(Object object)</b></p>
<p>Return the identifier value of the given entity as associated with this session.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Query createFilter(Object collection, String queryString)</b></p>
<p>Create a new instance of Query for the given collection and filter string.</p>
</td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<p><b>Query createQuery(String queryString)</b></p>
<p>Create a new instance of Query for the given HQL query string.</p>
</td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<p><b>SQLQuery createSQLQuery(String queryString)</b></p>
<p>Create a new instance of SQLQuery for the given SQL query string.</p>
</td>
</tr>
<tr>
<td class="ts">11</td>
<td>
<p><b>void delete(Object object)</b></p>
<p>Remove a persistent instance from the datastore.</p>
</td>
</tr>
<tr>
<td class="ts">12</td>
<td>
<p><b>void delete(String entityName, Object object)</b></p>
<p>Remove a persistent instance from the datastore.</p>
</td>
</tr>
<tr>
<td class="ts">13</td>
<td>
<p><b>Session get(String entityName, Serializable id)</b></p>
<p>Return the persistent instance of the given named entity with the given identifier, or null if there is no such persistent instance.</p>
</td>
</tr>
<tr>
<td class="ts">14</td>
<td>
<p><b>SessionFactory getSessionFactory()</b></p>
<p>Get the session factory which created this session.</p>
</td>
</tr>
<tr>
<td class="ts">15</td>
<td>
<p><b>void refresh(Object object)</b></p>
<p>Re-read the state of the given instance from the underlying database.</p>
</td>
</tr>
<tr>
<td class="ts">16</td>
<td>
<p><b>Transaction getTransaction()</b></p>
<p>Get the Transaction instance associated with this session.</p>
</td>
</tr>
<tr>
<td class="ts">17</td>
<td>
<p><b>boolean isConnected()</b></p>
<p>Check if the session is currently connected.</p>
</td>
</tr>
<tr>
<td class="ts">18</td>
<td>
<p><b>boolean isDirty()</b></p>
<p>Does this session contain any changes which must be synchronized with the database?</p>
</td>
</tr>
<tr>
<td class="ts">19</td>
<td>
<p><b>boolean isOpen()</b></p>
<p>Check if the session is still open.</p>
</td>
</tr>
<tr>
<td class="ts">20</td>
<td>
<p><b>Serializable save(Object object)</b></p>
<p>Persist the given transient instance, first assigning a generated identifier.</p>
</td>
</tr>
<tr>
<td class="ts">21</td>
<td>
<p><b>void saveOrUpdate(Object object)</b></p>
<p>Either save(Object) or update(Object) the given instance.</p>
</td>
</tr>
<tr>
<td class="ts">22</td>
<td>
<p><b>void update(Object object)</b></p>
<p>Update the persistent instance with the identifier of the given detached instance.</p>
</td>
</tr>
<tr>
<td class="ts">23</td>
<td>
<p><b>void update(String entityName, Object object)</b></p>
<p>Update the persistent instance with the identifier of the given detached instance.</p>
</td>
</tr>
</table>
<h1>Hibernate - Persistent Class</h1>
<p>The entire concept of Hibernate is to take the values from Java class attributes and persist them to a database table. A mapping document helps Hibernate in determining how to pull the values from the classes and map them with table and associated fields.</p>
<p>Java classes whose objects or instances will be stored in database tables are called persistent classes in Hibernate. Hibernate works best if these classes follow some simple rules, also known as the <b>Plain Old Java Object</b> (POJO) programming model.</p>
<p>There are following main rules of persistent classes, however, none of these rules are hard requirements &minus;</p>
<ul class="list">
<li><p>All Java classes that will be persisted need a default constructor.</p></li>
<li><p>All classes should contain an ID in order to allow easy identification of your objects within Hibernate and the database. This property maps to the primary key column of a database table.</p></li>
<li><p>All attributes that will be persisted should be declared private and have <b>getXXX</b> and <b>setXXX</b> methods defined in the JavaBean style.</p></li>
<li><p>A central feature of Hibernate, proxies, depends upon the persistent class being either non-final, or the implementation of an interface that declares all public methods.</p></li>
<li><p>All classes that do not extend or implement some specialized classes and interfaces required by the EJB framework.</p></li>
</ul>
<p>The POJO name is used to emphasize that a given object is an ordinary Java Object, not a special object, and in particular not an Enterprise JavaBean.</p>
<h2>Simple POJO Example</h2>
<p>Based on the few rules mentioned above, we can define a POJO class as follows &minus;</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String firstName; 
   private String lastName;   
   private int salary;  

   public Employee() {}
   public Employee(String fname, String lname, int salary) {
      this.firstName = fname;
      this.lastName = lname;
      this.salary = salary;
   }
   
   public int getId() {
      return id;
   }
   
   public void setId( int id ) {
      this.id = id;
   }
   
   public String getFirstName() {
      return firstName;
   }
   
   public void setFirstName( String first_name ) {
      this.firstName = first_name;
   }
   
   public String getLastName() {
      return lastName;
   }
   
   public void setLastName( String last_name ) {
      this.lastName = last_name;
   }
   
   public int getSalary() {
      return salary;
   }
   
   public void setSalary( int salary ) {
      this.salary = salary;
   }
}
</pre>
<h1>Hibernate - Mapping Files</h1>
<p>An Object/relational mappings are usually defined in an XML document. This mapping file instructs Hibernate — how to map the defined class or classes to the database tables?</p>
<p>Though many Hibernate users choose to write the XML by hand, but a number of tools exist to generate the mapping document. These include <b>XDoclet, Middlegen</b> and <b>AndroMDA</b> for the advanced Hibernate users.</p>
<p>Let us consider our previously defined POJO class whose objects will persist in the table defined in next section.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String firstName; 
   private String lastName;   
   private int salary;  

   public Employee() {}
   
   public Employee(String fname, String lname, int salary) {
      this.firstName = fname;
      this.lastName = lname;
      this.salary = salary;
   }
   
   public int getId() {
      return id;
   }
   
   public void setId( int id ) {
      this.id = id;
   }
   
   public String getFirstName() {
      return firstName;
   }
   
   public void setFirstName( String first_name ) {
      this.firstName = first_name;
   }
   
   public String getLastName() {
      return lastName;
   }
   
   public void setLastName( String last_name ) {
      this.lastName = last_name;
   }
   
   public int getSalary() {
      return salary;
   }
   
   public void setSalary( int salary ) {
      this.salary = salary;
   }
}
</pre>
<p>There would be one table corresponding to each object you are willing to provide persistence. Consider above objects need to be stored and retrieved into the following RDBMS table &minus;</p>
<pre class="prettyprint notranslate">
create table EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>Based on the two above entities, we can define following mapping file, which instructs Hibernate how to map the defined class or classes to the database tables.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
"-//Hibernate/Hibernate Mapping DTD//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt; 

&lt;hibernate-mapping&gt;
   &lt;class name = "Employee" table = "EMPLOYEE"&gt;
      
      &lt;meta attribute = "class-description"&gt;
         This class contains the employee detail. 
      &lt;/meta&gt;
      
      &lt;id name = "id" type = "int" column = "id"&gt;
         &lt;generator class="native"/&gt;
      &lt;/id&gt;
      
      &lt;property name = "firstName" column = "first_name" type = "string"/&gt;
      &lt;property name = "lastName" column = "last_name" type = "string"/&gt;
      &lt;property name = "salary" column = "salary" type = "int"/&gt;
      
   &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</pre>
<p>You should save the mapping document in a file with the format &lt;classname&gt;.hbm.xml. We saved our mapping document in the file Employee.hbm.xml.</p>
<p>Let us see understand a little detail about the mapping elements used in the mapping file &minus;</p>
<ul class="list">
<li><p>The mapping document is an XML document having <b>&lt;hibernate-mapping&gt;</b> as the root element, which contains all the <b>&lt;class&gt;</b> elements.</p></li>
<li><p>The <b>&lt;class&gt;</b> elements are used to define specific mappings from a Java classes to the database tables. The Java class name is specified using the <b>name</b> attribute of the class element and the database <b>table</b> name is specified using the table attribute.</p></li>
<li><p>The <b>&lt;meta&gt;</b> element is optional element and can be used to create the class description.</p></li>
<li><p>The <b>&lt;id&gt;</b> element maps the unique ID attribute in class to the primary key of the database table. The <b>name</b> attribute of the id element refers to the property in the class and the <b>column</b> attribute refers to the column in the database table. The <b>type</b> attribute holds the hibernate mapping type, this mapping types will convert from Java to SQL data type.</p></li>
<li><p>The <b>&lt;generator&gt;</b> element within the id element is used to generate the primary key values automatically. The <b>class</b> attribute of the generator element is set to <b>native</b> to let hibernate pick up either <b>identity, sequence</b>, or <b>hilo</b> algorithm to create primary key depending upon the capabilities of the underlying database.</p></li>
<li><p>The <b>&lt;property&gt;</b> element is used to map a Java class property to a column in the database table. The <b>name</b> attribute of the element refers to the property in the class and the <b>column</b> attribute refers to the column in the database table. The <b>type</b> attribute holds the hibernate mapping type, this mapping types will convert from Java to SQL data type.</p></li>
</ul>
<p>There are other attributes and elements available, which will be used in a mapping document and I would try to cover as many as possible while discussing other Hibernate related topics.</p>
<h1>Hibernate - Mapping Types</h1>
<p>When you prepare a Hibernate mapping document, you find that you map the Java data types into RDBMS data types. The <b>types</b> declared and used in the mapping files are not Java data types; they are not SQL database types either. These types are called <b>Hibernate mapping types</b>, which can translate from Java to SQL data types and vice versa.</p>
<p>This chapter lists down all the basic, date and time, large object, and various other builtin mapping types.</p>
<h2>Primitive Types</h2>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="width:25%;text-align:center;">Mapping type</th>
<th style="text-align:center;">Java type</th>
<th style="width:30%;text-align:center;">ANSI SQL Type</th>
</tr>
<tr>
<td>integer</td>
<td>int or java.lang.Integer</td>
<td>INTEGER</td>
</tr>
<tr>
<td>long</td>
<td>long or java.lang.Long</td>
<td>BIGINT</td>
</tr>
<tr>
<td>short</td>
<td>short or java.lang.Short</td>
<td>SMALLINT</td>
</tr>
<tr>
<td>float</td>
<td>float or java.lang.Float</td>
<td>FLOAT</td>
</tr>
<tr>
<td>double</td>
<td>double or java.lang.Double</td>
<td>DOUBLE</td>
</tr>
<tr>
<td>big_decimal</td>
<td>java.math.BigDecimal</td>
<td>NUMERIC</td>
</tr>
<tr>
<td>character</td>
<td>java.lang.String</td>
<td>CHAR(1)</td>
</tr>
<tr>
<td>string</td>
<td>java.lang.String</td>
<td>VARCHAR</td>
</tr>
<tr>
<td>byte</td>
<td>byte or java.lang.Byte</td>
<td>TINYINT</td>
</tr>
<tr>
<td>boolean</td>
<td>boolean or java.lang.Boolean</td>
<td>BIT</td>
</tr>
<tr>
<td>yes/no</td>
<td>boolean or java.lang.Boolean</td>
<td>CHAR(1) ('Y' or 'N')</td>
</tr>
<tr>
<td>true/false</td>
<td>boolean or java.lang.Boolean</td>
<td>CHAR(1) ('T' or 'F')</td>
</tr>
</table>
<h2>Date and Time Types</h2>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="width:25%;text-align:center;">Mapping type</th>
<th style="text-align:center;">Java type</th>
<th style="width:25%;text-align:center;">ANSI SQL Type</th>
</tr>
<tr>
<td>date</td>
<td>java.util.Date or java.sql.Date</td>
<td>DATE</td>
</tr>
<tr>
<td>time</td>
<td>java.util.Date or java.sql.Time</td>
<td>TIME</td>
</tr>
<tr>
<td>timestamp</td>
<td>java.util.Date or java.sql.Timestamp</td>
<td>TIMESTAMP</td>
</tr>
<tr>
<td>calendar</td>
<td>java.util.Calendar</td>
<td>TIMESTAMP</td>
</tr>
<tr>
<td>calendar_date</td>
<td>java.util.Calendar</td>
<td>DATE</td>
</tr>
</table>
<h2>Binary and Large Object Types</h2>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="width:25%;text-align:center;">Mapping type</th>
<th style="text-align:center;">Java type</th>
<th style="width:25%;text-align:center;">ANSI SQL Type</th>
</tr>
<tr>
<td style="vertical-align:middle;">binary</td>
<td style="vertical-align:middle;">byte[]</td>
<td>VARBINARY (or BLOB)</td>
</tr>
<tr>
<td>text</td>
<td>java.lang.String</td>
<td>CLOB</td>
</tr>
<tr>
<td style="vertical-align:middle;">serializable</td>
<td>any Java class that implements java.io.Serializable</td>
<td>VARBINARY (or BLOB)</td>
</tr>
<tr>
<td>clob</td>
<td>java.sql.Clob</td>
<td>CLOB</td>
</tr>
<tr>
<td>blob</td>
<td>java.sql.Blob</td>
<td>BLOB</td>
</tr>
</table>
<h2>JDK-related Types</h2>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="width:25%;text-align:center;">Mapping type</th>
<th style="text-align:center;">Java type</th>
<th style="width:25%;text-align:center;">ANSI SQL Type</th>
</tr>
<tr>
<td>class</td>
<td>java.lang.Class</td>
<td>VARCHAR</td>
</tr>
<tr>
<td>locale</td>
<td>java.util.Locale</td>
<td>VARCHAR</td>
</tr>
<tr>
<td>timezone</td>
<td>java.util.TimeZone</td>
<td>VARCHAR</td>
</tr>
<tr>
<td>currency</td>
<td>java.util.Currency</td>
<td>VARCHAR</td>
</tr>
</table>
<h1>Hibernate - Examples</h1>
<p>Let us now take an example to understand how we can use Hibernate to provide Java persistence in a standalone application. We will go through the different steps involved in creating a Java Application using Hibernate technology.</p>
<h2>Create POJO Classes</h2>
<p>The first step in creating an application is to build the Java POJO class or classes, depending on the application that will be persisted to the database. Let us consider our <b>Employee</b> class with <b>getXXX</b> and <b>setXXX</b> methods to make it JavaBeans compliant class.</p>
<p>A POJO (Plain Old Java Object) is a Java object that doesn't extend or implement some specialized classes and interfaces respectively required by the EJB framework. All normal Java objects are POJO.</p>
<p>When you design a class to be persisted by Hibernate, it is important to provide JavaBeans compliant code as well as one attribute, which would work as index like <b>id</b> attribute in the Employee class.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String firstName; 
   private String lastName;   
   private int salary;  

   public Employee() {}
   public Employee(String fname, String lname, int salary) {
      this.firstName = fname;
      this.lastName = lname;
      this.salary = salary;
   }
   
   public int getId() {
      return id;
   }
   
   public void setId( int id ) {
      this.id = id;
   }
   
   public String getFirstName() {
      return firstName;
   }
   
   public void setFirstName( String first_name ) {
      this.firstName = first_name;
   }
   
   public String getLastName() {
      return lastName;
   }
   
   public void setLastName( String last_name ) {
      this.lastName = last_name;
   }
   
   public int getSalary() {
      return salary;
   }
   
   public void setSalary( int salary ) {
      this.salary = salary;
   }
}
</pre>
<h2>Create Database Tables</h2>
<p>Second step would be creating tables in your database. There would be one table corresponding to each object, you are willing to provide persistence. Consider above objects need to be stored and retrieved into the following RDBMS table &minus;</p>
<pre class="prettyprint notranslate">
create table EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<h2>Create Mapping Configuration File</h2>
<p>This step is to create a mapping file that instructs Hibernate how to map the defined class or classes to the database tables.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
"-//Hibernate/Hibernate Mapping DTD//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt; 

&lt;hibernate-mapping&gt;
   &lt;class name = "Employee" table = "EMPLOYEE"&gt;
      
      &lt;meta attribute = "class-description"&gt;
         This class contains the employee detail. 
      &lt;/meta&gt;
      
      &lt;id name = "id" type = "int" column = "id"&gt;
         &lt;generator class="native"/&gt;
      &lt;/id&gt;
      
      &lt;property name = "firstName" column = "first_name" type = "string"/&gt;
      &lt;property name = "lastName" column = "last_name" type = "string"/&gt;
      &lt;property name = "salary" column = "salary" type = "int"/&gt;
      
   &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</pre>
<p>You should save the mapping document in a file with the format &lt;classname&gt;.hbm.xml. We saved our mapping document in the file Employee.hbm.xml. Let us see little detail about the mapping document &minus;</p>
<ul class="list">
<li><p>The mapping document is an XML document having &lt;hibernate-mapping&gt; as the root element which contains all the &lt;class&gt; elements.</p></li>
<li><p>The <b>&lt;class&gt;</b> elements are used to define specific mappings from a Java classes to the database tables. The Java class name is specified using the <b>name</b> attribute of the class element and the database table name is specified using the <b>table</b> attribute.</p></li>
<li><p>The <b>&lt;meta&gt;</b> element is optional element and can be used to create the class description.</p></li>
<li><p>The <b>&lt;id&gt;</b>  element maps the unique ID attribute in class to the primary key of the database table. The <b>name</b> attribute of the id element refers to the property in the class and the <b>column</b> attribute refers to the column in the database table. The <b>type</b> attribute holds the hibernate mapping type, this mapping types will convert from Java to SQL data type.</p></li>
<li><p>The <b>&lt;generator&gt;</b> element within the id element is used to generate the primary key values automatically. The <b>class</b> attribute of the generator element is set to <b>native</b> to let hibernate pick up either <b>identity, sequence</b> or <b>hilo</b> algorithm to create primary key depending upon the capabilities of the underlying database.</p></li>
<li><p>The <b>&lt;property&gt;</b> element is used to map a Java class property to a column in the database table. The <b>name</b> attribute of the element refers to the property in the class and the <b>column</b> attribute refers to the column in the database table. The <b>type</b> attribute holds the hibernate mapping type, this mapping types will convert from Java to SQL data type.</p></li>
</ul>
<p>There are other attributes and elements available, which will be used in a mapping document and I would try to cover as many as possible while discussing other Hibernate related topics.</p>
<h2>Create Application Class</h2>
<p>Finally, we will create our application class with the main() method to run the application. We will use this application to save few Employee's records and then we will apply CRUD operations on those records.</p>
<pre class="prettyprint notranslate">
import java.util.List; 
import java.util.Date;
import java.util.Iterator; 
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class ManageEmployee {
   private static SessionFactory factory; 
   public static void main(String[] args) {
      
      try {
         factory = new Configuration().configure().buildSessionFactory();
      } catch (Throwable ex) { 
         System.err.println("Failed to create sessionFactory object." + ex);
         throw new ExceptionInInitializerError(ex); 
      }
      
      ManageEmployee ME = new ManageEmployee();

      /* Add few employee records in database */
      Integer empID1 = ME.addEmployee("Zara", "Ali", 1000);
      Integer empID2 = ME.addEmployee("Daisy", "Das", 5000);
      Integer empID3 = ME.addEmployee("John", "Paul", 10000);

      /* List down all the employees */
      ME.listEmployees();

      /* Update employee's records */
      ME.updateEmployee(empID1, 5000);

      /* Delete an employee from the database */
      ME.deleteEmployee(empID2);

      /* List down new list of the employees */
      ME.listEmployees();
   }
   
   /* Method to CREATE an employee in the database */
   public Integer addEmployee(String fname, String lname, int salary){
      Session session = factory.openSession();
      Transaction tx = null;
      Integer employeeID = null;
      
      try {
         tx = session.beginTransaction();
         Employee employee = new Employee(fname, lname, salary);
         employeeID = (Integer) session.save(employee); 
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
      return employeeID;
   }
   
   /* Method to  READ all the employees */
   public void listEmployees( ){
      Session session = factory.openSession();
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         List employees = session.createQuery("FROM Employee").list(); 
         for (Iterator iterator = employees.iterator(); iterator.hasNext();){
            Employee employee = (Employee) iterator.next(); 
            System.out.print("First Name: " + employee.getFirstName()); 
            System.out.print("  Last Name: " + employee.getLastName()); 
            System.out.println("  Salary: " + employee.getSalary()); 
         }
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
   
   /* Method to UPDATE salary for an employee */
   public void updateEmployee(Integer EmployeeID, int salary ){
      Session session = factory.openSession();
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         Employee employee = (Employee)session.get(Employee.class, EmployeeID); 
         employee.setSalary( salary );
		 session.update(employee); 
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
   
   /* Method to DELETE an employee from the records */
   public void deleteEmployee(Integer EmployeeID){
      Session session = factory.openSession();
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         Employee employee = (Employee)session.get(Employee.class, EmployeeID); 
         session.delete(employee); 
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
}
</pre>
<h2>Compilation and Execution</h2>
<p>Here are the steps to compile and run the above mentioned application. Make sure, you have set PATH and CLASSPATH appropriately before proceeding for the compilation and execution.</p>
<ul class="list">
<li><p>Create hibernate.cfg.xml configuration file as explained in configuration chapter.</p></li>
<li><p>Create Employee.hbm.xml mapping file as shown above.</p></li>
<li><p>Create Employee.java source file as shown above and compile it.</p></li>
<li><p>Create ManageEmployee.java source file as shown above and compile it.</p></li>
<li><p>Execute ManageEmployee binary to run the program.</p></li>
</ul>
<p>You would get the following result, and records would be created in the EMPLOYEE table.</p>
<pre class="prettyprint notranslate">
$java ManageEmployee
.......VARIOUS LOG MESSAGES WILL DISPLAY HERE........

First Name: Zara  Last Name: Ali  Salary: 1000
First Name: Daisy  Last Name: Das  Salary: 5000
First Name: John  Last Name: Paul  Salary: 10000
First Name: Zara  Last Name: Ali  Salary: 5000
First Name: John  Last Name: Paul  Salary: 10000
</pre>
<p>If you check your EMPLOYEE table, it should have the following records &minus;</p>
<pre class="prettyprint notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
| 29 | Zara       | Ali       |   5000 |
| 31 | John       | Paul      |  10000 |
+----+------------+-----------+--------+
2 rows in set (0.00 sec

mysql&gt;
</pre>
<h1>Hibernate - O/R Mappings</h1>
<p>So far, we have seen very basic O/R mapping using hibernate, but there are three most important mapping topics, which we have to learn in detail.</p>
<p>These are &minus;</p>
<ul class="list">
<li>Mapping of collections,</li>
<li>Mapping of associations between entity classes, and</li>
<li>Component Mappings.</li>
</ul>
<h2>Collections Mappings</h2>
<p>If an entity or class has collection of values for a particular variable, then we can map those values using any one of the collection interfaces available in java. Hibernate can persist instances of <b>java.util.Map, java.util.Set, java.util.SortedMap, java.util.SortedSet, java.util.List</b>, and any <b>array</b> of persistent entities or values.</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Collection type &amp; Mapping Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/hibernate/hibernate_set_mapping.htm">java.util.Set</a>
<p>This is mapped with a &lt;set&gt; element and initialized with java.util.HashSet</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/hibernate/hibernate_sortedset_mapping.htm">java.util.SortedSet</a>
<p>This is mapped with a &lt;set&gt; element and initialized with java.util.TreeSet. The <b>sort</b> attribute can be set to either a comparator or natural ordering.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/hibernate/hibernate_list_mapping.htm">java.util.List</a>
<p>This is mapped with a &lt;list&gt; element and initialized with java.util.ArrayList</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/hibernate/hibernate_bag_mapping.htm">java.util.Collection</a>
<p>This is mapped with a &lt;bag&gt; or &lt;ibag&gt; element and initialized with java.util.ArrayList</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><a href="/hibernate/hibernate_map_mapping.htm">java.util.Map</a>
<p>This is mapped with a &lt;map&gt; element and initialized with java.util.HashMap</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><a href="/hibernate/hibernate_sortedmap_mapping.htm">java.util.SortedMap</a>
<p>This is mapped with a &lt;map&gt; element and initialized with java.util.TreeMap. The <b>sort</b> attribute can be set to either a comparator or natural ordering.</p></td>
</tr>
</table>
<p>Arrays are supported by Hibernate with &lt;primitive-array&gt; for Java primitive value types and &lt;array&gt; for everything else. However, they are rarely used, so I am not going to discuss them in this tutorial.</p>
<p>If you want to map a user defined collection interfaces, which is not directly supported by Hibernate, you need to tell Hibernate about the semantics of your custom collections, which is not very easy and not recommend to be used.</p>
<h2>Association Mappings</h2>
<p>The mapping of associations between entity classes and the relationships between tables is the soul of ORM. Following are the four ways in which the cardinality of the relationship between the objects can be expressed. An association mapping can be unidirectional as well as bidirectional.</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Mapping type &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/hibernate/hibernate_many_to_one_mapping.htm">Many-to-One</a>
<p>Mapping many-to-one relationship using Hibernate</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/hibernate/hibernate_one_to_one_mapping.htm">One-to-One</a>
<p>Mapping one-to-one relationship using Hibernate</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/hibernate/hibernate_one_to_many_mapping.htm">One-to-Many</a>
<p>Mapping one-to-many relationship using Hibernate</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/hibernate/hibernate_many_to_many_mapping.htm">Many-to-Many</a>
<p>Mapping many-to-many relationship using Hibernate</p></td>
</tr>
</table>
<h2>Component Mappings</h2>
<p>It is very much possible that an Entity class can have a reference to another class as a member variable. If the referred class does not have its own life cycle and completely depends on the life cycle of the owning entity class, then the referred class hence therefore is called as the <b>Component class</b>.</p>
<p>The mapping of Collection of Components is also possible in a similar way just as the mapping of regular Collections with minor configuration differences. We will see these two mappings in detail with examples.</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Mapping type &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/hibernate/hibernate_component_mappings.htm">Component Mappings</a>
<p>Mapping for a class having a reference to another class as a member variable.</p></td>
</tr>
</table>
<h1>Hibernate - Annotations</h1>
<p>So far you have seen how Hibernate uses XML mapping file for the transformation of data from POJO to database tables and vice versa. Hibernate annotations are the newest way to define mappings without the use of XML file. You can use annotations in addition to or as a replacement of XML mapping metadata.</p>
<p>Hibernate Annotations is the powerful way to provide the metadata for the Object and Relational Table mapping. All the metadata is clubbed into the POJO java file along with the code, this helps the user to understand the table structure and POJO simultaneously during the development.</p>
<p>If you going to make your application portable to other EJB 3 compliant ORM applications, you must use annotations to represent the mapping information, but still if you want greater flexibility, then you should go with XML-based mappings.</p>
<h2>Environment Setup for Hibernate Annotation</h2>
<p>First of all you would have to make sure that you are using JDK 5.0 otherwise you need to upgrade your JDK to JDK 5.0 to take advantage of the native support for annotations.</p>
<p>Second, you will need to install the Hibernate 3.x annotations distribution package, available from the sourceforge: (<a target="_blank" rel="nofollow" href="https://sourceforge.net/projects/hibernate/files/hibernate-annotations/">Download Hibernate Annotation</a>) and copy <b>hibernate-annotations.jar, lib/hibernate-comons-annotations.jar</b> and <b>lib/ejb3-persistence.jar</b> from the Hibernate Annotations distribution to your CLASSPATH.</p>
<h2>Annotated Class Example</h2>
<p>As I mentioned above while working with Hibernate Annotation, all the metadata is clubbed into the POJO java file along with the code, this helps the user to understand the table structure and POJO simultaneously during the development.</p>
<p>Consider we are going to use the following EMPLOYEE table to store our objects &minus;</p>
<pre class="prettyprint notranslate">
create table EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>Following is the mapping of Employee class with annotations to map objects with the defined EMPLOYEE table &minus;</p>
<pre class="prettyprint notranslate">
import javax.persistence.*;

@Entity
@Table(name = "EMPLOYEE")
public class Employee {
   @Id @GeneratedValue
   @Column(name = "id")
   private int id;

   @Column(name = "first_name")
   private String firstName;

   @Column(name = "last_name")
   private String lastName;

   @Column(name = "salary")
   private int salary;  

   public Employee() {}
   
   public int getId() {
      return id;
   }
   
   public void setId( int id ) {
      this.id = id;
   }
   
   public String getFirstName() {
      return firstName;
   }
   
   public void setFirstName( String first_name ) {
      this.firstName = first_name;
   }
   
   public String getLastName() {
      return lastName;
   }
   
   public void setLastName( String last_name ) {
      this.lastName = last_name;
   }
   
   public int getSalary() {
      return salary;
   }
   
   public void setSalary( int salary ) {
      this.salary = salary;
   }
}
</pre>
<p>Hibernate detects that the @Id annotation is on a field and assumes that it should access properties of an object directly through fields at runtime. If you placed the @Id annotation on the getId() method, you would enable access to properties through getter and setter methods by default. Hence, all other annotations are also placed on either fields or getter methods, following the selected strategy.</p>
<p>Following section will explain the annotations used in the above class.</p>
<h2>@Entity Annotation</h2>
<p>The EJB 3 standard annotations are contained in the <b>javax.persistence</b> package, so we import this package as the first step. Second, we used the <b>@Entity</b> annotation to the Employee class, which marks this class as an entity bean, so it must have a no-argument constructor that is visible with at least protected scope.</p>
<h2>@Table Annotation</h2>
<p>The @Table annotation allows you to specify the details of the table that will be used to persist the entity in the database.</p>
<p>The @Table annotation provides four attributes, allowing you to override the name of the table, its catalogue, and its schema, and enforce unique constraints on columns in the table. For now, we are using just table name, which is EMPLOYEE.</p>
<h2>@Id and @GeneratedValue Annotations</h2>
<p>Each entity bean will have a primary key, which you annotate on the class with the <b>@Id</b> annotation. The primary key can be a single field or a combination of multiple fields depending on your table structure.</p>
<p>By default, the @Id annotation will automatically determine the most appropriate primary key generation strategy to be used but you can override this by applying the <b>@GeneratedValue</b> annotation, which takes two parameters <b>strategy</b> and <b>generator</b> that I'm not going to discuss here, so let us use only the default key generation strategy. Letting Hibernate determine which generator type to use makes your code portable between different databases.</p>
<h2>@Column Annotation</h2>
<p>The @Column annotation is used to specify the details of the column to which a field or property will be mapped. You can use column annotation with the following most commonly used attributes &minus;</p>
<ul class="list">
<li><p><b>name</b> attribute permits the name of the column to be explicitly specified.</p></li>
<li><p><b>length</b> attribute permits the size of the column used to map a value particularly for a String value.</p></li>
<li><p><b>nullable</b> attribute permits the column to be marked NOT NULL when the schema is generated.</p></li>
<li><p><b>unique</b> attribute permits the column to be marked as containing only unique values.</p></li>
</ul>
<h2>Create Application Class</h2>
<p>Finally, we will create our application class with the main() method to run the application. We will use this application to save few Employee's records and then we will apply CRUD operations on those records.</p>
<pre class="prettyprint notranslate">
import java.util.List; 
import java.util.Date;
import java.util.Iterator; 
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class ManageEmployee {
   private static SessionFactory factory; 
   public static void main(String[] args) {
      
      try {
         factory = new AnnotationConfiguration().
                   configure().
                   //addPackage("com.xyz") //add package if used.
                   addAnnotatedClass(Employee.class).
                   buildSessionFactory();
      } catch (Throwable ex) { 
         System.err.println("Failed to create sessionFactory object." + ex);
         throw new ExceptionInInitializerError(ex); 
      }
      
      ManageEmployee ME = new ManageEmployee();

      /* Add few employee records in database */
      Integer empID1 = ME.addEmployee("Zara", "Ali", 1000);
      Integer empID2 = ME.addEmployee("Daisy", "Das", 5000);
      Integer empID3 = ME.addEmployee("John", "Paul", 10000);

      /* List down all the employees */
      ME.listEmployees();

      /* Update employee's records */
      ME.updateEmployee(empID1, 5000);

      /* Delete an employee from the database */
      ME.deleteEmployee(empID2);

      /* List down new list of the employees */
      ME.listEmployees();
   }
   
   /* Method to CREATE an employee in the database */
   public Integer addEmployee(String fname, String lname, int salary){
      Session session = factory.openSession();
      Transaction tx = null;
      Integer employeeID = null;
      
      try {
         tx = session.beginTransaction();
         Employee employee = new Employee();
         employee.setFirstName(fname);
         employee.setLastName(lname);
         employee.setSalary(salary);
         employeeID = (Integer) session.save(employee); 
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
      return employeeID;
   }
   
   /* Method to  READ all the employees */
   public void listEmployees( ){
      Session session = factory.openSession();
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         List employees = session.createQuery("FROM Employee").list(); 
         for (Iterator iterator = employees.iterator(); iterator.hasNext();){
            Employee employee = (Employee) iterator.next(); 
            System.out.print("First Name: " + employee.getFirstName()); 
            System.out.print("  Last Name: " + employee.getLastName()); 
            System.out.println("  Salary: " + employee.getSalary()); 
         }
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
   
   /* Method to UPDATE salary for an employee */
   public void updateEmployee(Integer EmployeeID, int salary ){
      Session session = factory.openSession();
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         Employee employee = (Employee)session.get(Employee.class, EmployeeID); 
         employee.setSalary( salary );
		 session.update(employee); 
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
   
   /* Method to DELETE an employee from the records */
   public void deleteEmployee(Integer EmployeeID){
      Session session = factory.openSession();
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         Employee employee = (Employee)session.get(Employee.class, EmployeeID); 
         session.delete(employee); 
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
}
</pre>
<h2>Database Configuration</h2>
<p>Now let us create <b>hibernate.cfg.xml</b> configuration file to define database related parameters.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;!DOCTYPE hibernate-configuration SYSTEM 
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;

&lt;hibernate-configuration&gt;
   &lt;session-factory&gt;
   
      &lt;property name = "hibernate.dialect"&gt;
         org.hibernate.dialect.MySQLDialect
      &lt;/property&gt;
   
      &lt;property name = "hibernate.connection.driver_class"&gt;
         com.mysql.jdbc.Driver
      &lt;/property&gt;

      &lt;!-- Assume students is the database name --&gt;
   
      &lt;property name = "hibernate.connection.url"&gt;
         jdbc:mysql://localhost/test
      &lt;/property&gt;
   
      &lt;property name = "hibernate.connection.username"&gt;
         root
      &lt;/property&gt;
   
      &lt;property name = "hibernate.connection.password"&gt;
         cohondob
      &lt;/property&gt;

   &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;
</pre>
<h2>Compilation and Execution</h2>
<p>Here are the steps to compile and run the above mentioned application. Make sure, you have set PATH and CLASSPATH appropriately before proceeding for the compilation and execution.</p>
<ul class="list">
<li><p>Delete Employee.hbm.xml mapping file from the path.</p></li>
<li><p>Create Employee.java source file as shown above and compile it.</p></li>
<li><p>Create ManageEmployee.java source file as shown above and compile it.</p></li>
<li><p>Execute ManageEmployee binary to run the program.</p></li>
</ul>
<p>You would get the following result, and records would be created in EMPLOYEE table.</p>
<pre class="prettyprint notranslate">
$java ManageEmployee
.......VARIOUS LOG MESSAGES WILL DISPLAY HERE........

First Name: Zara  Last Name: Ali  Salary: 1000
First Name: Daisy  Last Name: Das  Salary: 5000
First Name: John  Last Name: Paul  Salary: 10000
First Name: Zara  Last Name: Ali  Salary: 5000
First Name: John  Last Name: Paul  Salary: 10000
</pre>
<p>If you check your EMPLOYEE table, it should have the following records &minus;</p>
<pre class="prettyprint notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
| 29 | Zara       | Ali       |   5000 |
| 31 | John       | Paul      |  10000 |
+----+------------+-----------+--------+
2 rows in set (0.00 sec

mysql&gt;
</pre>
<h1>Hibernate - Query Language</h1>
<p>Hibernate Query Language (HQL) is an object-oriented query language, similar to SQL, but instead of operating on tables and columns, HQL works with persistent objects and their properties. HQL queries are translated by Hibernate into conventional SQL queries, which in turns perform action on database.</p>
<p>Although you can use SQL statements directly with Hibernate using Native SQL, but I would recommend to use HQL whenever possible to avoid database portability hassles, and to take advantage of Hibernate's SQL generation and caching strategies.</p>
<p>Keywords like SELECT, FROM, and WHERE, etc., are not case sensitive, but properties like table and column names are case sensitive in HQL.</p>
<h2>FROM Clause</h2>
<p>You will use <b>FROM</b> clause if you want to load a complete persistent objects into memory. Following is the simple syntax of using FROM clause &minus;</p>
<pre class="prettyprint notranslate">
String hql = "FROM Employee";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<p>If you need to fully qualify a class name in HQL, just specify the package and class name as follows &minus;</p>
<pre class="prettyprint notranslate">
String hql = "FROM com.hibernatebook.criteria.Employee";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>AS Clause</h2>
<p>The <b>AS</b> clause can be used to assign aliases to the classes in your HQL queries, especially when you have the long queries. For instance, our previous simple example would be the following &minus;</p>
<pre class="prettyprint notranslate">
String hql = "FROM Employee AS E";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<p>The <b>AS</b> keyword is optional and you can also specify the alias directly after the class name, as follows &minus;</p>
<pre class="prettyprint notranslate">
String hql = "FROM Employee E";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>SELECT Clause</h2>
<p>The <b>SELECT</b> clause provides more control over the result set then the from clause. If you want to obtain few properties of objects instead of the complete object, use the SELECT clause. Following is the simple syntax of using SELECT clause to get just first_name field of the Employee object &minus;</p>
<pre class="prettyprint notranslate">
String hql = "SELECT E.firstName FROM Employee E";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<p>It is notable here that <b>Employee.firstName</b> is a property of Employee object rather than a field of the EMPLOYEE table.</p>
<h2>WHERE Clause</h2>
<p>If you want to narrow the specific objects that are returned from storage, you use the WHERE clause. Following is the simple syntax of using WHERE clause &minus;</p>
<pre class="prettyprint notranslate">
String hql = "FROM Employee E WHERE E.id = 10";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>ORDER BY Clause</h2>
<p>To sort your HQL query's results, you will need to use the <b>ORDER BY</b> clause. You can order the results by any property on the objects in the result set either ascending (ASC) or descending (DESC). Following is the simple syntax of using ORDER BY clause &minus;</p>
<pre class="prettyprint notranslate">
String hql = "FROM Employee E WHERE E.id &gt; 10 ORDER BY E.salary DESC";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<p>If you wanted to sort by more than one property, you would just add the additional properties to the end of the order by clause, separated by commas as follows &minus;</p>
<pre class="prettyprint notranslate">
String hql = "FROM Employee E WHERE E.id &gt; 10 " +
             "ORDER BY E.firstName DESC, E.salary DESC ";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>GROUP BY Clause</h2>
<p>This clause lets Hibernate pull information from the database and group it based on a value of an attribute and, typically, use the result to include an aggregate value. Following is the simple syntax of using GROUP BY clause &minus;</p>
<pre class="prettyprint notranslate">
String hql = "SELECT SUM(E.salary), E.firtName FROM Employee E " +
             "GROUP BY E.firstName";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>Using Named Parameters</h2>
<p>Hibernate supports named parameters in its HQL queries. This makes writing HQL queries that accept input from the user easy and you do not have to defend against SQL injection attacks. Following is the simple syntax of using named parameters &minus;</p>
<pre class="prettyprint notranslate">
String hql = "FROM Employee E WHERE E.id = :employee_id";
Query query = session.createQuery(hql);
query.setParameter("employee_id",10);
List results = query.list();
</pre>
<h2>UPDATE Clause</h2>
<p>Bulk updates are new to HQL with Hibernate 3, and delete work differently in Hibernate 3 than they did in Hibernate 2. The Query interface now contains a method called executeUpdate() for executing HQL UPDATE or DELETE statements.</p>
<p>The <b>UPDATE</b> clause can be used to update one or more properties of an one or more objects. Following is the simple syntax of using UPDATE clause &minus;</p>
<pre class="prettyprint notranslate">
String hql = "UPDATE Employee set salary = :salary "  + 
             "WHERE id = :employee_id";
Query query = session.createQuery(hql);
query.setParameter("salary", 1000);
query.setParameter("employee_id", 10);
int result = query.executeUpdate();
System.out.println("Rows affected: " + result);
</pre>
<h2>DELETE Clause</h2>
<p>The <b>DELETE</b> clause can be used to delete one or more objects. Following is the simple syntax of using DELETE clause &minus;</p>
<pre class="prettyprint notranslate">
String hql = "DELETE FROM Employee "  + 
             "WHERE id = :employee_id";
Query query = session.createQuery(hql);
query.setParameter("employee_id", 10);
int result = query.executeUpdate();
System.out.println("Rows affected: " + result);
</pre>
<h2>INSERT  Clause</h2>
<p>HQL supports <b>INSERT INTO</b> clause only where records can be inserted from one object to another object. Following is the simple syntax of using INSERT INTO clause &minus;</p>
<pre class="prettyprint notranslate">
String hql = "INSERT INTO Employee(firstName, lastName, salary)"  + 
             "SELECT firstName, lastName, salary FROM old_employee";
Query query = session.createQuery(hql);
int result = query.executeUpdate();
System.out.println("Rows affected: " + result);
</pre>
<h2>Aggregate Methods</h2>
<p>HQL supports a range of aggregate methods, similar to SQL. They work the same way in HQL as in SQL and following is the list of the available functions &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Functions &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>avg(property name)</b></p>
<p>The average of a property's value</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>count(property name or *)</b></p>
<p>The number of times a property occurs in the results</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>max(property name)</b></p>
<p>The maximum value of the property values</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>min(property name)</b></p>
<p>The minimum value of the property values</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>sum(property name)</b></p>
<p>The sum total of the property values</p>
</td>
</tr>
</table>
<p>The <b>distinct</b> keyword only counts the unique values in the row set. The following query will return only unique count &minus;</p>
<pre class="prettyprint notranslate">
String hql = "SELECT count(distinct E.firstName) FROM Employee E";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>Pagination using Query</h2>
<p>There are two methods of the Query interface for pagination.</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Query setFirstResult(int startPosition)</b></p>
<p>This method takes an integer that represents the first row in your result set, starting with row 0.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Query setMaxResults(int maxResult)</b></p>
<p>This method tells Hibernate to retrieve a fixed number <b>maxResults</b> of objects.</p>
</td>
</tr>
</table>
<p>Using above two methods together, we can construct a paging component in our web or Swing application. Following is the example, which you can extend to fetch 10 rows at a time &minus;</p>
<pre class="prettyprint notranslate">
String hql = "FROM Employee";
Query query = session.createQuery(hql);
query.setFirstResult(1);
query.setMaxResults(10);
List results = query.list();
</pre>
<h1>Hibernate - Criteria Queries</h1>
<p>Hibernate provides alternate ways of manipulating objects and in turn data available in RDBMS tables. One of the methods is Criteria API, which allows you to build up a criteria query object programmatically where you can apply filtration rules and logical conditions.</p>
<p>The Hibernate <b>Session</b> interface provides <b>createCriteria()</b> method, which can be used to create a <b>Criteria</b> object that returns instances of the persistence object's class when your application executes a criteria query.</p>
<p>Following is the simplest example of a criteria query is one, which will simply return every object that corresponds to the Employee class.</p>
<pre class="prettyprint notranslate">
Criteria cr = session.createCriteria(Employee.class);
List results = cr.list();
</pre>
<h2>Restrictions with Criteria</h2>
<p>You can use <b>add()</b> method available for <b>Criteria</b> object to add restriction for a criteria query. Following is the example to add a restriction to return the records with salary is equal to 2000 &minus;</p>
<pre class="prettyprint notranslate">
Criteria cr = session.createCriteria(Employee.class);
cr.add(Restrictions.eq("salary", 2000));
List results = cr.list();
</pre>
<p>Following are the few more examples covering different scenarios and can be used as per the requirement &minus;</p>
<pre class="prettyprint notranslate">
Criteria cr = session.createCriteria(Employee.class);

// To get records having salary more than 2000
cr.add(Restrictions.gt("salary", 2000));

// To get records having salary less than 2000
cr.add(Restrictions.lt("salary", 2000));

// To get records having fistName starting with zara
cr.add(Restrictions.like("firstName", "zara%"));

// Case sensitive form of the above restriction.
cr.add(Restrictions.ilike("firstName", "zara%"));

// To get records having salary in between 1000 and 2000
cr.add(Restrictions.between("salary", 1000, 2000));

// To check if the given property is null
cr.add(Restrictions.isNull("salary"));

// To check if the given property is not null
cr.add(Restrictions.isNotNull("salary"));

// To check if the given property is empty
cr.add(Restrictions.isEmpty("salary"));

// To check if the given property is not empty
cr.add(Restrictions.isNotEmpty("salary"));
</pre>
<p>You can create AND or OR conditions using LogicalExpression restrictions as follows &minus;</p>
<pre class="prettyprint notranslate">
Criteria cr = session.createCriteria(Employee.class);

Criterion salary = Restrictions.gt("salary", 2000);
Criterion name = Restrictions.ilike("firstNname","zara%");

// To get records matching with OR conditions
LogicalExpression orExp = Restrictions.or(salary, name);
cr.add( orExp );

// To get records matching with AND conditions
LogicalExpression andExp = Restrictions.and(salary, name);
cr.add( andExp );

List results = cr.list();
</pre>
<p>Though all the above conditions can be used directly with HQL as explained in previous tutorial.</p>
<h2>Pagination Using Criteria</h2>
<p>There are two methods of the Criteria interface for pagination.</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>public Criteria setFirstResult(int firstResult)</b></p>
<p>This method takes an integer that represents the first row in your result set, starting with row 0.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>public Criteria setMaxResults(int maxResults)</b></p>
<p>This method tells Hibernate to retrieve a fixed number <b>maxResults</b> of objects.</p>
</td>
</tr>
</table>
<p>Using above two methods together, we can construct a paging component in our web or Swing application. Following is the example, which you can extend to fetch 10 rows at a time &minus;</p>
<pre class="prettyprint notranslate">
Criteria cr = session.createCriteria(Employee.class);
cr.setFirstResult(1);
cr.setMaxResults(10);
List results = cr.list();
</pre>
<h2>Sorting the Results</h2>
<p>The Criteria API provides the <b>org.hibernate.criterion.Order</b> class to sort your result set in either ascending or descending order, according to one of your object's properties. This example demonstrates how you would use the Order class to sort the result set &minus;</p>
<pre class="prettyprint notranslate">
Criteria cr = session.createCriteria(Employee.class);

// To get records having salary more than 2000
cr.add(Restrictions.gt("salary", 2000));

// To sort records in descening order
cr.addOrder(Order.desc("salary"));

// To sort records in ascending order
cr.addOrder(Order.asc("salary"));

List results = cr.list();
</pre>
<h2>Projections &amp; Aggregations</h2>
<p>The Criteria API provides the <b>org.hibernate.criterion.Projections</b> class, which can be used to get average, maximum, or minimum of the property values. The Projections class is similar to the Restrictions class, in that it provides several static factory methods for obtaining <b>Projection</b> instances.</p>
<p>Following are the few examples covering different scenarios and can be used as per requirement &minus;</p>
<pre class="prettyprint notranslate">
Criteria cr = session.createCriteria(Employee.class);

// To get total row count.
cr.setProjection(Projections.rowCount());

// To get average of a property.
cr.setProjection(Projections.avg("salary"));

// To get distinct count of a property.
cr.setProjection(Projections.countDistinct("firstName"));

// To get maximum of a property.
cr.setProjection(Projections.max("salary"));

// To get minimum of a property.
cr.setProjection(Projections.min("salary"));

// To get sum of a property.
cr.setProjection(Projections.sum("salary"));
</pre>
<h2>Criteria Queries Example</h2>
<p>Consider the following POJO class &minus;</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String firstName; 
   private String lastName;   
   private int salary;  

   public Employee() {}
   
   public Employee(String fname, String lname, int salary) {
      this.firstName = fname;
      this.lastName = lname;
      this.salary = salary;
   }
   
   public int getId() {
      return id;
   }
   
   public void setId( int id ) {
      this.id = id;
   }
   
   public String getFirstName() {
      return firstName;
   }
   
   public void setFirstName( String first_name ) {
      this.firstName = first_name;
   }
   
   public String getLastName() {
      return lastName;
   }
   
   public void setLastName( String last_name ) {
      this.lastName = last_name;
   }
   
   public int getSalary() {
      return salary;
   }
   
   public void setSalary( int salary ) {
      this.salary = salary;
   }
}
</pre>
<p>Let us create the following EMPLOYEE table to store Employee objects &minus;</p>
<pre class="prettyprint notranslate">
create table EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>Following will be the mapping file.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
"-//Hibernate/Hibernate Mapping DTD//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt; 

&lt;hibernate-mapping&gt;
   &lt;class name = "Employee" table = "EMPLOYEE"&gt;
      
      &lt;meta attribute = "class-description"&gt;
         This class contains the employee detail. 
      &lt;/meta&gt;
      
      &lt;id name = "id" type = "int" column = "id"&gt;
         &lt;generator class="native"/&gt;
      &lt;/id&gt;
      
      &lt;property name = "firstName" column = "first_name" type = "string"/&gt;
      &lt;property name = "lastName" column = "last_name" type = "string"/&gt;
      &lt;property name = "salary" column = "salary" type = "int"/&gt;
      
   &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</pre>
<p>Finally, we will create our application class with the main() method to run the application where we will use <b>Criteria</b> queries &minus;</p>
<pre class="prettyprint notranslate">
import java.util.List; 
import java.util.Date;
import java.util.Iterator; 
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.SessionFactory;
import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Projections;
import org.hibernate.cfg.Configuration;

public class ManageEmployee {
   private static SessionFactory factory; 
   public static void main(String[] args) {
      
      try {
         factory = new Configuration().configure().buildSessionFactory();
      } catch (Throwable ex) { 
         System.err.println("Failed to create sessionFactory object." + ex);
         throw new ExceptionInInitializerError(ex); 
      }
      
      ManageEmployee ME = new ManageEmployee();

      /* Add few employee records in database */
      Integer empID1 = ME.addEmployee("Zara", "Ali", 2000);
      Integer empID2 = ME.addEmployee("Daisy", "Das", 5000);
      Integer empID3 = ME.addEmployee("John", "Paul", 5000);
      Integer empID4 = ME.addEmployee("Mohd", "Yasee", 3000);

      /* List down all the employees */
      ME.listEmployees();

      /* Print Total employee's count */
      ME.countEmployee();

      /* Print Toatl salary */
      ME.totalSalary();
   }
   
   /* Method to CREATE an employee in the database */
   public Integer addEmployee(String fname, String lname, int salary){
      Session session = factory.openSession();
      Transaction tx = null;
      Integer employeeID = null;
      
      try {
         tx = session.beginTransaction();
         Employee employee = new Employee(fname, lname, salary);
         employeeID = (Integer) session.save(employee); 
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
      return employeeID;
   }

   /* Method to  READ all the employees having salary more than 2000 */
   public void listEmployees( ) {
      Session session = factory.openSession();
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         Criteria cr = session.createCriteria(Employee.class);
         // Add restriction.
         cr.add(Restrictions.gt("salary", 2000));
         List employees = cr.list();

         for (Iterator iterator = employees.iterator(); iterator.hasNext();){
            Employee employee = (Employee) iterator.next(); 
            System.out.print("First Name: " + employee.getFirstName()); 
            System.out.print("  Last Name: " + employee.getLastName()); 
            System.out.println("  Salary: " + employee.getSalary()); 
         }
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
   
   /* Method to print total number of records */
   public void countEmployee(){
      Session session = factory.openSession();
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         Criteria cr = session.createCriteria(Employee.class);

         // To get total row count.
         cr.setProjection(Projections.rowCount());
         List rowCount = cr.list();

         System.out.println("Total Coint: " + rowCount.get(0) );
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
  
   /* Method to print sum of salaries */
   public void totalSalary(){
      Session session = factory.openSession();
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         Criteria cr = session.createCriteria(Employee.class);

         // To get total salary.
         cr.setProjection(Projections.sum("salary"));
         List totalSalary = cr.list();

         System.out.println("Total Salary: " + totalSalary.get(0) );
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
}
</pre>
<h2>Compilation and Execution</h2>
<p>Here are the steps to compile and run the above mentioned application. Make sure, you have set PATH and CLASSPATH appropriately before proceeding for the compilation and execution.</p>
<ul class="list">
<li><p>Create hibernate.cfg.xml configuration file as explained in configuration chapter.</p></li>
<li><p>Create Employee.hbm.xml mapping file as shown above.</p></li>
<li><p>Create Employee.java source file as shown above and compile it.</p></li>
<li><p>Create ManageEmployee.java source file as shown above and compile it.</p></li>
<li><p>Execute ManageEmployee binary to run the program.</p></li>
</ul>
<p>You would get the following result, and records would be created in the EMPLOYEE table.</p>
<pre class="prettyprint notranslate">
$java ManageEmployee
.......VARIOUS LOG MESSAGES WILL DISPLAY HERE........

First Name: Daisy  Last Name: Das  Salary: 5000
First Name: John  Last Name: Paul  Salary: 5000
First Name: Mohd  Last Name: Yasee  Salary: 3000
Total Coint: 4
Total Salary: 15000
</pre>
<p>If you check your EMPLOYEE table, it should have the following records&minus;</p>
<pre class="prettyprint notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
| 14 | Zara       | Ali       |   2000 |
| 15 | Daisy      | Das       |   5000 |
| 16 | John       | Paul      |   5000 |
| 17 | Mohd       | Yasee     |   3000 |
+----+------------+-----------+--------+
4 rows in set (0.00 sec)
mysql&gt;
</pre>
<h1>Hibernate - Native SQL</h1>
<p>You can use native SQL to express database queries if you want to utilize database-specific features such as query hints or the CONNECT keyword in Oracle. Hibernate 3.x allows you to specify handwritten SQL, including stored procedures, for all create, update, delete, and load operations.</p>
<p>Your application will create a native SQL query from the session with the <b>createSQLQuery()</b> method on the Session interface &minus;</p>
<pre class="prettyprint notranslate">
public SQLQuery createSQLQuery(String sqlString) throws HibernateException
</pre>
<p>After you pass a string containing the SQL query to the createSQLQuery() method, you can associate the SQL result with either an existing Hibernate entity, a join, or a scalar result using addEntity(), addJoin(), and addScalar() methods respectively.</p>
<h2>Scalar Queries</h2>
<p>The most basic SQL query is to get a list of scalars (values) from one or more tables. Following is the syntax for using native SQL for scalar values &minus;</p>
<pre class="prettyprint notranslate">
String sql = "SELECT first_name, salary FROM EMPLOYEE";
SQLQuery query = session.createSQLQuery(sql);
query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
List results = query.list();
</pre>
<h2>Entity Queries</h2>
<p>The above queries were all about returning scalar values, basically returning the "raw" values from the result set. Following is the syntax to get entity objects as a whole from a native sql query via addEntity().</p>
<pre class="prettyprint notranslate">
String sql = "SELECT * FROM EMPLOYEE";
SQLQuery query = session.createSQLQuery(sql);
query.addEntity(Employee.class);
List results = query.list();
</pre>
<h2>Named SQL Queries</h2>
<p>Following is the syntax to get entity objects from a native sql query via addEntity() and using named SQL query.</p>
<pre class="prettyprint notranslate">
String sql = "SELECT * FROM EMPLOYEE WHERE id = :employee_id";
SQLQuery query = session.createSQLQuery(sql);
query.addEntity(Employee.class);
query.setParameter("employee_id", 10);
List results = query.list();
</pre>
<h2>Native SQL Example</h2>
<p>Consider the following POJO class &minus;</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String firstName; 
   private String lastName;   
   private int salary;  

   public Employee() {}
   
   public Employee(String fname, String lname, int salary) {
      this.firstName = fname;
      this.lastName = lname;
      this.salary = salary;
   }
   
   public int getId() {
      return id;
   }
   
   public void setId( int id ) {
      this.id = id;
   }
   
   public String getFirstName() {
      return firstName;
   }
   
   public void setFirstName( String first_name ) {
      this.firstName = first_name;
   }
   
   public String getLastName() {
      return lastName;
   }
   
   public void setLastName( String last_name ) {
      this.lastName = last_name;
   }
   
   public int getSalary() {
      return salary;
   }
   
   public void setSalary( int salary ) {
      this.salary = salary;
   }
}
</pre>
<p>Let us create the following EMPLOYEE table to store Employee objects &minus;</p>
<pre class="prettyprint notranslate">
create table EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>Following will be mapping file &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
"-//Hibernate/Hibernate Mapping DTD//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt; 

&lt;hibernate-mapping&gt;
   &lt;class name = "Employee" table = "EMPLOYEE"&gt;
      
      &lt;meta attribute = "class-description"&gt;
         This class contains the employee detail. 
      &lt;/meta&gt;
      
      &lt;id name = "id" type = "int" column = "id"&gt;
         &lt;generator class="native"/&gt;
      &lt;/id&gt;
      
      &lt;property name = "firstName" column = "first_name" type = "string"/&gt;
      &lt;property name = "lastName" column = "last_name" type = "string"/&gt;
      &lt;property name = "salary" column = "salary" type = "int"/&gt;
      
   &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</pre>
<p>Finally, we will create our application class with the main() method to run the application where we will use <b>Native SQL</b> queries &minus;</p>
<pre class="prettyprint notranslate">
import java.util.*; 
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.SessionFactory;
import org.hibernate.SQLQuery;
import org.hibernate.Criteria;
import org.hibernate.Hibernate;
import org.hibernate.cfg.Configuration;

public class ManageEmployee {
   private static SessionFactory factory; 
   public static void main(String[] args) {
      
      try {
         factory = new Configuration().configure().buildSessionFactory();
      } catch (Throwable ex) { 
         System.err.println("Failed to create sessionFactory object." + ex);
         throw new ExceptionInInitializerError(ex); 
      }
      
      ManageEmployee ME = new ManageEmployee();

      /* Add few employee records in database */
      Integer empID1 = ME.addEmployee("Zara", "Ali", 2000);
      Integer empID2 = ME.addEmployee("Daisy", "Das", 5000);
      Integer empID3 = ME.addEmployee("John", "Paul", 5000);
      Integer empID4 = ME.addEmployee("Mohd", "Yasee", 3000);

      /* List down employees and their salary using Scalar Query */
      ME.listEmployeesScalar();

      /* List down complete employees information using Entity Query */
      ME.listEmployeesEntity();
   }
   
   /* Method to CREATE an employee in the database */
   public Integer addEmployee(String fname, String lname, int salary){
      Session session = factory.openSession();
      Transaction tx = null;
      Integer employeeID = null;
      
      try {
         tx = session.beginTransaction();
         Employee employee = new Employee(fname, lname, salary);
         employeeID = (Integer) session.save(employee); 
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
      return employeeID;
   }

   /* Method to  READ all the employees using Scalar Query */
   public void listEmployeesScalar( ){
      Session session = factory.openSession();
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         String sql = "SELECT first_name, salary FROM EMPLOYEE";
         SQLQuery query = session.createSQLQuery(sql);
         query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
         List data = query.list();

         for(Object object : data) {
            Map row = (Map)object;
            System.out.print("First Name: " + row.get("first_name")); 
            System.out.println(", Salary: " + row.get("salary")); 
         }
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }

   /* Method to READ all the employees using Entity Query */
   public void listEmployeesEntity( ){
      Session session = factory.openSession();
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         String sql = "SELECT * FROM EMPLOYEE";
         SQLQuery query = session.createSQLQuery(sql);
         query.addEntity(Employee.class);
         List employees = query.list();

         for (Iterator iterator = employees.iterator(); iterator.hasNext();){
            Employee employee = (Employee) iterator.next(); 
            System.out.print("First Name: " + employee.getFirstName()); 
            System.out.print("  Last Name: " + employee.getLastName()); 
            System.out.println("  Salary: " + employee.getSalary()); 
         }
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
}
</pre>
<h2>Compilation and Execution</h2>
<p>Here are the steps to compile and run the above mentioned application. Make sure, you have set PATH and CLASSPATH appropriately before proceeding for the compilation and execution.</p>
<ul class="list">
<li><p>Create hibernate.cfg.xml configuration file as explained in configuration chapter.</p></li>
<li><p>Create Employee.hbm.xml mapping file as shown above.</p></li>
<li><p>Create Employee.java source file as shown above and compile it.</p></li>
<li><p>Create ManageEmployee.java source file as shown above and compile it.</p></li>
<li><p>Execute ManageEmployee binary to run the program.</p></li>
</ul>
<p>You would get the following result, and records would be created in the EMPLOYEE table.</p>
<pre class="prettyprint notranslate">
$java ManageEmployee
.......VARIOUS LOG MESSAGES WILL DISPLAY HERE........

First Name: Zara, Salary: 2000
First Name: Daisy, Salary: 5000
First Name: John, Salary: 5000
First Name: Mohd, Salary: 3000
First Name: Zara  Last Name: Ali  Salary: 2000
First Name: Daisy  Last Name: Das  Salary: 5000
First Name: John  Last Name: Paul  Salary: 5000
First Name: Mohd  Last Name: Yasee  Salary: 3000
</pre>
<p>If you check your EMPLOYEE table, it should have the following records &minus;</p>
<pre class="prettyprint notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
| 26 | Zara       | Ali       |   2000 |
| 27 | Daisy      | Das       |   5000 |
| 28 | John       | Paul      |   5000 |
| 29 | Mohd       | Yasee     |   3000 |
+----+------------+-----------+--------+
4 rows in set (0.00 sec)
mysql&gt;
</pre>
<h1>Hibernate - Caching</h1>
<p>Caching is a mechanism to enhance the performance of a system. It is a buffer memorythat lies between the application and the database. Cache memory stores recently used data items in order to reduce the number of database hits as much as possible.</p>
<p>Caching is important to Hibernate as well. It utilizes a multilevel caching scheme as explained below &minus;</p>
<img src="/hibernate/images/hibernate_cache.jpg" alt="Hibernate Caching" />
<h2>First-level Cache</h2> 
<p>The first-level cache is the Session cache and is a mandatory cache through which all requests must pass. The Session object keeps an object under its own power before committing it to the database.</p>
<p>If you issue multiple updates to an object, Hibernate tries to delay doing the update as long as possible to reduce the number of update SQL statements issued. If you close the session, all the objects being cached are lost and either persisted or updated in the database.</p>
<h2>Second-level Cache</h2> 
<p>Second level cache is an optional cache and first-level cache will always be consulted before any attempt is made to locate an object in the second-level cache. The second level cache can be configured on a per-class and per-collection basis and mainly responsible for caching objects across sessions.</p>
<p>Any third-party cache can be used with Hibernate. An <b>org.hibernate.cache.CacheProvider</b> interface is provided, which must be implemented to provide Hibernate with a handle to the cache implementation.</p>
<h2>Query-level Cache</h2>
<p>Hibernate also implements a cache for query resultsets that integrates closely with the second-level cache.</p>
<p>This is an optional feature and requires two additional physical cache regions that hold the cached query results and the timestamps when a table was last updated. This is only useful for queries that are run frequently with the same parameters.</p>
<h2>The Second Level Cache</h2>
<p>Hibernate uses first-level cache by default and you have nothing to do to use first-level cache. Let's go straight to the optional second-level cache. Not all classes benefit from caching, so it's important to be able to disable the second-level cache.</p>
<p>The Hibernate second-level cache is set up in two steps. First, you have to decide which concurrency strategy to use. After that, you configure cache expiration and physical cache attributes using the cache provider.</p>
<h2>Concurrency Strategies</h2>
<p>A concurrency strategy is a mediator, which is responsible for storing items of data in the cache and retrieving them from the cache. If you are going to enable a second-level cache, you will have to decide, for each persistent class and collection, which cache concurrency strategy to use.</p>
<ul class="list">
<li><p><b>Transactional</b> &minus; Use this strategy for read-mostly data where it is critical to prevent stale data in concurrent transactions, in the rare case of an update.</p></li>
<li><p><b>Read-write</b> &minus; Again use this strategy for read-mostly data where it is critical to prevent stale data in concurrent transactions, in the rare case of an update.</p></li>
<li><p><b>Nonstrict-read-write</b> &minus; This strategy makes no guarantee of consistency between the cache and the database. Use this strategy if data hardly ever changes and a small likelihood of stale data is not of critical concern.</p></li>
<li><p><b>Read-only</b> &minus; A concurrency strategy suitable for data, which never changes. Use it for reference data only.</p></li>
</ul>
<p>If we are going to use second-level caching for our <b>Employee</b> class, let us add the mapping element required to tell Hibernate to cache Employee instances using read-write strategy.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
"-//Hibernate/Hibernate Mapping DTD//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt; 
&lt;hibernate-mapping&gt;
   &lt;class name = "Employee" table = "EMPLOYEE"&gt;
      
      &lt;meta attribute = "class-description"&gt;
         This class contains the employee detail. 
      &lt;/meta&gt;
      
      &lt;cache usage = "read-write"/&gt;
      
      &lt;id name = "id" type = "int" column = "id"&gt;
         &lt;generator class="native"/&gt;
      &lt;/id&gt;
      
      &lt;property name = "firstName" column = "first_name" type = "string"/&gt;
      &lt;property name = "lastName" column = "last_name" type = "string"/&gt;
      &lt;property name = "salary" column = "salary" type = "int"/&gt;
      
   &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</pre>
<p>The usage="read-write" attribute tells Hibernate to use a read-write concurrency strategy for the defined cache.</p>
<h2>Cache Provider</h2>
<p>Your next step after considering the concurrency strategies, you will use your cache candidate classes to pick a cache provider. Hibernate forces you to choose a single cache provider for the whole application.</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Cache Name &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>EHCache</b></p>
<p>It can cache in memory or on disk and clustered caching and it supports the optional Hibernate query result cache.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>OSCache</b></p>
<p>Supports caching to memory and disk in a single JVM with a rich set of expiration policies and query cache support.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>warmCache</b></p>
<p>A cluster cache based on JGroups. It uses clustered invalidation, but doesn't support the Hibernate query cache.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>JBoss Cache</b></p>
<p>A fully transactional replicated clustered cache also based on the JGroups multicast library. It supports replication or invalidation, synchronous or asynchronous communication, and optimistic and pessimistic locking. The Hibernate query cache is supported.</p>
</td>
</tr>
</table>
<p>Every cache provider is not compatible with every concurrency strategy. The following compatibility matrix will help you choose an appropriate combination.</p>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th class="ts">Strategy/Provider</th>
<th class="ts">Read-only</th>
<th class="ts">Nonstrictread-write</th>
<th class="ts">Read-write</th>
<th class="ts">Transactional</th>
</tr>
<tr>
<td>EHCache</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>OSCache</td>
<td>X</td>
<td>X</td>
<td>X</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>SwarmCache</td>
<td>X</td>
<td>X</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>JBoss Cache</td>
<td>X</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>X</td>
</tr>
</table>
<p>You will specify a cache provider in hibernate.cfg.xml configuration file. We choose EHCache as our second-level cache provider &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;!DOCTYPE hibernate-configuration SYSTEM 
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;
&lt;hibernate-configuration&gt;
   &lt;session-factory&gt;
   
      &lt;property name = "hibernate.dialect"&gt;
         org.hibernate.dialect.MySQLDialect
      &lt;/property&gt;
   
      &lt;property name = "hibernate.connection.driver_class"&gt;
         com.mysql.jdbc.Driver
      &lt;/property&gt;
   
      &lt;!-- Assume students is the database name --&gt;
   
      &lt;property name = "hibernate.connection.url"&gt;
         jdbc:mysql://localhost/test
      &lt;/property&gt;
   
      &lt;property name = "hibernate.connection.username"&gt;
         root
      &lt;/property&gt;
   
      &lt;property name = "hibernate.connection.password"&gt;
         root123
      &lt;/property&gt;
   
      &lt;property name = "hibernate.cache.provider_class"&gt;
         org.hibernate.cache.EhCacheProvider
      &lt;/property&gt;
   
      &lt;!-- List of XML mapping files --&gt;
      &lt;mapping resource = "Employee.hbm.xml"/&gt;
   
   &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;
</pre>
<p>Now, you need to specify the properties of the cache regions. EHCache has its own configuration file, <b>ehcache.xml</b>, which should be in the CLASSPATH of the application. A cache configuration in ehcache.xml for the Employee class may look like this &minus;</p>
<pre class="prettyprint notranslate">
&lt;diskStore path="java.io.tmpdir"/&gt;

&lt;defaultCache
maxElementsInMemory = "1000"
eternal = "false"
timeToIdleSeconds = "120"
timeToLiveSeconds = "120"
overflowToDisk = "true"
/&gt;

&lt;cache name = "Employee"
maxElementsInMemory = "500"
eternal = "true"
timeToIdleSeconds = "0"
timeToLiveSeconds = "0"
overflowToDisk = "false"
/&gt;
</pre>
<p>That's it, now we have second-level caching enabled for the Employee class and Hibernate, now hits the second-level cache whenever you navigate to an Employee or when you load an Employee by identifier.</p>
<p>You should analyze your all the classes and choose appropriate caching strategy for each of the classes. Sometime, second-level caching may downgrade the performance of the application. So, it is recommended to benchmark your application first, without enabling caching and later on enable your well suited caching and check the performance. If caching is not improving system performance, then there is no point in enabling any type of caching.</p>
<h2>The Query-level Cache</h2>
<p>To use the query cache, you must first activate it using the <b>hibernate.cache.use_query_cache="true"</b> property in the configuration file. By setting this property to true, you make Hibernate create the necessary caches in memory to hold the query and identifier sets.</p>
<p>Next, to use the query cache, you use the setCacheable(Boolean) method of the Query class. For example &minus;</p>
<pre class="prettyprint notranslate">
Session session = SessionFactory.openSession();
Query query = session.createQuery("FROM EMPLOYEE");
query.setCacheable(true);
List users = query.list();
SessionFactory.closeSession();
</pre>
<p>Hibernate also supports very fine-grained cache support through the concept of a cache region. A cache region is part of the cache that's given a name.</p>
<pre class="prettyprint notranslate">
Session session = SessionFactory.openSession();
Query query = session.createQuery("FROM EMPLOYEE");
query.setCacheable(true);
query.setCacheRegion("employee");
List users = query.list();
SessionFactory.closeSession();
</pre>
<p>This code uses the method to tell Hibernate to store and look for the query in the employee area of the cache.</p>
<h1>Hibernate - Batch Processing</h1>
<p>Consider a situation when you need to upload a large number of records into your database using Hibernate. Following is the code snippet to achieve this using Hibernate &minus;</p>
<pre class="prettyprint notranslate">
Session session = SessionFactory.openSession();
Transaction tx = session.beginTransaction();
for ( int i=0; i&lt;100000; i++ ) {
   Employee employee = new Employee(.....);
   session.save(employee);
}
tx.commit();
session.close();
</pre>
<p>By default, Hibernate will cache all the persisted objects in the session-level cache and ultimately your application would fall over with an <b>OutOfMemoryException</b> somewhere around the 50,000th row. You can resolve this problem, if you are using <b>batch processing</b> with Hibernate.</p>
<p>To use the batch processing feature, first set <b>hibernate.jdbc.batch_size</b> as batch size to a number either at 20 or 50 depending on object size. This will tell the hibernate container that every X rows to be inserted as batch. To implement this in your code, we would need to do little modification as follows &minus;</p>
<pre class="prettyprint notranslate">
Session session = SessionFactory.openSession();
Transaction tx = session.beginTransaction();
for ( int i=0; i&lt;100000; i++ ) {
   Employee employee = new Employee(.....);
   session.save(employee);
   if( i % 50 == 0 ) { // Same as the JDBC batch size
      //flush a batch of inserts and release memory:
      session.flush();
      session.clear();
   }
}
tx.commit();
session.close();
</pre>
<p>Above code will work fine for the INSERT operation, but if you are willing to make UPDATE operation, then you can achieve using the following code &minus;</p>
<pre class="prettyprint notranslate">
Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

ScrollableResults employeeCursor = session.createQuery("FROM EMPLOYEE").scroll();
int count = 0;

while ( employeeCursor.next() ) {
   Employee employee = (Employee) employeeCursor.get(0);
   employee.updateEmployee();
   seession.update(employee); 
   if ( ++count % 50 == 0 ) {
      session.flush();
      session.clear();
   }
}
tx.commit();
session.close();
</pre>
<h2>Batch Processing Example</h2>
<p>Let us modify the configuration file to add <b>hibernate.jdbc.batch_size</b> property &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;!DOCTYPE hibernate-configuration SYSTEM 
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;

&lt;hibernate-configuration&gt;
   &lt;session-factory&gt;
   
      &lt;property name = "hibernate.dialect"&gt;
         org.hibernate.dialect.MySQLDialect
      &lt;/property&gt;
   
      &lt;property name = "hibernate.connection.driver_class"&gt;
         com.mysql.jdbc.Driver
      &lt;/property&gt;

      &lt;!-- Assume students is the database name --&gt;
   
      &lt;property name = "hibernate.connection.url"&gt;
         jdbc:mysql://localhost/test
      &lt;/property&gt;
   
      &lt;property name = "hibernate.connection.username"&gt;
         root
      &lt;/property&gt;
   
      &lt;property name = "hibernate.connection.password"&gt;
         root123
      &lt;/property&gt;
   
      &lt;property name = "hibernate.jdbc.batch_size">
         50
      &lt;/property&gt;

      &lt;!-- List of XML mapping files --&gt;
      &lt;mapping resource = "Employee.hbm.xml"/&gt;

   &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;
</pre>
<p>Consider the following POJO Employee class &minus;</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String firstName; 
   private String lastName;   
   private int salary;  

   public Employee() {}
   
   public Employee(String fname, String lname, int salary) {
      this.firstName = fname;
      this.lastName = lname;
      this.salary = salary;
   }
   
   public int getId() {
      return id;
   }
   
   public void setId( int id ) {
      this.id = id;
   }
   
   public String getFirstName() {
      return firstName;
   }
   
   public void setFirstName( String first_name ) {
      this.firstName = first_name;
   }
   
   public String getLastName() {
      return lastName;
   }
   
   public void setLastName( String last_name ) {
      this.lastName = last_name;
   }
   
   public int getSalary() {
      return salary;
   }
   
   public void setSalary( int salary ) {
      this.salary = salary;
   }
}
</pre>
<p>Let us create the following EMPLOYEE table to store the Employee objects &minus;</p>
<pre class="prettyprint notranslate">
create table EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>Following will be the mapping file to map the Employee objects with EMPLOYEE table &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
"-//Hibernate/Hibernate Mapping DTD//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt; 

&lt;hibernate-mapping&gt;
   &lt;class name = "Employee" table = "EMPLOYEE"&gt;
      
      &lt;meta attribute = "class-description"&gt;
         This class contains the employee detail. 
      &lt;/meta&gt;
      
      &lt;id name = "id" type = "int" column = "id"&gt;
         &lt;generator class="native"/&gt;
      &lt;/id&gt;
      
      &lt;property name = "firstName" column = "first_name" type = "string"/&gt;
      &lt;property name = "lastName" column = "last_name" type = "string"/&gt;
      &lt;property name = "salary" column = "salary" type = "int"/&gt;
      
   &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</pre>
<p>Finally, we will create our application class with the main() method to run the application where we will use <b>flush()</b> and <b>clear()</b> methods available with Session object so that Hibernate keeps writing these records into the database instead of caching them in the memory.</p>
<pre class="prettyprint notranslate">
import java.util.*; 
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class ManageEmployee {
   private static SessionFactory factory; 
   public static void main(String[] args) {
      
      try {
         factory = new Configuration().configure().buildSessionFactory();
      } catch (Throwable ex) { 
         System.err.println("Failed to create sessionFactory object." + ex);
         throw new ExceptionInInitializerError(ex); 
      }
      ManageEmployee ME = new ManageEmployee();

      /* Add employee records in batches */
      ME.addEmployees( );
   }
   
   /* Method to create employee records in batches */
   public void addEmployees( ){
      Session session = factory.openSession();
      Transaction tx = null;
      Integer employeeID = null;
      
      try {
         tx = session.beginTransaction();
         for ( int i=0; i&lt;100000; i++ ) {
            String fname = "First Name " + i;
            String lname = "Last Name " + i;
            Integer salary = i;
            Employee employee = new Employee(fname, lname, salary);
            session.save(employee);
         	if( i % 50 == 0 ) {
               session.flush();
               session.clear();
            }
         }
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
      return ;
   }
}
</pre>
<h2>Compilation and Execution</h2>
<p>Here are the steps to compile and run the above mentioned application. Make sure, you have set PATH and CLASSPATH appropriately before proceeding for the compilation and execution.</p>
<ul class="list">
<li><p>Create hibernate.cfg.xml configuration file as explained above.</p></li>
<li><p>Create Employee.hbm.xml mapping file as shown above.</p></li>
<li><p>Create Employee.java source file as shown above and compile it.</p></li>
<li><p>Create ManageEmployee.java source file as shown above and compile it.</p></li>
<li><p>Execute ManageEmployee binary to run the program, which will create 100000 records in EMPLOYEE table.</p></li>
</ul>
<h1>Hibernate - Interceptors</h1>
<p>As you have learnt that in Hibernate, an object will be created and persisted. Once the object has been changed, it must be saved back to the database. This process continues until the next time the object is needed, and it will be loaded from the persistent store.</p>
<p>Thus an object passes through different stages in its life cycle and <b>Interceptor Interface</b> provides methods, which can be called at different stages to perform some required tasks. These methods are callbacks from the session to the application, allowing the application to inspect and/or manipulate properties of a persistent object before it is saved, updated, deleted or loaded. Following is the list of all the methods available within the Interceptor interface &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:10%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>findDirty()</b></p>
<p>This method is be called when the <b>flush()</b> method is called on a Session object.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>instantiate()</b></p>
<p>This method is called when a persisted class is instantiated.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>isUnsaved()</b></p>
<p>This method is called when an object is passed to the <b>saveOrUpdate()</b> method/</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>onDelete()</b></p>
<p>This method is called before an object is deleted.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>onFlushDirty()</b></p>
<p>This method is called when Hibernate detects that an object is dirty (i.e. have been changed) during a flush i.e. update operation.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>onLoad()</b></p>
<p>This method is called before an object is initialized.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>onSave()</b></p>
<p>This method is called before an object is saved.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>postFlush()</b></p>
<p>This method is called after a flush has occurred and an object has been updated in memory.</p>
</td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<p><b>preFlush()</b></p>
<p>This method is called before a flush.</p>
</td>
</tr>
</table>
<p>Hibernate Interceptor gives us total control over how an object will look to both the application and the database.</p>
<h2>How to Use Interceptors?</h2>
<p>To build an interceptor, you can either implement <b>Interceptor</b> class directly or extend <b>EmptyInterceptor</b> class. Following will be the simple steps to use Hibernate Interceptor functionality.</p>
<h2>Create Interceptors</h2>
<p>We will extend EmptyInterceptor in our example where Interceptor's method will be called automatically when <b>Employee</b> object is created and updated. You can implement more methods as per your requirements.</p>
<pre class="prettyprint notranslate">
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;

import org.hibernate.EmptyInterceptor;
import org.hibernate.Transaction;
import org.hibernate.type.Type;

public class MyInterceptor extends EmptyInterceptor {
   private int updates;
   private int creates;
   private int loads;

   public void onDelete(Object entity, Serializable id,
      Object[] state, String[] propertyNames, Type[] types) {
       // do nothing
   }

   // This method is called when Employee object gets updated.
   public boolean onFlushDirty(Object entity, Serializable id,
      Object[] currentState, Object[] previousState, String[] propertyNames,
      Type[] types) {
         if ( entity instanceof Employee ) {
            System.out.println("Update Operation");
            return true; 
         }
         return false;
   }
	
   public boolean onLoad(Object entity, Serializable id,
      Object[] state, String[] propertyNames, Type[] types) {
         // do nothing
         return true;
   }
   
   // This method is called when Employee object gets created.
   public boolean onSave(Object entity, Serializable id,
      Object[] state, String[] propertyNames, Type[] types) {
         if ( entity instanceof Employee ) {
            System.out.println("Create Operation");
            return true; 
         }
         return false;
   }
   
   //called before commit into database
   public void preFlush(Iterator iterator) {
      System.out.println("preFlush");
   }
   
   //called after committed into database
   public void postFlush(Iterator iterator) {
      System.out.println("postFlush");
   }
}
</pre>
<h2>Create POJO Classes</h2>
<p>Now, let us modify a little bit our first example where we used EMPLOYEE table and Employee class to play with &minus;</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String firstName; 
   private String lastName;   
   private int salary;  

   public Employee() {}
   
   public Employee(String fname, String lname, int salary) {
      this.firstName = fname;
      this.lastName = lname;
      this.salary = salary;
   }
   
   public int getId() {
      return id;
   }
   
   public void setId( int id ) {
      this.id = id;
   }
   
   public String getFirstName() {
      return firstName;
   }
   
   public void setFirstName( String first_name ) {
      this.firstName = first_name;
   }
   
   public String getLastName() {
      return lastName;
   }
   
   public void setLastName( String last_name ) {
      this.lastName = last_name;
   }
   
   public int getSalary() {
      return salary;
   }
   
   public void setSalary( int salary ) {
      this.salary = salary;
   }
}
</pre>
<h2>Create Database Tables</h2>
<p>Second step would be creating tables in your database. There would be one table corresponding to each object, you are willing to provide persistence. Consider the objects explained above, need to be stored and retrieved into the following RDBMS table &minus;</p>
<pre class="prettyprint notranslate">
create table EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<h2>Create Mapping Configuration File</h2>
<p>This step is to create a mapping file that instructs Hibernate — how to map the defined class or classes to the database tables.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
"-//Hibernate/Hibernate Mapping DTD//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt; 

&lt;hibernate-mapping&gt;
   &lt;class name = "Employee" table = "EMPLOYEE"&gt;
      
      &lt;meta attribute = "class-description"&gt;
         This class contains the employee detail. 
      &lt;/meta&gt;
      
      &lt;id name = "id" type = "int" column = "id"&gt;
         &lt;generator class="native"/&gt;
      &lt;/id&gt;
      
      &lt;property name = "firstName" column = "first_name" type = "string"/&gt;
      &lt;property name = "lastName" column = "last_name" type = "string"/&gt;
      &lt;property name = "salary" column = "salary" type = "int"/&gt;
      
   &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</pre>
<h2>Create Application Class</h2>
<p>Finally, we will create our application class with the main() method to run the application. Here, it should be noted that while creating session object, we used our Interceptor class as an argument.</p>
<pre class="prettyprint notranslate">
import java.util.List; 
import java.util.Date;
import java.util.Iterator; 
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class ManageEmployee {
   private static SessionFactory factory; 
   public static void main(String[] args) {
      
      try {
         factory = new Configuration().configure().buildSessionFactory();
      } catch (Throwable ex) { 
         System.err.println("Failed to create sessionFactory object." + ex);
         throw new ExceptionInInitializerError(ex); 
      }

      ManageEmployee ME = new ManageEmployee();

      /* Add few employee records in database */
      Integer empID1 = ME.addEmployee("Zara", "Ali", 1000);
      Integer empID2 = ME.addEmployee("Daisy", "Das", 5000);
      Integer empID3 = ME.addEmployee("John", "Paul", 10000);

      /* List down all the employees */
      ME.listEmployees();

      /* Update employee's records */
      ME.updateEmployee(empID1, 5000);

      /* Delete an employee from the database */
      ME.deleteEmployee(empID2);

      /* List down new list of the employees */
      ME.listEmployees();
   }
   
   /* Method to CREATE an employee in the database */
   public Integer addEmployee(String fname, String lname, int salary){
      Session session = factory.openSession( new MyInterceptor() );
      Transaction tx = null;
      Integer employeeID = null;
      
      try {
         tx = session.beginTransaction();
         Employee employee = new Employee(fname, lname, salary);
         employeeID = (Integer) session.save(employee); 
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
      return employeeID;
   }
   
   /* Method to  READ all the employees */
   public void listEmployees( ){
      Session session = factory.openSession( new MyInterceptor() );
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         List employees = session.createQuery("FROM Employee").list(); 
         for (Iterator iterator = employees.iterator(); iterator.hasNext();){
            Employee employee = (Employee) iterator.next(); 
            System.out.print("First Name: " + employee.getFirstName()); 
            System.out.print("  Last Name: " + employee.getLastName()); 
            System.out.println("  Salary: " + employee.getSalary()); 
         }
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
   
   /* Method to UPDATE salary for an employee */
   public void updateEmployee(Integer EmployeeID, int salary ){
      Session session = factory.openSession( new MyInterceptor() );
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         Employee employee = (Employee)session.get(Employee.class, EmployeeID); 
         employee.setSalary( salary );
		 session.update(employee); 
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
   
   /* Method to DELETE an employee from the records */
   public void deleteEmployee(Integer EmployeeID){
      Session session = factory.openSession( new MyInterceptor() );
      Transaction tx = null;
      
      try {
         tx = session.beginTransaction();
         Employee employee = (Employee)session.get(Employee.class, EmployeeID); 
         session.delete(employee); 
         tx.commit();
      } catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      } finally {
         session.close(); 
      }
   }
}
</pre>
<h2>Compilation and Execution</h2>
<p>Here are the steps to compile and run the above mentioned application. Make sure, you have set PATH and CLASSPATH appropriately before proceeding for the compilation and execution.</p>
<ul class="list">
<li><p>Create hibernate.cfg.xml configuration file as explained in configuration chapter.</p></li>
<li><p>Create Employee.hbm.xml mapping file as shown above.</p></li>
<li><p>Create Employee.java source file as shown above and compile it.</p></li>
<li><p>Create MyInterceptor.java source file as shown above and compile it.</p></li>
<li><p>Create ManageEmployee.java source file as shown above and compile it.</p></li>
<li><p>Execute ManageEmployee binary to run the program.</p></li>
</ul>
<p>You would get the following result, and records would be created in the EMPLOYEE table.</p>
<pre class="prettyprint notranslate">
$java ManageEmployee
.......VARIOUS LOG MESSAGES WILL DISPLAY HERE........

Create Operation
preFlush
postFlush
Create Operation
preFlush
postFlush
Create Operation
preFlush
postFlush
First Name: Zara  Last Name: Ali  Salary: 1000
First Name: Daisy  Last Name: Das  Salary: 5000
First Name: John  Last Name: Paul  Salary: 10000
preFlush
postFlush
preFlush
Update Operation
postFlush
preFlush
postFlush
First Name: Zara  Last Name: Ali  Salary: 5000
First Name: John  Last Name: Paul  Salary: 10000
preFlush
postFlush
</pre>
<p>If you check your EMPLOYEE table, it should have the following records &minus;</p>
<pre class="prettyprint notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
| 29 | Zara       | Ali       |   5000 |
| 31 | John       | Paul      |  10000 |
+----+------------+-----------+--------+
2 rows in set (0.00 sec
mysql&gt;
</pre>
<hr />
<div class="pre-btn">
<a href="/hibernate/hibernate_questions_answers.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="print-btn center">
<a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>
</div>
<div class="nxt-btn">
<a href="/hibernate/hibernate_useful_resources.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<hr />
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div class="bottomadtag">Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
<div class="row">
<div class="col-md-3" id="rightbar">
<div class="simple-ad">
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/hibernate/hibernate_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/facebookIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/hibernate/hibernate_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/twitterIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/hibernate/hibernate_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/linkedinIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/hibernate/hibernate_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/googlePlusIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/hibernate/hibernate_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/StumbleUponIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/hibernate/hibernate_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;">
<img src="/images/reddit.jpg" alt="img" />
</a>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="footer-copyright">
<div class="container">
<div class="row">
<div class="col-md-1">
<a href="index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="/scripts/img/logo-footer.png"> </a>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <nav id="sub-menu">
      <ul>
         <li><a href="/about/faq.htm">FAQ's</a></li>
         <li><a href="/about/about_privacy.htm#cookies">Cookies Policy</a></li>
         <li><a href="/about/contact_us.htm">Contact</a></li>
      </ul>
   </nav>
</div>
<div class="col-md-3 col-sm-12 col-xs-12">
<p>&copy; Copyright 2018. All Rights Reserved.</p>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <div class="news-group">
      <input type="text" class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}">
      <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span>
      <div id="newsresponse"></div>
   </div>
</div>
</div>
</div>
</div>
</div>
<!-- Libs -->
<script src="/theme/js/custom-min.js?v=7"></script>
<script src="https://www.google-analytics.com/urchin.js">
</script>
<script>
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script>
</div>
</body>
</html>
