<!DOCTYPE html>
<!--[if IE 8]><html class="ie ie8"> <![endif]-->
<!--[if IE 9]><html class="ie ie9"> <![endif]-->
<!--[if gt IE 9]><!-->	<html> <!--<![endif]-->
<head>
<!-- Basic -->
<meta charset="utf-8">
<title>Compiler Design - Code Generation</title>
<meta name="description" content="Compiler Design Code Generation - Learn Compiler Designs basics along with Overview, Lexical Analyzer, Syntax Analysis, Semantic Analysis, Run-Time Environment, Symbol Tables, Intermediate Code Generation, Code Generation and Code Optimization." />
<meta name="keywords" content="Learning, Compiler, Designs, Lexical Analyzer, Syntax Analysis, Semantic Analysis, Run-Time Environment, Symbol Tables, Intermediate Code Generation, Code Generation, Code Optimization, Tutorial." />
<base href="https://www.tutorialspoint.com/" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="website" />
<meta property="fb:app_id" content="471319149685276" />
<meta property="og:site_name" content="www.tutorialspoint.com" />
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="author" content="tutorialspoint.com">
<script type="text/javascript" src="https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2"></script>
<link rel="stylesheet" href="https://www.tutorialspoint.com/theme/css/style-min.css?v=3">
<script>
function openNav() {	
  document.getElementById("mySidenav").style.width = "250px";
  document.getElementById("right_obs").style.display = "block";
}
function closeNav() {
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
function close_obs_sidenav(){
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
</script>
<!-- Head Libs -->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]-->
<style>
select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }
.btnsbmt{ background: #02ad73 !important;}
ul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}
div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #02ad73 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #02ad73 !important;}
.submenu-item{ border-bottom: 2px solid #02ad73 !important; border-top: 2px solid #02ad73 !important }
.ace_scroller{overflow: auto!important;}
a.demo{font-family: "Open Sans",Arial,sans-serif; background:#02ad73; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}
a.demo:hover{opacity:.8}
</style>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
</head>
<body onload="prettyPrint()">
<div class="wrapLoader">
   <div class="imgLoader">
      <img  src="/images/loading-cg.gif" alt="" width="70" height="70" />
   </div>
</div>
<div id="right_obs" class="display-none" onclick="close_obs_sidenav()"></div>
<header>
   <div class="container">			
      <h1 class="logo">
      <a href="index.htm" title="tutorialspoint">
      <img alt="tutorialspoint" src="/compiler_design/images/logo.png">
      </a>
      </h1>			
      <ul class="tp-inline-block pull-right" id="tp-head-icons">
        <li>
           <div class="tp-second-nav tp-display-none tp-pointer" onclick="openNav()">
              <i class="fa fa-th-large fa-lg"></i>
           </div>
        </li>
     </ul>
     <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull" style="top: 24px!important"> <i class="icon icon-bars"></i> </button>
      <nav>
         <ul class="nav nav-pills nav-top">
            <li><a href="/about/about_careers.htm" style="background: #fffb09; font-weight: bold;"><i class="icon icon-suitcase"></i> Jobs</a></li>
            <li> <a target="_blank" href="/programming_examples/"><i class="fa fa-cubes"></i> &nbsp;Examples</a> </li>
            <li> <a href="https://www.tutorialspoint.com/whiteboard.htm"><img src="theme/css/icons/image-editor.png" alt="Whiteboard" title="Whiteboard"> &nbsp;Whiteboard</a> </li>
            <li> <a href="https://www.tutorialspoint.com/netmeeting.php"><i class="fa-camera"></i> &nbsp;Net Meeting</a> </li>
            <li> <a href="/online_dev_tools.htm"> <i class="dev-tools-menu" style="opacity:.5"></i> Tools </a> </li>
            <li> <a href="/articles/index.php"><i class="icon icon-file-text-o"></i> &nbsp;Articles</a> </li>            
            <li class="top-icons">
              <ul class="social-icons">
              <li class="facebook"><a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook">Facebook</a></li>
              <li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
              <li class="twitter"><a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter">Twitter</a></li>
              <li class="linkedin"><a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin">Linkedin</a></li>
              <li class="youtube"><a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube">YouTube</a></li>
              </ul>
           </li>
         </ul>
      </nav>
    </div>
     <div class="sidenav" id="mySidenav">
     <div class="navbar nav-main">
      <div class="container">
         <nav class="nav-main mega-menu">
            <ul class="nav nav-pills nav-main" id="mainMenu">
               <li class="dropdown no-sub-menu"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li>   
               <li class="dropdown no-sub-menu"><a class="dropdown" href="/questions/index.php"><i class="fa fa-send"></i> Q/A </a> </li>
               <li class="dropdown"><a class="dropdown" href="tutorialslibrary.htm"><span class="tut-lib"> Library </span></a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="videotutorials/index.htm"><i class="fa-toggle-right"></i> Videos </a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="tutor_connect/index.php"><i class="fa-user"> </i> Tutors</a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://store.tutorialspoint.com/"><i class="fa-usd"></i> Store </a> </li>
               <li class="dropdown no-sub-menu">
                  <div class="searchform-popup">
                     <input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
                     <div class="magnifying-glass"><i class="icon-search"></i> Search </div>
                 </div>
               </li>
            </ul>
         </nav>
        </div>
      </div>	
     </div>	
   </div>	
</header>
<div style="clear:both;"></div>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-2">
<aside class="sidebar">
<div class="mini-logo">
<img src="/compiler_design/images/compiler-design-mini-logo.jpg" alt="Compiler Design Tutorial" />
</div>
<ul class="nav nav-list primary left-menu" >
<li><a class="videolink" href="/compiler_design/index.asp" target="_blank"><img src="/compiler_design/images/compiler-design-video-tutorials.jpg" alt="Compiler Design Video Tutorials" /></a></li>
</ul>
<ul class="nav nav-list primary left-menu" >
<li class="heading">Compiler Design Tutorial</li>
<li><a target="_top" href="/compiler_design/index.htm">Compiler Design - Home</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_overview.htm">Compiler Design - Overview</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_architecture.htm">Compiler Design - Architecture</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_phases_of_compiler.htm">Compiler Design - Phases of Compiler</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_lexical_analysis.htm">Compiler Design - Lexical Analysis</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_regular_expressions.htm">Compiler - Regular Expressions</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_finite_automata.htm">Compiler Design - Finite Automata</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_syntax_analysis.htm">Compiler Design - Syntax Analysis</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_types_of_parsing.htm">Compiler Design - Types of Parsing</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_top_down_parser.htm">Compiler Design - Top-Down Parser</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_bottom_up_parser.htm">Compiler Design - Bottom-Up Parser</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_error_recovery.htm">Compiler Design - Error Recovery</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_semantic_analysis.htm">Compiler Design - Semantic Analysis</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_runtime_environment.htm">Compiler - Run-time Environment</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_symbol_table.htm">Compiler Design - Symbol Table</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_intermediate_code_generations.htm">Compiler - Intermediate Code</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_code_generation.htm">Compiler Design - Code Generation</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_code_optimization.htm">Compiler Design - Code Optimization</a></li>
</ul>
<ul class="nav nav-list primary left-menu" >
<li class="heading">Compiler Design Useful Resources</li>
<li><a target="_top" href="/compiler_design/compiler_design_quick_guide.htm">Compiler Design - Quick Guide</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_useful_resources.htm">Compiler Design - Useful Resources</a></li>
<li><a target="_top" href="/compiler_design/compiler_design_discussion.htm">Compiler Design - Discussion</a></li>
</ul>
<ul class="nav nav-list primary push-bottom left-menu special">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>Compiler Design - Code Generation</h1>
<hr />
<div style="padding-bottom:5px;padding-left:10px;text-align: center;">Advertisements</div>
<div style="text-align: center;">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="/compiler_design/compiler_design_intermediate_code_generations.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/compiler_design/compiler_design_code_optimization.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr />
<p>Code generation can be considered as the final phase of compilation. Through post code generation, optimization process can be applied on the code, but that can be seen as a part of code generation phase itself. The code generated by the compiler is an object code of some lower-level programming language, for example, assembly language. We have seen that the source code written in a higher-level language is transformed into a lower-level language that results in a lower-level object code, which should have the following minimum properties:</p>
<ul class="list">
<li>It should carry the exact meaning of the source code.</li>
<li>It should be efficient in terms of CPU usage and memory management.</li>
</ul>
<p>We will now see how the intermediate code is transformed into target object code (assembly code, in this case).</p>
<h2>Directed Acyclic Graph</h2>
<p>Directed Acyclic Graph (DAG) is a tool that depicts the structure of basic blocks, helps to see the flow of values flowing among the basic blocks, and offers optimization too. DAG provides easy transformation on basic blocks. DAG can be understood here:</p>
<ul class="list">
<li><p>Leaf nodes represent identifiers, names or constants.</p></li>
<li><p>Interior nodes represent operators.</p></li>
<li><p>Interior nodes also represent the results of expressions or the identifiers/name where the values are to be stored or assigned.</p></li>
</ul>
<p><b>Example:</b></p>
<pre class="prettyprint notranslate">
t<sub>0</sub> = a + b
t<sub>1</sub> = t<sub>0</sub> + c
d = t<sub>0</sub> + t<sub>1</sub>
</pre>
<table class="table table-bordered">
<tr>
<td>
<img src="/compiler_design/images/directed_acyclic_graph_1.jpg" alt="Directed Acyclic Graph" />
<p>[t<sub>0</sub> = a + b]</p>
</td>
<td>
<img src="/compiler_design/images/directed_acyclic_graph_2.jpg" alt="Directed Acyclic Graph" />
<p>[t<sub>1</sub> = t<sub>0</sub> + c]</p>
</td>
<td>
<img src="/compiler_design/images/directed_acyclic_graph_3.jpg" alt="Directed Acyclic Graph" />
<p>[d = t<sub>0</sub> + t<sub>1</sub>]</p>
</td>
</tr>
</table>
<h2>Peephole Optimization</h2>
<p>This optimization technique works locally on the source code to transform it into an optimized code. By locally, we mean a small portion of the code block at hand. These methods can be applied on intermediate codes as well as on target codes. A bunch of statements is analyzed and are checked for the following possible optimization:</p>
<h3>Redundant instruction elimination</h3>
<p>At source code level, the following can be done by the user:</p>
<table class="table table-bordered">
<tr>
<td style="padding:3px;">
<pre class="prettyprint notranslate">
int add_ten(int x)
   {
   int y, z;
   y = 10;
   z = x + y;
   return z;
   }
</pre>
</td>
<td style="padding:3px;">
<pre class="prettyprint notranslate">
int add_ten(int x)
   {
   int y;
   y = 10;
   y = x + y;
   return y;
   }
</pre>
</td>
<td style="padding:3px;">
<pre class="prettyprint notranslate">
int add_ten(int x)
   {
   int y = 10;
   return x + y;
   }
   
   
</pre>
</td>
<td style="padding:3px;">
<pre class="prettyprint notranslate">
int add_ten(int x)
   {
   return x + 10;
   }
   
   
   
</pre>
</td>
</tr>
</table>
<p>At compilation level, the compiler searches for instructions redundant in nature. Multiple loading and storing of instructions may carry the same meaning even if some of them are removed. For example:</p>
<ul class="list">
<li>MOV x, R0</li>
<li>MOV R0, R1</li>
</ul>
<p>We can delete the first instruction and re-write the sentence as:</p>
<pre class="prettyprint notranslate">
MOV x, R1
</pre>

<h3>Unreachable code</h3>
<p>Unreachable code is a part of the program code that is never accessed because of programming constructs. Programmers may have accidently written a piece of code that can never be reached.</p>
<p><b>Example:</b></p>
<pre class="prettyprint notranslate">
void add_ten(int x)
{
   return x + 10;
   printf(“value of x is %d”, x);
}
</pre>
<p>In this code segment, the <b>printf</b> statement will never be executed as the program control returns back before it can execute, hence <b>printf</b> can be removed.</p>
<h3>Flow of control optimization</h3>
<p>There are instances in a code where the program control jumps back and forth without performing any significant task. These jumps can be removed. Consider the following chunk of code:</p>
<pre class="prettyprint notranslate">
...		
MOV R1, R2
GOTO L1
...
L1 :   GOTO L2
L2 :   INC R1
</pre>
<p>In this code,label L1 can be removed as it  passes the control to L2. So instead of jumping to L1 and then to L2, the control can directly reach L2, as shown below:</p>
<pre class="prettyprint notranslate">
...		
MOV R1, R2
GOTO L2
...
L2 :   INC R1
</pre>
<h3>Algebraic expression simplification</h3>
<p>There are occasions where algebraic expressions can be made simple. For example, the expression <b>a = a + 0</b> can be replaced by <b>a</b> itself and the expression a = a + 1 can simply be replaced by INC a.</p>
<h3>Strength reduction</h3>
<p>There are operations that consume more time and space. Their ‘strength’ can be reduced by replacing them with other operations that consume less time and space, but produce the same result.</p>
<p>For example, <b>x * 2</b> can be replaced by <b>x << 1</b>, which involves only one left shift. Though the output of a * a and a<sup>2</sup> is same, a<sup>2</sup> is much more efficient to implement.</p>
<h3>Accessing machine instructions</h3>
<p>The target machine can deploy more sophisticated instructions, which can have the capability to perform specific operations much efficiently. If the target code can accommodate those instructions directly, that will not only improve the quality of code, but also yield more efficient results.</p>
<h2>Code Generator</h2>
<p>A code generator is expected to have an understanding of the target machine’s runtime environment and its instruction set. The code generator should take the following things into consideration to generate the code:</p>
<ul class="list">
<li><p><b>Target language</b> : The code generator has to be aware of the nature of the target language for which the code is to be transformed. That language may facilitate some machine-specific instructions to help the compiler generate the code in a more convenient way. The target machine can have either CISC or RISC processor architecture.</p></li>
<li><p><b>IR Type</b> :	Intermediate representation has various forms. It can be in Abstract Syntax Tree (AST) structure, Reverse Polish Notation, or 3-address code.</p></li>
<li><p><b>Selection of instruction</b> : The code generator takes Intermediate Representation as input and converts (maps) it into target machine’s instruction set. One representation can have many ways (instructions) to convert it, so it becomes the responsibility of the code generator to choose the appropriate instructions wisely.</p></li>
<li><p><b>Register allocation</b> :	A program has a number of values to be maintained during the execution. The target machine’s architecture may not allow all of the values to be kept in the CPU memory or registers. Code generator decides what values to keep in the registers. Also, it decides the registers to be used to keep these values.</p></li>
<li><p><b>Ordering of instructions</b> : At last, the code generator decides the order in which the instruction will be executed. It creates schedules for instructions to execute them.</p></li>
</ul>
<h2>Descriptors</h2>
<p>The code generator has to track both the registers (for availability) and addresses (location of values) while generating the code. For both of them, the following two descriptors are used:</p>
<ul class="list">
<li><p><b>Register descriptor</b> :	Register descriptor is used to inform the code generator about the availability of registers. Register descriptor keeps track of values stored in each register. Whenever a new register is required during code generation, this descriptor is consulted for register availability.</p></li>
<li><p><b>Address descriptor</b> : Values of the names (identifiers) used in the program might be stored at different locations while in execution. Address descriptors are used to keep track of memory locations where the values of identifiers are stored. These locations may include CPU registers, heaps, stacks, memory or a combination of the mentioned locations.</p></li>
</ul>
<p>Code generator keeps both the descriptor updated in real-time. For a load statement, LD R1, x, the code generator:</p>
<ul class="prettyprint notranslate">
<li>updates the Register Descriptor R1 that has value of x and</li>
<li>updates the Address Descriptor (x) to show that one instance of x is in R1.</li>
</ul>
<h2>Code Generation</h2>
<p>Basic blocks comprise of a sequence of three-address instructions. Code generator takes these sequence of instructions as input.</p>
<p><b>Note</b> : If the value of a name is found at more than one place (register, cache, or memory), the register’s value will be preferred over the cache and main memory. Likewise cache’s value will be preferred over the main memory. Main memory is barely given any preference.</p>
<p><b>getReg</b> : Code generator uses <i>getReg</i> function to determine the status of available registers and the location of name values. <i>getReg</i> works as follows:</p>
<ul class="list">
<li><p>If variable Y is already in register R, it uses that register.</p></li>
<li><p>Else if some register R is available, it uses that register.</p></li>
<li><p>Else if both the above options are not possible, it chooses a register that requires minimal number of load and store instructions.</p></li>
</ul>
<p>For an instruction x = y OP z, the code generator may perform the following actions. Let us assume that L is the location (preferably register) where the output of y OP z is to be saved:</p>
<ul class="list">
<li><p>Call function getReg, to decide the location of L.</p></li>
<li><p>Determine the present location (register or memory) of <b>y</b> by consulting the Address Descriptor of <b>y</b>. If <b>y</b> is not presently in register <b>L</b>, then generate the following instruction to copy the value of <b>y</b> to <b>L</b>:</p>
<p>MOV y’, L</p>
<p>where <b>y’</b> represents the copied value of <b>y</b>.</p>
</li>
<li><p>Determine the present location of <b>z</b> using the same method used in step 2 for <b>y</b> and generate the following instruction:</p>
<p>OP z’, L</p>
<p>where <b>z’</b> represents the copied value of <b>z</b>.</p>
</li>
<li><p>Now L contains the value of y OP z, that is intended to be assigned to <b>x</b>. So, if L is a register, update its descriptor to indicate that it contains the value of <b>x</b>. Update the descriptor of <b>x</b> to indicate that it is stored at location <b>L</b>.</p></li>
<li><p>If y and z has no further use, they can be given back to the system.</p></li>
</ul>
<p>Other code constructs like loops and conditional statements are transformed into assembly language in general assembly way.</p>
<hr />
<div class="pre-btn">
<a href="/compiler_design/compiler_design_intermediate_code_generations.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="print-btn center">
<a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>
</div>
<div class="pdf-btn">
<a href="/compiler_design/pdf/compiler_design_code_generation.pdf" title="Compiler Design - Code Generation" target="_blank"><i class="icon icon-file-pdf-o big-font"></i> PDF</a>
</div>
<div class="nxt-btn">
<a href="/compiler_design/compiler_design_code_optimization.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<hr />
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div class="bottomadtag">Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
<div class="row">
<div class="col-md-3" id="rightbar">
<div class="simple-ad">
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/compiler_design/compiler_design_code_generation.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/facebookIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/compiler_design/compiler_design_code_generation.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/twitterIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/compiler_design/compiler_design_code_generation.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/linkedinIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/compiler_design/compiler_design_code_generation.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/googlePlusIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/compiler_design/compiler_design_code_generation.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/StumbleUponIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/compiler_design/compiler_design_code_generation.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;">
<img src="/images/reddit.jpg" alt="img" />
</a>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="footer-copyright">
<div class="container">
<div class="row">
<div class="col-md-1">
<a href="index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="/scripts/img/logo-footer.png"> </a>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <nav id="sub-menu">
      <ul>
         <li><a href="/about/faq.htm">FAQ's</a></li>
         <li><a href="/about/about_privacy.htm#cookies">Cookies Policy</a></li>
         <li><a href="/about/contact_us.htm">Contact</a></li>
      </ul>
   </nav>
</div>
<div class="col-md-3 col-sm-12 col-xs-12">
<p>&copy; Copyright 2018. All Rights Reserved.</p>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <div class="news-group">
      <input type="text" class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}">
      <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span>
      <div id="newsresponse"></div>
   </div>
</div>
</div>
</div>
</div>
</div>
<!-- Libs -->
<script src="/theme/js/custom-min.js?v=7"></script>
<script src="https://www.google-analytics.com/urchin.js">
</script>
<script>
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script>
</div>
</body>
</html>
