<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->
<head>
<meta charset="utf-8">
<title>Design Pattern Interview Questions</title>
<meta name="description" content="Design Patterns Interview Questions - Learning java design patterns in simple and easy steps : A beginner's tutorial containing complete knowledge about an java design patterns starting from its Factory Pattern, Abstract Factory, Singleton, Builder, Prototype, Adapter, Bridge, Filter, Composite, Decorator, Facade, Flyweight, Proxy, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Null Object,Strategy, Template, Visitor, MVC, Front Controller etc." />
<meta name="keywords" content="Design, Patterns, Java, Tutorials, Learning, Beginners, Basics, Factory Pattern, Abstract Factory, Singleton, Builder, Prototype, Adapter, Bridge, Filter, Composite, Decorator, Facade, Flyweight, Proxy, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Null Object,Strategy, Template, Visitor, MVC, Front, Controller." />
<base href="https://www.tutorialspoint.com/" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="website" />
<meta property="fb:app_id" content="471319149685276" />
<meta property="og:site_name" content="www.tutorialspoint.com" />
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="author" content="tutorialspoint.com">
<script type="text/javascript" src="https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2"></script>
<link rel="stylesheet" href="https://www.tutorialspoint.com/theme/css/style-min.css?v=3">
<script>
function openNav() {	
  document.getElementById("mySidenav").style.width = "250px";
  document.getElementById("right_obs").style.display = "block";
}
function closeNav() {
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
function close_obs_sidenav(){
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
</script>
<!-- Head Libs -->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]-->
<style>
select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }
.btnsbmt{ background: #fa8400 !important;}
ul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}
div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #fa8400 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #fa8400 !important;}
.submenu-item{ border-bottom: 2px solid #fa8400 !important; border-top: 2px solid #fa8400 !important }
.ace_scroller{overflow: auto!important;}
a.demo{font-family: "Open Sans",Arial,sans-serif; background:#fa8400; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}
a.demo:hover{opacity:.8}
</style>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
</head>
<body onload="prettyPrint()">
<div class="wrapLoader">
   <div class="imgLoader">
      <img  src="/images/loading-cg.gif" alt="" width="70" height="70" />
   </div>
</div>
<div id="right_obs" class="display-none" onclick="close_obs_sidenav()"></div>
<header>
   <div class="container">			
      <h1 class="logo">
      <a href="index.htm" title="tutorialspoint">
      <img alt="tutorialspoint" src="/design_pattern/images/logo.png">
      </a>
      </h1>			
      <ul class="tp-inline-block pull-right" id="tp-head-icons">
        <li>
           <div class="tp-second-nav tp-display-none tp-pointer" onclick="openNav()">
              <i class="fa fa-th-large fa-lg"></i>
           </div>
        </li>
     </ul>
     <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull" style="top: 24px!important"> <i class="icon icon-bars"></i> </button>
      <nav>
         <ul class="nav nav-pills nav-top">
            <li><a href="/about/about_careers.htm" style="background: #fffb09; font-weight: bold;"><i class="icon icon-suitcase"></i> Jobs</a></li>
            <li> <a target="_blank" href="/programming_examples/"><i class="fa fa-cubes"></i> &nbsp;Examples</a> </li>
            <li> <a href="https://www.tutorialspoint.com/whiteboard.htm"><img src="theme/css/icons/image-editor.png" alt="Whiteboard" title="Whiteboard"> &nbsp;Whiteboard</a> </li>
            <li> <a href="https://www.tutorialspoint.com/netmeeting.php"><i class="fa-camera"></i> &nbsp;Net Meeting</a> </li>
            <li> <a href="/online_dev_tools.htm"> <i class="dev-tools-menu" style="opacity:.5"></i> Tools </a> </li>
            <li> <a href="/articles/index.php"><i class="icon icon-file-text-o"></i> &nbsp;Articles</a> </li>            
            <li class="top-icons">
              <ul class="social-icons">
              <li class="facebook"><a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook">Facebook</a></li>
              <li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
              <li class="twitter"><a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter">Twitter</a></li>
              <li class="linkedin"><a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin">Linkedin</a></li>
              <li class="youtube"><a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube">YouTube</a></li>
              </ul>
           </li>
         </ul>
      </nav>
    </div>
     <div class="sidenav" id="mySidenav">
     <div class="navbar nav-main">
      <div class="container">
         <nav class="nav-main mega-menu">
            <ul class="nav nav-pills nav-main" id="mainMenu">
               <li class="dropdown no-sub-menu"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li>   
               <li class="dropdown no-sub-menu"><a class="dropdown" href="/questions/index.php"><i class="fa fa-send"></i> Q/A </a> </li>
               <li class="dropdown"><a class="dropdown" href="tutorialslibrary.htm"><span class="tut-lib"> Library </span></a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="videotutorials/index.htm"><i class="fa-toggle-right"></i> Videos </a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="tutor_connect/index.php"><i class="fa-user"> </i> Tutors</a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://store.tutorialspoint.com/"><i class="fa-usd"></i> Store </a> </li>
               <li class="dropdown no-sub-menu">
                  <div class="searchform-popup">
                     <input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
                     <div class="magnifying-glass"><i class="icon-search"></i> Search </div>
                 </div>
               </li>
            </ul>
         </nav>
        </div>
      </div>	
     </div>	
   </div>	
</header>
<div style="clear:both;"></div>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-2">
<aside class="sidebar">
<div class="mini-logo">
<img src="/design_pattern/images/java-design-patterns-mini-logo.jpg" alt="Design Patterns Tutorial" />
</div>
<ul class="nav nav-list primary left-menu" >
<li class="heading">Design Patterns Tutorial</li>
<li><a href="/design_pattern/index.htm">Design Patterns - Home</a></li>
<li><a href="/design_pattern/design_pattern_overview.htm">Design Patterns -  Overview</a></li>
<li><a href="/design_pattern/factory_pattern.htm">Design Patterns - Factory Pattern</a></li>
<li><a href="/design_pattern/abstract_factory_pattern.htm">Abstract Factory Pattern</a></li>
<li><a href="/design_pattern/singleton_pattern.htm">Design Patterns - Singleton Pattern</a></li>
<li><a href="/design_pattern/builder_pattern.htm">Design Patterns - Builder Pattern</a></li>
<li><a href="/design_pattern/prototype_pattern.htm">Design Patterns - Prototype Pattern</a></li>
<li><a href="/design_pattern/adapter_pattern.htm">Design Patterns - Adapter Pattern</a></li>
<li><a href="/design_pattern/bridge_pattern.htm">Design Patterns - Bridge Pattern</a></li>
<li><a href="/design_pattern/filter_pattern.htm">Design Patterns - Filter Pattern</a></li>
<li><a href="/design_pattern/composite_pattern.htm">Design Patterns - Composite Pattern</a></li>
<li><a href="/design_pattern/decorator_pattern.htm">Design Patterns - Decorator Pattern</a></li>
<li><a href="/design_pattern/facade_pattern.htm">Design Patterns - Facade Pattern</a></li>
<li><a href="/design_pattern/flyweight_pattern.htm">Design Patterns - Flyweight Pattern</a></li>
<li><a href="/design_pattern/proxy_pattern.htm">Design Patterns - Proxy Pattern</a></li>
<li><a href="/design_pattern/chain_of_responsibility_pattern.htm">Chain of Responsibility Pattern</a></li>
<li><a href="/design_pattern/command_pattern.htm">Design Patterns - Command Pattern</a></li>
<li><a href="/design_pattern/interpreter_pattern.htm">Design Patterns - Interpreter Pattern</a></li>
<li><a href="/design_pattern/iterator_pattern.htm">Design Patterns - Iterator Pattern</a></li>
<li><a href="/design_pattern/mediator_pattern.htm">Design Patterns - Mediator Pattern</a></li>
<li><a href="/design_pattern/memento_pattern.htm">Design Patterns - Memento Pattern</a></li>
<li><a href="/design_pattern/observer_pattern.htm">Design Patterns - Observer Pattern</a></li>
<li><a href="/design_pattern/state_pattern.htm">Design Patterns - State Pattern</a></li>
<li><a href="/design_pattern/null_object_pattern.htm">Design Patterns - Null Object Pattern</a></li>
<li><a href="/design_pattern/strategy_pattern.htm">Design Patterns - Strategy Pattern</a></li>
<li><a href="/design_pattern/template_pattern.htm">Design Patterns - Template Pattern</a></li>
<li><a href="/design_pattern/visitor_pattern.htm">Design Patterns - Visitor Pattern</a></li>
<li><a href="/design_pattern/mvc_pattern.htm">Design Patterns - MVC Pattern</a></li>
<li><a href="/design_pattern/business_delegate_pattern.htm">Business Delegate Pattern</a></li>
<li><a href="/design_pattern/composite_entity_pattern.htm">Composite Entity Pattern</a></li>
<li><a href="/design_pattern/data_access_object_pattern.htm">Data Access Object Pattern</a></li>
<li><a href="/design_pattern/front_controller_pattern.htm">Front Controller Pattern</a></li>
<li><a href="/design_pattern/intercepting_filter_pattern.htm">Intercepting Filter Pattern</a></li>
<li><a href="/design_pattern/service_locator_pattern.htm">Service Locator  Pattern</a></li>
<li><a href="/design_pattern/transfer_object_pattern.htm">Transfer Object Pattern</a></li>
</ul>
<ul class="nav nav-list primary left-menu" >
<li class="heading">Design Patterns Resources</li>
<li><a class="left" href="/design_pattern/design_pattern_questions_answers.htm">Design Patterns - Questions/Answers</a></li>
<li><a class="left" href="/design_pattern/design_pattern_quick_guide.htm">Design Patterns - Quick Guide</a></li>
<li><a class="left" href="/design_pattern/design_pattern_resources.htm">Design Patterns - Useful Resources</a></li>
<li><a class="left" href="/design_pattern/design_pattern_discussion.htm">Design Patterns - Discussion</a></li>
</ul>
<ul class="nav nav-list primary push-bottom left-menu special">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>Design Pattern - Interview Questions</h1>
<hr>
<hr />
<div style="padding-bottom:5px;padding-left:10px;text-align: center;">Advertisements</div>
<div style="text-align: center;">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr>
<div class="pre-btn">
<a href="/design_pattern/design_pattern_questions_answers.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/design_pattern/design_pattern_questions_answers.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr />
<p>Dear readers, these <b>Design Pattern Interview Questions</b> have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of <b>Design Pattern</b>. As per my experience good interviewers hardly plan to ask any particular question during your interview, normally questions start with some basic concept of the subject and later they continue based on further discussion and what you answer:</p>
<section class="toggle">
<label> What are Design Patterns?</label>
<div class="toggle-content">
<p> Design patterns represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development. These solutions were obtained by trial and error by numerous software developers over quite a substantial period of time.</p>
</div>
</section>
<section class="toggle">
<label> What is Gang of Four (GOF)?</label>
<div class="toggle-content">
<p> In 1994, four authors Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides published a book titled Design Patterns - Elements of Reusable Object-Oriented Software which initiated the concept of Design Pattern in Software development. These authors are collectively known as Gang of Four (GOF).</p>
</div>
</section> 
<section class="toggle">
<label> Name types of Design Patterns?</label>
<div class="toggle-content">
<p> Design patterns can be classified in three categories: Creational, Structural and Behavioral patterns.</p>
<ul class="list" >
<li><p><b>Creational Patterns</b> - These design patterns provide a way to create objects while hiding the creation logic, rather than instantiating objects directly using new opreator. This gives program more flexibility in deciding which objects need to be created for a given use case.</p></li>
<li><p><b>Structural Patterns</b> - These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.</p></li>
<li><p><b>Behavioral Patterns</b> - These design patterns are specifically concerned with communication between objects.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What are J2EE Patterns?</label>
<div class="toggle-content">
<p> These design patterns are specifically concerned with the presentation tier. These patterns are identified by Sun Java Center.</p>
</div>
</section>
<section class="toggle">
<label> What is Factory pattern?</label>
<div class="toggle-content">
<p> Factory pattern is one of most used design pattern in Java. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.</p>
<p>In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using a common interface.</p>
</div>
</section>
<section class="toggle">
<label> What is Abstract Factory pattern?</label>
<div class="toggle-content">
<p> Abstract Factory patterns work around a super-factory which creates other factories. This factory is also called as factory of factories. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.</p>
<p>In Abstract Factory pattern an interface is responsible for creating a factory of related objects without explicitly specifying their classes. Each generated factory can give the objects as per the Factory pattern.</p>
</div>
</section>
<section class="toggle">
<label> What is Singleton pattern?</label>
<div class="toggle-content">
<p> Singleton pattern is one of the simplest design patterns in Java. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.</p>
<p>This pattern involves a single class which is responsible to create an object while making sure that only single object gets created. This class provides a way to access its only object which can be accessed directly without need to instantiate the object of the class.</p>
</div>
</section>
<section class="toggle">
<label> How can you create Singleton class in java?</label>
<div class="toggle-content">
<p> It is two step process. First, make the constructor private so that new operator cannot be used to instantiate the class. Return an object of the object if not null otherwise create the object and return the same via a method.</p>
</div>
</section>
<section class="toggle">
<label> What are the difference between a static class and a singleton class?</label>
<div class="toggle-content">
<p> Following are the differences between a static class and a singleton class.</p>
<ul class="list">
<li><p>A static class can not be a top level class and can not implement interfaces where a singleton class can.</p></li>
<li><p>All members of a static class are static but for a Singleton class it is not a requirement.</p></li>
<li><p>A static class get initialized when it is loaded so it can not be lazily loaded where a singleton class can be lazily loaded.</p></li>
<li><p>A static class object is stored in stack whereas singlton class object is stored in heap memory space.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> Can we create a clone of a singleton object?</label>
<div class="toggle-content">
<p> Yes.</p>
</div>
</section>
<section class="toggle">
<label> How to prevent cloning of a singleton object?</label>
<div class="toggle-content">
<p> Throw exception within the body of clone() method.</p>
</div>
</section>
<section class="toggle">
<label> Name some of the design patterns which are used in JDK library.</label>
<div class="toggle-content">
<p> Following are some of the design patterns which are used in JDK library.</p>
<ul class="list">
<li><p>Decorator patttern is used by Wrapper classes. </p></li>
<li><p>Singleton pattern is used by Runtime, Calendar classes.</p></li>
<li><p>Factory pattern is used by Wrapper class like Integer.valueOf.</p></li>
<li><p>Observer pattern is used by event handling frameworks like swing, awt.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is the benefit of Factory pattern?</label>
<div class="toggle-content">
<p> Factory pattern encapsulates the implementation details and underlying implementation can be changed without any impact on caller api.</p>
</div>
</section>
<section class="toggle">
<label> What is Builder pattern?</label>
<div class="toggle-content">
<p> Builder pattern builds a complex object using simple objects and using a step by step approach. This builder is independent of other objects.</p>
</div>
</section>
<section class="toggle">
<label> What is Prototype pattern?</label>
<div class="toggle-content">
<p> Prototype pattern refers to creating duplicate object while keeping performance in mind. This pattern involves implementing a prototype interface which tells to create a clone of the current object. </p>
</div>
</section>
<section class="toggle">
<label> When Prototype pattern is to be used?</label>
<div class="toggle-content">
<p> This pattern is used when creation of object directly is costly. For example, an object is to be created after a costly database operation. We can cache the object, returns its clone on next request and update the database as and when needed thus reducing database calls.</p>
</div>
</section>
<section class="toggle">
<label> What is Adapter pattern? </label>
<div class="toggle-content">
<p> Adapter pattern works as a bridge between two incompatible interfaces. This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces. </p>
</div>
</section>
<section class="toggle">
<label> Give an example of Adapter pattern.</label>
<div class="toggle-content">
<p> A real life example could be a case of card reader which acts as an adapter between memory card and a laptop. You plugin the memory card into card reader and card reader into the laptop so that memory card can be read via laptop.</p>
</div>
</section>
<section class="toggle">
<label> What is Bridge pattern?</label>
<div class="toggle-content">
<p> Bridge is used when we need to decouple an abstraction from its implementation so that the two can vary independently. This type of design pattern comes under structural pattern as this pattern decouples implementation class and abstract class by providing a bridge structure between them.</p>
<p>This pattern involves an interface which acts as a bridge which makes the functionality of concrete classes independent from interface implementer classes. Both types of classes can be altered structurally without affecting each other.</p>
</div>
</section>
<section class="toggle">
<label> What is Filter pattern?</label>
<div class="toggle-content">
<p> Filter pattern or Criteria pattern is a design pattern that enables developers to filter a set of objects using different criteria and chaining them in a decoupled way through logical operations. This type of design pattern comes under structural pattern as this pattern combines multiple criteria to obtain single criteria.</p>
</div>
</section>
<section class="toggle">
<label> What is Composite pattern?</label>
<div class="toggle-content">
<p> Composite pattern is used where we need to treat a group of objects in similar way as a single object. Composite pattern composes objects in term of a tree structure to represent part as well as whole hierarchy. This type of design pattern comes under structural pattern as this pattern creates a tree structure of group of objects.</p>
<p>This pattern creates a class that contains group of its own objects. This class provides ways to modify its group of same objects.</p>
</div>
</section>
<section class="toggle">
<label> What is Decorator pattern?</label>
<div class="toggle-content">
<p> Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class.</p>
<p>This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact.</p>
</div>
</section>
<section class="toggle">
<label> What is Facade pattern?</label>
<div class="toggle-content">
<p> Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. This type of design pattern comes under structural pattern as this pattern adds an interface to existing system to hide its complexities.</p>
<p>This pattern involves a single class which provides simplified methods required by client and delegates calls to methods of existing system classes.</p>
</div>
</section>
<section class="toggle">
<label> What is Flyweight pattern?</label>
<div class="toggle-content">
<p> Flyweight pattern is primarily used to reduce the number of objects created and to decrease memory footprint and increase performance. This type of design pattern comes under structural pattern as this pattern provides ways to decrease object count thus improving the object structure of application.</p>
<p>Flyweight pattern tries to reuse already existing similar kind objects by storing them and creates new object when no matching object is found. </p>
</div>
</section>
<section class="toggle">
<label> What is Proxy pattern?</label>
<div class="toggle-content">
<p> In proxy pattern, a class represents functionality of another class. This type of design pattern comes under structural pattern.</p>
<p>In proxy pattern, we create object having original object to interface its functionality to outer world.</p>
</div>
</section>
<section class="toggle">
<label> What is Chain of Responsibility pattern?</label>
<div class="toggle-content">
<p> As the name suggests, the chain of responsibility pattern creates a chain of receiver objects for a request. This pattern decouples sender and receiver of a request based on type of request. This pattern comes under behavioral patterns.</p>
<p>In this pattern, normally each receiver contains reference to another receiver. If one object cannot handle the request then it passes the same to the next receiver and so on.</p>
</div>
</section>
<section class="toggle">
<label> What is Command pattern?</label>
<div class="toggle-content">
<p> Command pattern is a data driven design pattern and falls under behavioral pattern category. A request is wrapped under an object as command and passed to invoker object. Invoker object looks for the appropriate object which can handle this command and passes the command to the corresponding object which executes the command.</p>
</div>
</section>
<section class="toggle">
<label> What is Interpreter pattern?</label>
<div class="toggle-content">
<p> Interpreter pattern provides a way to evaluate language grammar or expression. This type of pattern comes under behavioral pattern. This pattern involves implementing an expression interface which tells to interpret a particular context. </p>
</div>
</section>
<section class="toggle">
<label> Give an example where Interpreter pattern is used?</label>
<div class="toggle-content">
<p> This pattern is used in SQL parsing, symbol processing engine etc.</p>
</div>
</section>
<section class="toggle">
<label> What is Iterator pattern?</label>
<div class="toggle-content">
<p> Iterator pattern is very commonly used design pattern in Java and .Net programming environment. This pattern is used to get a way to access the elements of a collection object in sequential manner without any need to know its underlying representation. Iterator pattern falls under behavioral pattern category.</p>
</div>
</section>
<section class="toggle">
<label> What are the entities of Service Locator pattern?</label>
<div class="toggle-content">
<p>Following are the entities of this type of design pattern.</p>
<ul class="list">
<li><p><b>Service</b> - Actual Service which will process the request. Reference of such service is to be looked upon in JNDI server.</p></li>
<li><p><b>Context / Initial Context</b> - JNDI Context carries the reference to service used for lookup purpose.</p></li>
<li><p><b>Service Locator</b> - Service Locator is a single point of contact to get services by JNDI lookup caching the services.</p></li>
<li><p><b>Cache</b> - Cache to store references of services to reuse them.</p></li>
<li><p><b>Client</b> - Client is the object that invokes the services via ServiceLocator.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is Mediator pattern?</label>
<div class="toggle-content">
<p> Mediator pattern is used to reduce communication complexity between multiple objects or classes. This pattern provides a mediator class which normally handles all the communications between different classes and supports easy maintenance of the code by loose coupling. Mediator pattern falls under behavioral pattern category.</p>
</div>
</section>
<section class="toggle">
<label> What is Memento pattern?</label>
<div class="toggle-content">
<p> Memento pattern is used to restore state of an object to a previous state. Memento pattern falls under behavioral pattern category. </p>
</div>
</section>
<section class="toggle">
<label> Name the actor classes used in Memento pattern.</label>
<div class="toggle-content">
<p> Memento pattern uses three actor classes. Memento contains state of an object to be restored. Originator creates and stores states in Memento objects and Caretaker object is responsible to restore object state from Memento.</p>
</div>
</section>
<section class="toggle">
<label> What is Observer pattern?</label>
<div class="toggle-content">
<p> Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified, its depenedent objects are to be notified automatically. Observer pattern falls under behavioral pattern category.</p>
</div>
</section>
<section class="toggle">
<label> Name the actor classes used in Observer pattern.</label>
<div class="toggle-content">
<p> Observer pattern uses three actor classes. Subject, Observer and Client. Subject is an object having methods to attach and detach observers to a client object. We have created an abstract class Observer and a concrete class Subject that is extending class Observer.</p>
</div>
</section>
<section class="toggle">
<label> What is state pattern?</label>
<div class="toggle-content">
<p> In State pattern a class behavior changes based on its state. This type of design pattern comes under behavior pattern. In State pattern, we create objects which represent various states and a context object whose behavior varies as its state object changes.</p>
</div>
</section>
<section class="toggle">
<label> What is Null Object pattern?</label>
<div class="toggle-content">
<p> In Null Object pattern, a null object replaces check of NULL object instance. Instead of putting if check for a null value, Null Object reflects a do nothing relationship. Such Null object can also be used to provide default behaviour in case data is not available.</p>
<p>In Null Object pattern, we create an abstract class specifying various operations to be done, concrete classes extending this class and a null object class providing do nothing implemention of this class and will be used seemlessly where we need to check null value.</p>
</div>
</section>
<section class="toggle">
<label> What is Strategy pattern?</label>
<div class="toggle-content">
<p> In Strategy pattern, a class behavior or its algorithm can be changed at run time. This type of design pattern comes under behavior pattern.</p>
<p>In Strategy pattern, we create objects which represent various strategies and a context object whose behavior varies as per its strategy object. The strategy object changes the executing algorithm of the context object.</p>
</div>
</section>
<section class="toggle">
<label> What is Template pattern?</label>
<div class="toggle-content">
<p> In Template pattern, an abstract class exposes defined way(s)/template(s) to execute its methods. Its subclasses can override the method implementation as per need but the invocation is to be in the same way as defined by an abstract class. This pattern comes under behavior pattern category.</p>
</div>
</section>
<section class="toggle">
<label> What is Visitor pattern?</label>
<div class="toggle-content">
<p> In Visitor pattern, we use a visitor class which changes the executing algorithm of an element class. By this way, execution algorithm of element can vary as and when visitor varies. This pattern comes under behavior pattern category. As per the pattern, element object has to accept the visitor object so that visitor object handles the operation on the element object.</p>
</div>
</section>
<section class="toggle">
<label> What is MVC pattern?</label>
<div class="toggle-content">
<p> MVC Pattern stands for Model-View-Controller Pattern. This pattern is used to separate application's concerns.</p>
<ul class="list">
<li><p><b>Model</b> - Model represents an object or JAVA POJO carrying data. It can also have logic to update controller if its data changes.</p></li>
<li><p><b>View</b> - View represents the visualization of the data that model contains.</p></li>
<li><p><b>Controller</b> - Controller acts on both model and view. It controls the data flow into model object and updates the view whenever data changes. It keeps view and model separate.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is Business Delegate pattern?</label>
<div class="toggle-content">
<p> Business Delegate Pattern is used to decouple presentation tier and business tier. It is basically use to reduce communication or remote lookup functionality to business tier code in presentation tier code. In business tier we have following entities.</p>
<ul class="list">
<li><p><b>Client</b> - Presentation tier code may be JSP, servlet or UI java code.</p></li>
<li><p><b>Business Delegate</b> - A single entry point class for client entities to provide access to Business Service methods.</p></li>
<li><p><b>LookUp Service</b> - Lookup service object is responsible to get relative business implementation and provide business object access to business delegate object.</p></li>
<li><p><b>Business Service</b> - Business Service interface. Concrete classes implement this business service to provide actual business implementation logic.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is Composite Entity pattern?</label>
<div class="toggle-content">
<p> Composite Entity pattern is used in EJB persistence mechanism. A Composite entity is an EJB entity bean which represents a graph of objects. When a composite entity is updated, internally dependent objects beans get updated automatically as being managed by EJB entity bean. Following are the participants in Composite Entity Bean.</p>
<ul class="list">
<li><p><b>Composite Entity</b> - It is primary entity bean. It can be coarse grained or can contain a coarse grained object to be used for persistence purpose.</p></li>
<li><p><b>Coarse-Grained Object</b> - This object contains dependent objects. It has its own life cycle and also manages life cycle of dependent objects.</p></li>
<li><p><b>Dependent Object</b> - Dependent object is an object which depends on coarse grained object for its persistence lifecycle.</p></li>
<li><p><b>Strategies</b> - Strategies represents how to implement a Composite Entity.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is Data Access Object Pattern(DAO) pattern?</label>
<div class="toggle-content">
<p> Data Access Object Pattern or DAO pattern is used to separate low level data accessing API or operations from high level business services. Following are the participants in Data Access Object Pattern.</p>
<ul class="list">
<li><p><b>Data Access Object Interface</b> - This interface defines the standard operations to be performed on a model object(s).</p></li>
<li><p><b>Data Access Object concrete class</b> - This class implements above interface. This class is responsible to get data from a data source which can be database / xml or any other storage mechanism.</p></li>
<li><p><b>Model Object or Value Object</b> - This object is simple POJO containing get/set methods to store data retrieved using DAO class.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is Front Controller pattern?</label>
<div class="toggle-content">
<p> The front controller design pattern is used to provide a centralized request handling mechanism so that all requests will be handled by a single handler. This handler can do the authentication/ authorization/ logging or tracking of request and then pass the requests to corresponding handlers. Following are the entities of this type of design pattern.</p>
<ul class="list">
<li><p><b>Front Controller</b> - Single handler for all kinds of requests coming to the application (either web based/ desktop based).</p></li>
<li><p><b>Dispatcher</b> - Front Controller may use a dispatcher object which can dispatch the request to corresponding specific handler.</p></li>
<li><p><b>View</b> - Views are the object for which the requests are made.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is Intercepting Filter pattern?</label>
<div class="toggle-content">
<p> The intercepting filter design pattern is used when we want to do some pre-processing / post-processing with request or response of the application. Filters are defined and applied on the request before passing the request to actual target application. Filters can do the authentication/ authorization/ logging or tracking of request and then pass the requests to corresponding handlers. </p>
</div>
</section>
<section class="toggle">
<label> What are the  entities of Intercepting Filter pattern?</label>
<div class="toggle-content">
<p> Following are the entities of this type of design pattern.</p>
<ul class="list">
<li><p><b>Filter</b> - Filter which will performs certain task prior or after execution of request by request handler.</p></li>
<li><p><b>Filter Chain</b> - Filter Chain carries multiple filters and help to execute them in defined order on target.</p></li>
<li><p><b>Target</b> - Target object is the request handler.</p></li>
<li><p><b>Filter Manager</b> - Filter Manager manages the filters and Filter Chain.</p></li>
<li><p><b>Client</b> - Client is the object who sends request to the Target object.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is Service Locator pattern?</label>
<div class="toggle-content">
<p> The service locator design pattern is used when we want to locate various services using JNDI lookup. Considering high cost of looking up JNDI for a service, Service Locator pattern makes use of caching technique. For the first time a service is required, Service Locator looks up in JNDI and caches the service object. Further lookup or same service via Service Locator is done in its cache which improves the performance of application to great extent. </p>
</div>
</section>
<section class="toggle">
<label> What is Transfer Object pattern?</label>
<div class="toggle-content">
<p> The Transfer Object pattern is used when we want to pass data with multiple attributes in one shot from client to server. Transfer object is also known as Value Object. Transfer Object is a simple POJO class having getter/setter methods and is serializable so that it can be transferred over the network. It does not have any behavior. Server Side business class normally fetches data from the database and fills the POJO and send it to the client or pass it by value. For client, transfer object is read-only. Client can create its own transfer object and pass it to server to update values in database in one shot. Following are the entities of this type of design pattern.</p>
<ul class="list">
<li><p><b>Business Object</b> - Business Service fills the Transfer Object with data.</p></li>
<li><p><b>Transfer Object</b> - Simple POJO having methods to set/get attributes only.</p></li>
<li><p><b>Client</b> - Client either requests or sends the Transfer Object to Business Object.</p></li>
</ul>
</div>
</section>
<h2>What is Next ?</h2>
<p>Further you can go through your past assignments you have done with the subject and make sure you are able to speak confidently on them. If you are fresher then interviewer does not expect you will answer very complex questions, rather you have to make your basics concepts very strong.</p>
<p>Second it really doesn't matter much if you could not answer few questions but it matters that whatever you answered, you must have answered with confidence. So just feel confident during your interview. We at tutorialspoint wish you best luck to have a good interviewer and all the very best for your future endeavor. Cheers :-)</p>
<hr />
<div class="pre-btn">
<a href="/design_pattern/design_pattern_questions_answers.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div><div class="print-btn">
<a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>
</div>
<div class="pdf-btn">
<a href="/design_pattern/pdf/design_pattern_interview_questions.pdf" title="Design Pattern Interview Questions" target="_blank"><i class="icon icon-file-pdf-o big-font"></i> PDF</a>
</div>
<div class="nxt-btn">
<a href="/design_pattern/design_pattern_questions_answers.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="parent-file">design_pattern_questions_answers.htm</div>
<hr />
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div class="bottomadtag">Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
<div class="row">
<div class="col-md-3" id="rightbar">
<div class="simple-ad">
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/design_pattern/design_pattern_interview_questions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/facebookIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/design_pattern/design_pattern_interview_questions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/twitterIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/design_pattern/design_pattern_interview_questions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/linkedinIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/design_pattern/design_pattern_interview_questions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/googlePlusIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/design_pattern/design_pattern_interview_questions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/StumbleUponIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/design_pattern/design_pattern_interview_questions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;">
<img src="/images/reddit.jpg" alt="img" />
</a>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="footer-copyright">
<div class="container">
<div class="row">
<div class="col-md-1">
<a href="index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="/scripts/img/logo-footer.png"> </a>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <nav id="sub-menu">
      <ul>
         <li><a href="/about/faq.htm">FAQ's</a></li>
         <li><a href="/about/about_privacy.htm#cookies">Cookies Policy</a></li>
         <li><a href="/about/contact_us.htm">Contact</a></li>
      </ul>
   </nav>
</div>
<div class="col-md-3 col-sm-12 col-xs-12">
<p>&copy; Copyright 2018. All Rights Reserved.</p>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <div class="news-group">
      <input type="text" class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}">
      <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span>
      <div id="newsresponse"></div>
   </div>
</div>
</div>
</div>
</div>
</div>
<!-- Libs -->
<script src="/theme/js/custom-min.js?v=7"></script>
<script src="https://www.google-analytics.com/urchin.js">
</script>
<script>
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script>
</div>
</body>
</html>
