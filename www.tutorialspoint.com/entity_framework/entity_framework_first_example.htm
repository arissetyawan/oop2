<!DOCTYPE html>
<!--[if IE 8]><html class="ie ie8"> <![endif]-->
<!--[if IE 9]><html class="ie ie9"> <![endif]-->
<!--[if gt IE 9]><!-->	<html> <!--<![endif]-->
<head>
<!-- Basic -->
<meta charset="utf-8">
<title>Entity Framework First Example</title>
<meta name="description" content="Entity Framework First Example - Learn Entity Framework starting from Overview, Architecture, Environment Setup, Database Setup, Data Model, DbContext, Types, Relationships, Lifecycle, Code First Approach, Model First Approach, Database First Approach, DEV Approaches, Database Operations, Concurrency, Transaction, Views, Index, Stored Procedures, Disconnected Entities, Table-Valued Function, Native SQL, Enum Support, Asynchronous Query, Persistence, Projection Queries, Command Logging, Command Interception, Spatial Data Type, Inheritance, Migration, Eager, Lazy, Explicit Loading, Validation, Track Changes, Colored Entities, First Example, Data Annotations, Fluent API, Seed Database, Code First Migration, Multiple DbContext, Nested Entity Types." />
<meta name="keywords" content="Entity Framework, Tutorial, Overview, Architecture, Environment Setup, Database Setup, Data Model, DbContext, Types, Relationships, Lifecycle, Code First Approach, Model First Approach, Database First Approach, DEV Approaches, Database Operations, Concurrency, Transaction, Views, Index, Stored Procedures, Disconnected Entities, Table-Valued Function, Native SQL, Enum Support, Asynchronous Query, Persistence, Projection Queries, Command Logging, Command Interception, Spatial Data Type, Inheritance, Migration, Eager, Lazy, Explicit Loading, Validation, Track Changes, Colored Entities, First Example, Data Annotations, Fluent API, Seed Database, Code First Migration, Multiple DbContext, Nested Entity Types." />
<base href="https://www.tutorialspoint.com/" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="website" />
<meta property="fb:app_id" content="471319149685276" />
<meta property="og:site_name" content="www.tutorialspoint.com" />
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="author" content="tutorialspoint.com">
<script type="text/javascript" src="https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2"></script>
<link rel="stylesheet" href="https://www.tutorialspoint.com/theme/css/style-min.css?v=3">
<script>
function openNav() {	
  document.getElementById("mySidenav").style.width = "250px";
  document.getElementById("right_obs").style.display = "block";
}
function closeNav() {
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
function close_obs_sidenav(){
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
</script>
<!-- Head Libs -->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]-->
<style>
select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }
.btnsbmt{ background: #036db0 !important;}
ul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}
div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #036db0 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #036db0 !important;}
.submenu-item{ border-bottom: 2px solid #036db0 !important; border-top: 2px solid #036db0 !important }
.ace_scroller{overflow: auto!important;}
a.demo{font-family: "Open Sans",Arial,sans-serif; background:#036db0; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}
a.demo:hover{opacity:.8}
</style>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
</head>
<body onload="prettyPrint()">
<div class="wrapLoader">
   <div class="imgLoader">
      <img  src="/images/loading-cg.gif" alt="" width="70" height="70" />
   </div>
</div>
<div id="right_obs" class="display-none" onclick="close_obs_sidenav()"></div>
<header>
   <div class="container">			
      <h1 class="logo">
      <a href="index.htm" title="tutorialspoint">
      <img alt="tutorialspoint" src="/entity_framework/images/logo.png">
      </a>
      </h1>			
      <ul class="tp-inline-block pull-right" id="tp-head-icons">
        <li>
           <div class="tp-second-nav tp-display-none tp-pointer" onclick="openNav()">
              <i class="fa fa-th-large fa-lg"></i>
           </div>
        </li>
     </ul>
     <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull" style="top: 24px!important"> <i class="icon icon-bars"></i> </button>
      <nav>
         <ul class="nav nav-pills nav-top">
            <li><a href="/about/about_careers.htm" style="background: #fffb09; font-weight: bold;"><i class="icon icon-suitcase"></i> Jobs</a></li>
            <li> <a target="_blank" href="/programming_examples/"><i class="fa fa-cubes"></i> &nbsp;Examples</a> </li>
            <li> <a href="https://www.tutorialspoint.com/whiteboard.htm"><img src="theme/css/icons/image-editor.png" alt="Whiteboard" title="Whiteboard"> &nbsp;Whiteboard</a> </li>
            <li> <a href="https://www.tutorialspoint.com/netmeeting.php"><i class="fa-camera"></i> &nbsp;Net Meeting</a> </li>
            <li> <a href="/online_dev_tools.htm"> <i class="dev-tools-menu" style="opacity:.5"></i> Tools </a> </li>
            <li> <a href="/articles/index.php"><i class="icon icon-file-text-o"></i> &nbsp;Articles</a> </li>            
            <li class="top-icons">
              <ul class="social-icons">
              <li class="facebook"><a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook">Facebook</a></li>
              <li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
              <li class="twitter"><a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter">Twitter</a></li>
              <li class="linkedin"><a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin">Linkedin</a></li>
              <li class="youtube"><a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube">YouTube</a></li>
              </ul>
           </li>
         </ul>
      </nav>
    </div>
     <div class="sidenav" id="mySidenav">
     <div class="navbar nav-main">
      <div class="container">
         <nav class="nav-main mega-menu">
            <ul class="nav nav-pills nav-main" id="mainMenu">
               <li class="dropdown no-sub-menu"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li>   
               <li class="dropdown no-sub-menu"><a class="dropdown" href="/questions/index.php"><i class="fa fa-send"></i> Q/A </a> </li>
               <li class="dropdown"><a class="dropdown" href="tutorialslibrary.htm"><span class="tut-lib"> Library </span></a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="videotutorials/index.htm"><i class="fa-toggle-right"></i> Videos </a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="tutor_connect/index.php"><i class="fa-user"> </i> Tutors</a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://store.tutorialspoint.com/"><i class="fa-usd"></i> Store </a> </li>
               <li class="dropdown no-sub-menu">
                  <div class="searchform-popup">
                     <input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
                     <div class="magnifying-glass"><i class="icon-search"></i> Search </div>
                 </div>
               </li>
            </ul>
         </nav>
        </div>
      </div>	
     </div>	
   </div>	
</header>
<div style="clear:both;"></div>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-2">
<aside class="sidebar">
<div class="mini-logo">
<img src="/entity_framework/images/entity-framework-mini-logo.jpg" alt="Entity Framework Tutorial" />
</div>
<ul class="nav nav-list primary left-menu" >
<li class="heading">Entity Framework Tutorial</li>
<li><a href="/entity_framework/index.htm">Entity Framework - Home</a></li>
<li><a href="/entity_framework/entity_framework_overview.htm">Entity Framework - Overview</a></li>
<li><a href="/entity_framework/entity_framework_architecture.htm">Entity Framework - Architecture</a></li>
<li><a href="/entity_framework/entity_framework_environment_setup.htm">Entity F - Environment Setup</a></li>
<li><a href="/entity_framework/entity_framework_database_setup.htm">Entity Framework - Database Setup</a></li>
<li><a href="/entity_framework/entity_framework_data_model.htm">Entity Framework - Data Model</a></li>
<li><a href="/entity_framework/entity_framework_dbcontext.htm">Entity Framework - DbContext</a></li>
<li><a href="/entity_framework/entity_framework_types.htm">Entity Framework - Types</a></li>
<li><a href="/entity_framework/entity_framework_relationships.htm">Entity Framework - Relationships</a></li>
<li><a href="/entity_framework/entity_framework_lifecycle.htm">Entity Framework - Lifecycle</a></li>
<li><a href="/entity_framework/entity_code_first_approach.htm">Entity F - Code First Approach</a></li>
<li><a href="/entity_framework/entity_model_first_approach.htm">Entity F - Model First Approach</a></li>
<li><a href="/entity_framework/entity_database_first_approach.htm">Entity F - Database First Approach</a></li>
<li><a href="/entity_framework/entity_framework_dev_approaches.htm">Entity Framework - DEV Approaches</a></li>
<li><a href="/entity_framework/entity_framework_database_operations.htm">Entity F - Database Operations</a></li>
<li><a href="/entity_framework/entity_framework_concurrency.htm">Entity Framework - Concurrency</a></li>
<li><a href="/entity_framework/entity_framework_transaction.htm">Entity Framework - Transaction</a></li>
<li><a href="/entity_framework/entity_framework_views.htm">Entity Framework - Views</a></li>
<li><a href="/entity_framework/entity_framework_index.htm">Entity Framework - Index</a></li>
<li><a href="/entity_framework/entity_framework_stored_procedures.htm">Entity F - Stored Procedures</a></li>
<li><a href="/entity_framework/entity_framework_disconnected_entities.htm">Entity F - Disconnected Entities</a></li>
<li><a href="/entity_framework/entity_table_valued_function.htm">Entity F - Table-Valued Function</a></li>
<li><a href="/entity_framework/entity_framework_native_sql.htm">Entity Framework - Native SQL</a></li>
<li><a href="/entity_framework/entity_framework_enum_support.htm">Entity Framework - Enum Support</a></li>
<li><a href="/entity_framework/entity_framework_asynchronous_query.htm">Entity F - Asynchronous Query</a></li>
<li><a href="/entity_framework/entity_framework_persistence.htm">Entity Framework - Persistence</a></li>
<li><a href="/entity_framework/entity_framework_projection_queries.htm">Entity F - Projection Queries</a></li>
<li><a href="/entity_framework/entity_framework_command_logging.htm">Entity F - Command Logging</a></li>
<li><a href="/entity_framework/entity_framework_command_interception.htm">Entity F - Command Interception</a></li>
<li><a href="/entity_framework/entity_framework_spatial_data_type.htm">Entity Framework - Spatial Data Type</a></li>
<li><a href="/entity_framework/entity_framework_inheritance.htm">Entity Framework - Inheritance</a></li>
<li><a href="/entity_framework/entity_framework_migration.htm">Entity Framework - Migration</a></li>
<li><a href="/entity_framework/entity_framework_eager_loading.htm">Entity Framework - Eager Loading</a></li>
<li><a href="/entity_framework/entity_framework_lazy_loading.htm">Entity Framework - Lazy Loading</a></li>
<li><a href="/entity_framework/entity_framework_explicit_loading.htm">Entity Framework - Explicit Loading</a></li>
<li><a href="/entity_framework/entity_framework_validation.htm">Entity Framework - Validation</a></li>
<li><a href="/entity_framework/entity_framework_track_changes.htm">Entity Framework - Track Changes</a></li>
<li><a href="/entity_framework/entity_framework_colored_entities.htm">Entity Framework - Colored Entities</a></li>
<li><a href="/entity_framework/entity_framework_code_first_approach.htm">Entity F - Code First Approach</a></li>
<li><a href="/entity_framework/entity_framework_first_example.htm">Entity Framework - First Example</a></li>
<li><a href="/entity_framework/entity_framework_data_annotations.htm">Entity Framework - Data Annotations</a></li>
<li><a href="/entity_framework/entity_framework_fluent_api.htm">Entity Framework - Fluent API</a></li>
<li><a href="/entity_framework/entity_framework_seed_database.htm">Entity Framework - Seed Database</a></li>
<li><a href="/entity_framework/entity_framework_code_first_migration.htm">Entity F - Code First Migration</a></li>
<li><a href="/entity_framework/entity_framework_multiple_dbcontext.htm">Entity F - Multiple DbContext</a></li>
<li><a href="/entity_framework/entity_framework_nested_entity_types.htm">Entity F - Nested Entity Types</a></li>
</ul>
<ul class="nav nav-list primary left-menu" >
<li class="heading">Entity Framework Resources</li>
<li><a href="/entity_framework/entity_framework_quick_guide.htm">Entity Framework - Quick Guide</a></li>
<li><a href="/entity_framework/entity_framework_useful_resources.htm">Entity Framework - Useful Resources</a></li>
<li><a href="/entity_framework/entity_framework_discussion.htm">Entity Framework - Discussion</a></li>
</ul>
<ul class="nav nav-list primary push-bottom left-menu special">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>Entity Framework - First Example</h1>
<hr />
<div style="padding-bottom:5px;padding-left:10px;text-align: center;">Advertisements</div>
<div style="text-align: center;">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="https://pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="/entity_framework/entity_framework_code_first_approach.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/entity_framework/entity_framework_data_annotations.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr />
<p>Let’s define a very simple model using classes. We’re just defining them in the Program.cs file but in a real-world application you will split your classes into separate files and potentially a separate project. Following is a data model which we will be creating using Code First approach.</p>
<img src="/entity_framework/images/model_using_classes.jpg" alt="Model Using Classes" />
<h2>Create Model</h2>
<p>Add the following three classes in Program.cs file using the following code for Student class.</p>
<pre class="prettyprint notranslate">
public class Student {
   public int ID { get; set; }
   public string LastName { get; set; }
   public string FirstMidName { get; set; }
   public DateTime EnrollmentDate { get; set; }
	
   public virtual ICollection&lt;Enrollment&gt; Enrollments { get; set; }
}
</pre>
<ul class="list">
<li><p>The ID property will become the primary key column of the database table that corresponds to this class.</p></li>
<li><p>The Enrollments property is a navigation property. Navigation properties hold other entities that are related to this entity.</p></li>
<li><p>In this case, the Enrollments property of a Student entity will hold all of the Enrollment entities that are related to that Student entity.</p></li>
<li><p>Navigation properties are typically defined as virtual so that they can take advantage of certain Entity Framework functionality such as lazy loading.</p></li>
<li><p>If a navigation property can hold multiple entities (as in many-to-many or one-tomany relationships), its type must be a list in which entries can be added, deleted, and updated, such as ICollection.</p></li>
</ul>
<p>Following is the implementation for Course class.</p>
<pre class="prettyprint notranslate">
public class Course {
   public int CourseID { get; set; }
   public string Title { get; set; }
   public int Credits { get; set; }
	
   public virtual ICollection&lt;Enrollment&gt; Enrollments { get; set; }
}
</pre>
<p>The Enrollments property is a navigation property. A Course entity can be related to any number of Enrollment entities.</p>
<p>Following is the implementation for Enrollment class and enum.</p>
<pre class="prettyprint notranslate">
public enum Grade {
   A, B, C, D, F
}

public class Enrollment {
   public int EnrollmentID { get; set; }
   public int CourseID { get; set; }
   public int StudentID { get; set; }
   public Grade? Grade { get; set; }
	
   public virtual Course Course { get; set; }
   public virtual Student Student { get; set; }
}
</pre>
<ul class="list">
<li><p>The EnrollmentID property will be the primary key.</p></li>
<li><p>The Grade property is an enum. The question mark after the Grade type declaration indicates that the Grade property is nullable.</p></li>
<li><p>A grade that's null is different from a zero grade. Null means a grade isn't known or hasn't been assigned yet.</p></li>
<li><p>The StudentID and CourseID properties are foreign keys, and the corresponding navigation properties are Student and Course.</p></li>
<li><p>An Enrollment entity is associated with one Student and one Course entity, so the property can only hold a single Student and Course entity.</p></li>
</ul>
<h2>Create Database Context</h2>
<p>The main class that coordinates Entity Framework functionality for a given data model is the database context class which allows to query and save data. You can create this class by deriving from the DbContext class and exposing a typed DbSet<TEntity> for each class in our model. Following is the implementation on MyContext class, which is derived from DbContext class.</p>
<pre class="prettyprint notranslate">
public class MyContext : DbContext {
   public virtual DbSet&lt;Course&gt; Courses { get; set; }
   public virtual DbSet&lt;Enrollment&gt; Enrollments { get; set; }
   public virtual DbSet&lt;Student&gt; Students { get; set; }
}
</pre>
<p>Following is the complete code in Program.cs file.</p>
<pre class="prettyprint notranslate">
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EFCodeFirstDemo {

   class Program {
      static void Main(string[] args) {}
   }

   public enum Grade {
      A, B, C, D, F
   }

   public class Enrollment {
      public int EnrollmentID { get; set; }
      public int CourseID { get; set; }
      public int StudentID { get; set; }
      public Grade? Grade { get; set; }
		
      public virtual Course Course { get; set; }
      public virtual Student Student { get; set; }
   }

   public class Student {
      public int ID { get; set; }
      public string LastName { get; set; }
      public string FirstMidName { get; set; }
      public DateTime EnrollmentDate { get; set; }
		
      public virtual ICollection&lt;Enrollment&gt; Enrollments { get; set; }
   }

   public class Course {
      public int CourseID { get; set; }
      public string Title { get; set; }
      public int Credits { get; set; }
		
      public virtual ICollection&lt;Enrollment&gt; Enrollments { get; set; }
   }

   public class MyContext : DbContext {
      public virtual DbSet&lt;Course&gt; Courses { get; set; }
      public virtual DbSet&lt;Enrollment&gt; Enrollments { get; set; }
      public virtual DbSet&lt;Student&gt; Students { get; set; }
   }

}
</pre>
<p>The above code is all we need to start storing and retrieving data. Let’s add some data and then retrieve it. Following is the code in main method.</p>
<pre class="prettyprint notranslate">
static void Main(string[] args) {

   using (var context = new MyContext()) {
      // Create and save a new Students
      Console.WriteLine("Adding new students");

      var student = new Student {
         FirstMidName = "Alain", LastName = "Bomer", 
            EnrollmentDate = DateTime.Parse(DateTime.Today.ToString())
      };

      context.Students.Add(student);
		
      var student1 = new Student {
         FirstMidName = "Mark", LastName = "Upston", 
            EnrollmentDate = DateTime.Parse(DateTime.Today.ToString())
      };

      context.Students.Add(student1);
      context.SaveChanges();

      // Display all Students from the database
      var students = (from s in context.Students 
         orderby s.FirstMidName select s).ToList&lt;Student&gt;();

      Console.WriteLine("Retrieve all Students from the database:");

      foreach (var stdnt in students) {
         string name = stdnt.FirstMidName + " " + stdnt.LastName;
         Console.WriteLine("ID: {0}, Name: {1}", stdnt.ID, name);
      }
		
      Console.WriteLine("Press any key to exit...");
      Console.ReadKey();
   }
}
</pre>
<p>When the above code is executed, you will receive the following output.</p>
<pre class="result notranslate">
Adding new students
Retrieve all Students from the database:
ID: 1, Name: Alain Bomer
ID: 2, Name: Mark Upston
Press any key to exit...
</pre>
<p>Now the question that comes to mind is, where is the data and the database in which we have added some data and then retrieved it from database. By convention, DbContext has created a database for you.</p>
<ul class="list">
<li><p>If a local SQL Express instance is available then Code First has created the database on that instance.</p></li>
<li><p>If SQL Express isn’t available, then Code First will try and use LocalDb.</p></li>
<li><p>The database is named after the fully qualified name of the derived context.</p></li>
</ul>
<p>In our case, SQL Express instance is available, and the database name is EFCodeFirstDemo.MyContext as shown in the following image.</p>
<img src="/entity_framework/images/sql_express_instance.jpg" alt="SQL Express Instance" />
<ul class="list">
<li><p>These are just the default conventions and there are various ways to change the database that Code First uses.</p></li>
<li><p>As you can see in the above image, it has created Students, Courses and Enrollments tables and each table contains columns with appropriate datatype and length.</p></li>
<li><p>The column names and datatype also matches with the properties of the respective domain classes.</p></li>
</ul>
<h2>Database Initialization</h2>
<p>In the above example, we have seen that Code First creates a database automatically, but if you want to change the name of the database and server, let us see how Code First decides the database name and server while initializing a database. Take a look at the following diagram.</p>
<img src="/entity_framework/images/database_initialization.jpg" alt="Database Initialization" />
<p>You can define the base constructor of the context class in the following ways.</p>
<ul class="list">
<li>No Parameter</li>
<li>Database Name</li>
<li>Connection String Name</li>
</ul>
<h2>No Parameter</h2>
<p>If you specify the base constructor of the context class without any parameter as shown in the above example, then entity framework will create a database in your local SQLEXPRESS server with a name {Namespace}.{Context class name}.</p>
<p>In the above example, the database which is created automatically has the name EFCodeFirstDemo.MyContext. If you look at the name, you will find that EFCodeFirstDemo is the namespace and MyContext is the context class name as shown in the following code.</p>
<pre class="prettyprint notranslate">
public class MyContext : DbContext {
   public MyContext() : base() {}

   public virtual DbSet&lt;Course&gt; Courses { get; set; }
   public virtual DbSet&lt;Enrollment&gt; Enrollments { get; set; }
   public virtual DbSet&lt;Student&gt; Students { get; set; }
}
</pre>
<h2>Database Name</h2>
<p>If you pass the database name as a parameter in a base constructor of the context class, then Code First will create a database automatically again, but this time the name will be the one passed as parameter in the base constructor on the local SQLEXPRESS database server.</p>
<p>In the following code, MyContextDB is specified as parameter in the base constructor. If run your application, then the database with MyContextDB name will be created in your local SQL server.</p>
<pre class="prettyprint notranslate">
public class MyContext : DbContext {
   public MyContext() : base("MyContextDB") {}
   public virtual DbSet&lt;Course&gt; Courses { get; set; }
   public virtual DbSet&lt;Enrollment&gt; Enrollments { get; set; }
   public virtual DbSet&lt;Student&gt; Students { get; set; }
}
</pre>
<h2>Connection String Name</h2>
<p>This is an easy way to tell DbContext to use a database server other than SQL Express or LocalDb. You may choose to put a connection string in your app.config file.</p>
<ul class="list">
<li><p>If the name of the connection string matches the name of your context (either with or without namespace qualification), then it will be found by DbContext when the parameter less constructor is used.</p></li>
<li><p>If the connection string name is different from the name of your context, then you can tell DbContext to use this connection in Code First mode by passing the connection string name to the DbContext constructor.</p></li>
</ul>
<pre class="prettyprint notranslate">
public class MyContext : DbContext {
   public MyContext() : base("name = MyContextDB") {}
   public virtual DbSet&lt;Course&gt; Courses { get; set; }
   public virtual DbSet&lt;Enrollment&gt; Enrollments { get; set; }
   public virtual DbSet&lt;Student&gt; Students { get; set; }
}
</pre>
<ul class="list">
<li><p>In the above code, snippet of context class connection string is specified as a parameter in the base constructor.</p></li>
<li><p>Connection string name must start with "name=" otherwise, it will consider it as a database name.</p></li>
<li><p>This form makes it explicit that you expect the connection string to be found in your config file. An exception will be thrown if a connection string with the given name is not found.</p></li>
</ul>
<pre class="prettyprint notranslate">
&lt;connectionStrings&gt;
   &lt;add name = "MyContextDB"
      connectionString = "Data Source =.;Initial Catalog = EFMyContextDB;Integrated Security = true"
      providerName = "System.Data.SqlClient"/&gt;
&lt;/connectionStrings&gt;
</pre>
<ul class="list">
<li><p>The database name in the connection string in app.config is <b>EFMyContextDB</b>. CodeFirst will create a new <b>EFMyContextDB</b> database or use existing <b>EFMyContextDB</b> database at local SQL Server.</p></li>
</ul>
<h2>Domain Classes</h2>
<p>So far we’ve just let EF discover the model using its default conventions, but there are going to be times when our classes don’t follow the conventions and we need to be able to perform further configuration. But you can override these conventions by configuring your domain classes to provide EF with the information it needs. There are two options to configure your domain classes &minus;</p>
<ul class="list">
<li>Data Annotations</li>
<li>Fluent API</li>
</ul>
<h2>Data Annotations</h2>
<p>DataAnnotations is used to configure your classes which will highlight the most commonly needed configurations. DataAnnotations are also understood by a number of .NET applications, such as ASP.NET MVC which allow these applications to leverage the same annotations for client-side validations.</p>
<p>Following are the data annotations used in student class.</p>
<pre class="prettyprint notranslate">
public class Enrollment {

   [Key]
   public int EnrollmentID { get; set; }
   public int CourseID { get; set; }
   public int StudentID { get; set; }
   public Grade? Grade { get; set; }

   [ForeignKey("CourseID")]
   public virtual Course Course { get; set; }

   [ForeignKey("ID")]
   public virtual Student Student { get; set; }
}
</pre>
<h2>Fluent API</h2>
<p>Most model configuration can be done using simple data annotations. The fluent API is a advanced way of specifying model configuration that covers everything that data annotations can do, in addition to some more advanced configuration not possible with data annotations. Data annotations and the fluent API can be used together.</p>
<p>To access the fluent API you override the OnModelCreating method in DbContext. Now let’s rename the column name in student table from FirstMidName to FirstName as shown in the following code.</p>
<pre class="prettyprint notranslate">
public class MyContext : DbContext {

   protected override void OnModelCreating(DbModelBuilder modelBuilder) {
      modelBuilder.Entity&lt;Student&gt;().Property(s &#8658; s.FirstMidName)
         .HasColumnName("FirstName");
   }

   public virtual DbSet&lt;Course&gt; Courses { get; set; }
   public virtual DbSet&lt;Enrollment&gt; Enrollments { get; set; }
   public virtual DbSet&lt;Student&gt; Students { get; set; }
}
</pre>
<hr />
<div class="pre-btn">
<a href="/entity_framework/entity_framework_code_first_approach.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="print-btn center">
<a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>
</div>
<div class="nxt-btn">
<a href="/entity_framework/entity_framework_data_annotations.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<hr />
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div class="bottomadtag">Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
<div class="row">
<div class="col-md-3" id="rightbar">
<div class="simple-ad">
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/entity_framework/entity_framework_first_example.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/facebookIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/entity_framework/entity_framework_first_example.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/twitterIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/entity_framework/entity_framework_first_example.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/linkedinIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/entity_framework/entity_framework_first_example.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/googlePlusIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/entity_framework/entity_framework_first_example.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="/images/StumbleUponIcon.jpg" alt="img" />
</a>
<a  href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/entity_framework/entity_framework_first_example.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;">
<img src="/images/reddit.jpg" alt="img" />
</a>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="footer-copyright">
<div class="container">
<div class="row">
<div class="col-md-1">
<a href="index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="/scripts/img/logo-footer.png"> </a>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <nav id="sub-menu">
      <ul>
         <li><a href="/about/faq.htm">FAQ's</a></li>
         <li><a href="/about/about_privacy.htm#cookies">Cookies Policy</a></li>
         <li><a href="/about/contact_us.htm">Contact</a></li>
      </ul>
   </nav>
</div>
<div class="col-md-3 col-sm-12 col-xs-12">
<p>&copy; Copyright 2018. All Rights Reserved.</p>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <div class="news-group">
      <input type="text" class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}">
      <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span>
      <div id="newsresponse"></div>
   </div>
</div>
</div>
</div>
</div>
</div>
<!-- Libs -->
<script src="/theme/js/custom-min.js?v=7"></script>
<script src="https://www.google-analytics.com/urchin.js">
</script>
<script>
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script>
</div>
</body>
</html>
